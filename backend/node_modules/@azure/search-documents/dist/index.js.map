{"version":3,"file":"index.js","sources":["../src/generated/data/models/mappers.ts","../src/generated/data/models/parameters.ts","../src/generated/data/operations/documents.ts","../src/generated/data/searchClientContext.ts","../src/generated/data/searchClient.ts","../src/searchApiKeyCredentialPolicy.ts","../src/constants.ts","../src/logger.ts","../src/tracing.ts","../src/geographyPoint.ts","../src/serialization.ts","../src/odataMetadataPolicy.ts","../src/indexDocumentsBatch.ts","../src/base64.ts","../src/serviceModels.ts","../src/serviceUtils.ts","../src/searchAudience.ts","../src/searchClient.ts","../src/searchIndexingBufferedSender.ts","../src/generated/service/models/mappers.ts","../src/generated/service/models/parameters.ts","../src/generated/service/operations/dataSources.ts","../src/generated/service/operations/indexers.ts","../src/generated/service/operations/skillsets.ts","../src/generated/service/operations/synonymMaps.ts","../src/generated/service/operations/indexes.ts","../src/generated/service/searchServiceClientContext.ts","../src/generated/service/searchServiceClient.ts","../src/searchIndexClient.ts","../src/searchIndexerClient.ts","../src/odata.ts","../src/synonymMapHelper.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const SearchError: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SearchDocumentsResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchDocumentsResult\",\n    modelProperties: {\n      count: {\n        serializedName: \"@odata\\\\.count\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      coverage: {\n        serializedName: \"@search\\\\.coverage\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      facets: {\n        serializedName: \"@search\\\\.facets\",\n        readOnly: true,\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"Sequence\",\n              element: { type: { name: \"Composite\", className: \"FacetResult\" } }\n            }\n          }\n        }\n      },\n      nextPageParameters: {\n        serializedName: \"@search\\\\.nextPageParameters\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchRequest\"\n        }\n      },\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchResult\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"@odata\\\\.nextLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FacetResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FacetResult\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchRequest: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchRequest\",\n    modelProperties: {\n      includeTotalResultCount: {\n        serializedName: \"count\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      facets: {\n        serializedName: \"facets\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightFields: {\n        serializedName: \"highlight\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPostTag: {\n        serializedName: \"highlightPostTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPreTag: {\n        serializedName: \"highlightPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      minimumCoverage: {\n        serializedName: \"minimumCoverage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderBy: {\n        serializedName: \"orderby\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryType: {\n        serializedName: \"queryType\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"simple\", \"full\"]\n        }\n      },\n      scoringStatistics: {\n        serializedName: \"scoringStatistics\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"local\", \"global\"]\n        }\n      },\n      sessionId: {\n        serializedName: \"sessionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scoringParameters: {\n        serializedName: \"scoringParameters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      scoringProfile: {\n        serializedName: \"scoringProfile\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchText: {\n        serializedName: \"search\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchFields: {\n        serializedName: \"searchFields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchMode: {\n        serializedName: \"searchMode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"any\", \"all\"]\n        }\n      },\n      select: {\n        serializedName: \"select\",\n        type: {\n          name: \"String\"\n        }\n      },\n      skip: {\n        serializedName: \"skip\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchResult\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      _score: {\n        serializedName: \"@search\\\\.score\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      _highlights: {\n        serializedName: \"@search\\\\.highlights\",\n        readOnly: true,\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Sequence\", element: { type: { name: \"String\" } } }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SuggestDocumentsResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SuggestDocumentsResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SuggestResult\"\n            }\n          }\n        }\n      },\n      coverage: {\n        serializedName: \"@search\\\\.coverage\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SuggestResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SuggestResult\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      _text: {\n        serializedName: \"@search\\\\.text\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SuggestRequest: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SuggestRequest\",\n    modelProperties: {\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      useFuzzyMatching: {\n        serializedName: \"fuzzy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      highlightPostTag: {\n        serializedName: \"highlightPostTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPreTag: {\n        serializedName: \"highlightPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      minimumCoverage: {\n        serializedName: \"minimumCoverage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderBy: {\n        serializedName: \"orderby\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchText: {\n        serializedName: \"search\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      searchFields: {\n        serializedName: \"searchFields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      select: {\n        serializedName: \"select\",\n        type: {\n          name: \"String\"\n        }\n      },\n      suggesterName: {\n        serializedName: \"suggesterName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const IndexBatch: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexBatch\",\n    modelProperties: {\n      actions: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IndexAction\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IndexAction: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexAction\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      __actionType: {\n        serializedName: \"@search\\\\.action\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"upload\", \"merge\", \"mergeOrUpload\", \"delete\"]\n        }\n      }\n    }\n  }\n};\n\nexport const IndexDocumentsResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexDocumentsResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IndexingResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IndexingResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexingResult\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      errorMessage: {\n        serializedName: \"errorMessage\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      succeeded: {\n        serializedName: \"status\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      statusCode: {\n        serializedName: \"statusCode\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AutocompleteResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AutocompleteResult\",\n    modelProperties: {\n      coverage: {\n        serializedName: \"@search\\\\.coverage\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AutocompleteItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AutocompleteItem: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AutocompleteItem\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryPlusText: {\n        serializedName: \"queryPlusText\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AutocompleteRequest: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AutocompleteRequest\",\n    modelProperties: {\n      searchText: {\n        serializedName: \"search\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      autocompleteMode: {\n        serializedName: \"autocompleteMode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"oneTerm\", \"twoTerms\", \"oneTermWithContext\"]\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      useFuzzyMatching: {\n        serializedName: \"fuzzy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      highlightPostTag: {\n        serializedName: \"highlightPostTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPreTag: {\n        serializedName: \"highlightPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      minimumCoverage: {\n        serializedName: \"minimumCoverage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      searchFields: {\n        serializedName: \"searchFields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      suggesterName: {\n        serializedName: \"suggesterName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n  QueryCollectionFormat\n} from \"@azure/core-http\";\nimport {\n  SearchRequest as SearchRequestMapper,\n  SuggestRequest as SuggestRequestMapper,\n  IndexBatch as IndexBatchMapper,\n  AutocompleteRequest as AutocompleteRequestMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const indexName: OperationURLParameter = {\n  parameterPath: \"indexName\",\n  mapper: {\n    serializedName: \"indexName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const xMsClientRequestId: OperationParameter = {\n  parameterPath: [\"options\", \"requestOptionsParam\", \"xMsClientRequestId\"],\n  mapper: {\n    serializedName: \"x-ms-client-request-id\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    serializedName: \"api-version\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const searchText: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchText\"],\n  mapper: {\n    serializedName: \"search\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const includeTotalResultCount: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"includeTotalResultCount\"],\n  mapper: {\n    serializedName: \"$count\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const facets: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"facets\"],\n  mapper: {\n    serializedName: \"facet\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Multi\n};\n\nexport const filter: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"filter\"],\n  mapper: {\n    serializedName: \"$filter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const highlightFields: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"highlightFields\"],\n  mapper: {\n    serializedName: \"highlight\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const highlightPostTag: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"highlightPostTag\"],\n  mapper: {\n    serializedName: \"highlightPostTag\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const highlightPreTag: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"highlightPreTag\"],\n  mapper: {\n    serializedName: \"highlightPreTag\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const minimumCoverage: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"minimumCoverage\"],\n  mapper: {\n    serializedName: \"minimumCoverage\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const orderBy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"orderBy\"],\n  mapper: {\n    serializedName: \"$orderby\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const queryType: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"queryType\"],\n  mapper: {\n    serializedName: \"queryType\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"simple\", \"full\"]\n    }\n  }\n};\n\nexport const scoringParameters: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"scoringParameters\"],\n  mapper: {\n    serializedName: \"scoringParameter\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Multi\n};\n\nexport const scoringProfile: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"scoringProfile\"],\n  mapper: {\n    serializedName: \"scoringProfile\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const searchFields: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"searchFields\"],\n  mapper: {\n    serializedName: \"searchFields\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const searchMode: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"searchMode\"],\n  mapper: {\n    serializedName: \"searchMode\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"any\", \"all\"]\n    }\n  }\n};\n\nexport const scoringStatistics: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"scoringStatistics\"],\n  mapper: {\n    serializedName: \"scoringStatistics\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"local\", \"global\"]\n    }\n  }\n};\n\nexport const sessionId: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"sessionId\"],\n  mapper: {\n    serializedName: \"sessionId\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const select: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"select\"],\n  mapper: {\n    serializedName: \"$select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const skip: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"skip\"],\n  mapper: {\n    serializedName: \"$skip\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const top: OperationQueryParameter = {\n  parameterPath: [\"options\", \"searchOptions\", \"top\"],\n  mapper: {\n    serializedName: \"$top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const searchRequest: OperationParameter = {\n  parameterPath: \"searchRequest\",\n  mapper: SearchRequestMapper\n};\n\nexport const key: OperationURLParameter = {\n  parameterPath: \"key\",\n  mapper: {\n    serializedName: \"key\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const selectedFields: OperationQueryParameter = {\n  parameterPath: [\"options\", \"selectedFields\"],\n  mapper: {\n    serializedName: \"$select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const searchText1: OperationQueryParameter = {\n  parameterPath: \"searchText\",\n  mapper: {\n    serializedName: \"search\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const suggesterName: OperationQueryParameter = {\n  parameterPath: \"suggesterName\",\n  mapper: {\n    serializedName: \"suggesterName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const filter1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"suggestOptions\", \"filter\"],\n  mapper: {\n    serializedName: \"$filter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const useFuzzyMatching: OperationQueryParameter = {\n  parameterPath: [\"options\", \"suggestOptions\", \"useFuzzyMatching\"],\n  mapper: {\n    serializedName: \"fuzzy\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const highlightPostTag1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"suggestOptions\", \"highlightPostTag\"],\n  mapper: {\n    serializedName: \"highlightPostTag\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const highlightPreTag1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"suggestOptions\", \"highlightPreTag\"],\n  mapper: {\n    serializedName: \"highlightPreTag\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const minimumCoverage1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"suggestOptions\", \"minimumCoverage\"],\n  mapper: {\n    serializedName: \"minimumCoverage\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const orderBy1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"suggestOptions\", \"orderBy\"],\n  mapper: {\n    serializedName: \"$orderby\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const searchFields1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"suggestOptions\", \"searchFields\"],\n  mapper: {\n    serializedName: \"searchFields\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const select1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"suggestOptions\", \"select\"],\n  mapper: {\n    serializedName: \"$select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const top1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"suggestOptions\", \"top\"],\n  mapper: {\n    serializedName: \"$top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const suggestRequest: OperationParameter = {\n  parameterPath: \"suggestRequest\",\n  mapper: SuggestRequestMapper\n};\n\nexport const batch: OperationParameter = {\n  parameterPath: \"batch\",\n  mapper: IndexBatchMapper\n};\n\nexport const autocompleteMode: OperationQueryParameter = {\n  parameterPath: [\"options\", \"autocompleteOptions\", \"autocompleteMode\"],\n  mapper: {\n    serializedName: \"autocompleteMode\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"oneTerm\", \"twoTerms\", \"oneTermWithContext\"]\n    }\n  }\n};\n\nexport const filter2: OperationQueryParameter = {\n  parameterPath: [\"options\", \"autocompleteOptions\", \"filter\"],\n  mapper: {\n    serializedName: \"$filter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const useFuzzyMatching1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"autocompleteOptions\", \"useFuzzyMatching\"],\n  mapper: {\n    serializedName: \"fuzzy\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const highlightPostTag2: OperationQueryParameter = {\n  parameterPath: [\"options\", \"autocompleteOptions\", \"highlightPostTag\"],\n  mapper: {\n    serializedName: \"highlightPostTag\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const highlightPreTag2: OperationQueryParameter = {\n  parameterPath: [\"options\", \"autocompleteOptions\", \"highlightPreTag\"],\n  mapper: {\n    serializedName: \"highlightPreTag\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const minimumCoverage2: OperationQueryParameter = {\n  parameterPath: [\"options\", \"autocompleteOptions\", \"minimumCoverage\"],\n  mapper: {\n    serializedName: \"minimumCoverage\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const searchFields2: OperationQueryParameter = {\n  parameterPath: [\"options\", \"autocompleteOptions\", \"searchFields\"],\n  mapper: {\n    serializedName: \"searchFields\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const top2: OperationQueryParameter = {\n  parameterPath: [\"options\", \"autocompleteOptions\", \"top\"],\n  mapper: {\n    serializedName: \"$top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const autocompleteRequest: OperationParameter = {\n  parameterPath: \"autocompleteRequest\",\n  mapper: AutocompleteRequestMapper\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchClient } from \"../searchClient\";\nimport {\n  DocumentsCountOptionalParams,\n  DocumentsCountResponse,\n  DocumentsSearchGetOptionalParams,\n  DocumentsSearchGetResponse,\n  SearchRequest,\n  DocumentsSearchPostOptionalParams,\n  DocumentsSearchPostResponse,\n  DocumentsGetOptionalParams,\n  DocumentsGetResponse,\n  DocumentsSuggestGetOptionalParams,\n  DocumentsSuggestGetResponse,\n  SuggestRequest,\n  DocumentsSuggestPostOptionalParams,\n  DocumentsSuggestPostResponse,\n  IndexBatch,\n  DocumentsIndexOptionalParams,\n  DocumentsIndexResponse,\n  DocumentsAutocompleteGetOptionalParams,\n  DocumentsAutocompleteGetResponse,\n  AutocompleteRequest,\n  DocumentsAutocompletePostOptionalParams,\n  DocumentsAutocompletePostResponse\n} from \"../models\";\n\n/** Class representing a Documents. */\nexport class Documents {\n  private readonly client: SearchClient;\n\n  /**\n   * Initialize a new instance of the class Documents class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SearchClient) {\n    this.client = client;\n  }\n\n  /**\n   * Queries the number of documents in the index.\n   * @param options The options parameters.\n   */\n  count(\n    options?: DocumentsCountOptionalParams\n  ): Promise<DocumentsCountResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      countOperationSpec\n    ) as Promise<DocumentsCountResponse>;\n  }\n\n  /**\n   * Searches for documents in the index.\n   * @param options The options parameters.\n   */\n  searchGet(\n    options?: DocumentsSearchGetOptionalParams\n  ): Promise<DocumentsSearchGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      searchGetOperationSpec\n    ) as Promise<DocumentsSearchGetResponse>;\n  }\n\n  /**\n   * Searches for documents in the index.\n   * @param searchRequest The definition of the Search request.\n   * @param options The options parameters.\n   */\n  searchPost(\n    searchRequest: SearchRequest,\n    options?: DocumentsSearchPostOptionalParams\n  ): Promise<DocumentsSearchPostResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      searchRequest,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      searchPostOperationSpec\n    ) as Promise<DocumentsSearchPostResponse>;\n  }\n\n  /**\n   * Retrieves a document from the index.\n   * @param key The key of the document to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    key: string,\n    options?: DocumentsGetOptionalParams\n  ): Promise<DocumentsGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      key,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getOperationSpec\n    ) as Promise<DocumentsGetResponse>;\n  }\n\n  /**\n   * Suggests documents in the index that match the given partial query text.\n   * @param searchText The search text to use to suggest documents. Must be at least 1 character, and no\n   *                   more than 100 characters.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's part\n   *                      of the index definition.\n   * @param options The options parameters.\n   */\n  suggestGet(\n    searchText: string,\n    suggesterName: string,\n    options?: DocumentsSuggestGetOptionalParams\n  ): Promise<DocumentsSuggestGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      searchText,\n      suggesterName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      suggestGetOperationSpec\n    ) as Promise<DocumentsSuggestGetResponse>;\n  }\n\n  /**\n   * Suggests documents in the index that match the given partial query text.\n   * @param suggestRequest The Suggest request.\n   * @param options The options parameters.\n   */\n  suggestPost(\n    suggestRequest: SuggestRequest,\n    options?: DocumentsSuggestPostOptionalParams\n  ): Promise<DocumentsSuggestPostResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      suggestRequest,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      suggestPostOperationSpec\n    ) as Promise<DocumentsSuggestPostResponse>;\n  }\n\n  /**\n   * Sends a batch of document write actions to the index.\n   * @param batch The batch of index actions.\n   * @param options The options parameters.\n   */\n  index(\n    batch: IndexBatch,\n    options?: DocumentsIndexOptionalParams\n  ): Promise<DocumentsIndexResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      batch,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      indexOperationSpec\n    ) as Promise<DocumentsIndexResponse>;\n  }\n\n  /**\n   * Autocompletes incomplete query terms based on input text and matching terms in the index.\n   * @param searchText The incomplete term which should be auto-completed.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's part\n   *                      of the index definition.\n   * @param options The options parameters.\n   */\n  autocompleteGet(\n    searchText: string,\n    suggesterName: string,\n    options?: DocumentsAutocompleteGetOptionalParams\n  ): Promise<DocumentsAutocompleteGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      searchText,\n      suggesterName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      autocompleteGetOperationSpec\n    ) as Promise<DocumentsAutocompleteGetResponse>;\n  }\n\n  /**\n   * Autocompletes incomplete query terms based on input text and matching terms in the index.\n   * @param autocompleteRequest The definition of the Autocomplete request.\n   * @param options The options parameters.\n   */\n  autocompletePost(\n    autocompleteRequest: AutocompleteRequest,\n    options?: DocumentsAutocompletePostOptionalParams\n  ): Promise<DocumentsAutocompletePostResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      autocompleteRequest,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      autocompletePostOperationSpec\n    ) as Promise<DocumentsAutocompletePostResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst countOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/$count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"Number\" } }\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst searchGetOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.searchText,\n    Parameters.includeTotalResultCount,\n    Parameters.facets,\n    Parameters.filter,\n    Parameters.highlightFields,\n    Parameters.highlightPostTag,\n    Parameters.highlightPreTag,\n    Parameters.minimumCoverage,\n    Parameters.orderBy,\n    Parameters.queryType,\n    Parameters.scoringParameters,\n    Parameters.scoringProfile,\n    Parameters.searchFields,\n    Parameters.searchMode,\n    Parameters.scoringStatistics,\n    Parameters.sessionId,\n    Parameters.select,\n    Parameters.skip,\n    Parameters.top\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst searchPostOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.post.search\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.searchRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.contentType\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst getOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs('{key}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } }\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.selectedFields],\n  urlParameters: [Parameters.endpoint, Parameters.indexName, Parameters.key],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst suggestGetOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.suggest\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SuggestDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.searchText1,\n    Parameters.suggesterName,\n    Parameters.filter1,\n    Parameters.useFuzzyMatching,\n    Parameters.highlightPostTag1,\n    Parameters.highlightPreTag1,\n    Parameters.minimumCoverage1,\n    Parameters.orderBy1,\n    Parameters.searchFields1,\n    Parameters.select1,\n    Parameters.top1\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst suggestPostOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.post.suggest\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SuggestDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.suggestRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.contentType\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst indexOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.index\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IndexDocumentsResult\n    },\n    207: {\n      bodyMapper: Mappers.IndexDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.batch,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.contentType\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst autocompleteGetOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.autocomplete\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AutocompleteResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.searchText1,\n    Parameters.suggesterName,\n    Parameters.autocompleteMode,\n    Parameters.filter2,\n    Parameters.useFuzzyMatching1,\n    Parameters.highlightPostTag2,\n    Parameters.highlightPreTag2,\n    Parameters.minimumCoverage2,\n    Parameters.searchFields2,\n    Parameters.top2\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst autocompletePostOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.post.autocomplete\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AutocompleteResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.autocompleteRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.contentType\n  ],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport { ApiVersion20200630, SearchClientOptionalParams } from \"./models\";\n\nconst packageName = \"@azure/search-documents\";\nconst packageVersion = \"11.3.1\";\n\n/** @internal */\nexport class SearchClientContext extends coreHttp.ServiceClient {\n  endpoint: string;\n  indexName: string;\n  apiVersion: ApiVersion20200630;\n\n  /**\n   * Initializes a new instance of the SearchClientContext class.\n   * @param endpoint The endpoint URL of the search service.\n   * @param indexName The name of the index.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    endpoint: string,\n    indexName: string,\n    apiVersion: ApiVersion20200630,\n    options?: SearchClientOptionalParams\n  ) {\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n    if (indexName === undefined) {\n      throw new Error(\"'indexName' cannot be null\");\n    }\n    if (apiVersion === undefined) {\n      throw new Error(\"'apiVersion' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri = options.endpoint || \"{endpoint}/indexes('{indexName}')\";\n\n    // Parameter assignments\n    this.endpoint = endpoint;\n    this.indexName = indexName;\n    this.apiVersion = apiVersion;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Documents } from \"./operations\";\nimport { SearchClientContext } from \"./searchClientContext\";\nimport { SearchClientOptionalParams, ApiVersion20200630 } from \"./models\";\n\n/** @internal */\nexport class SearchClient extends SearchClientContext {\n  /**\n   * Initializes a new instance of the SearchClient class.\n   * @param endpoint The endpoint URL of the search service.\n   * @param indexName The name of the index.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    endpoint: string,\n    indexName: string,\n    apiVersion: ApiVersion20200630,\n    options?: SearchClientOptionalParams\n  ) {\n    super(endpoint, indexName, apiVersion, options);\n    this.documents = new Documents(this);\n  }\n\n  documents: Documents;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  BaseRequestPolicy,\n  WebResourceLike,\n  HttpOperationResponse,\n  RequestPolicyOptionsLike\n} from \"@azure/core-http\";\n\nconst API_KEY_HEADER_NAME = \"api-key\";\n\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for Azure Cognitive Search\n */\nexport function createSearchApiKeyCredentialPolicy(\n  credential: KeyCredential\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new SearchApiKeyCredentialPolicy(nextPolicy, options, credential);\n    }\n  };\n}\n\n/**\n * A concrete implementation of an AzureKeyCredential policy\n * using the appropriate header for Azure Cognitive Search\n */\nclass SearchApiKeyCredentialPolicy extends BaseRequestPolicy {\n  private credential: KeyCredential;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike,\n    credential: KeyCredential\n  ) {\n    super(nextPolicy, options);\n    this.credential = credential;\n  }\n\n  public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!webResource) {\n      throw new Error(\"webResource cannot be null or undefined\");\n    }\n\n    webResource.headers.set(API_KEY_HEADER_NAME, this.credential.key);\n    return this._nextPolicy.sendRequest(webResource);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"11.3.1\";\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The `@azure/logger` configuration for this package.\n */\nexport const logger = createClientLogger(\"search\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createSpanFunction } from \"@azure/core-tracing\";\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const createSpan = createSpanFunction({\n  packagePrefix: \"Azure.Search\",\n  namespace: \"Microsoft.Search\"\n});\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst WorldGeodeticSystem1984 = \"EPSG:4326\"; // See https://epsg.io/4326\n\n/**\n * Represents a geographic point in global coordinates.\n */\nexport default class GeographyPoint {\n  /**\n   * The latitude in decimal.\n   */\n  public latitude: number;\n  /**\n   * The longitude in decimal.\n   */\n  public longitude: number;\n\n  /**\n   * Constructs a new instance of GeographyPoint given\n   * the specified coordinates.\n   * @param geographyPoint - object with longitude and latitude values in decimal\n   */\n  constructor(geographyPoint: { longitude: number; latitude: number }) {\n    this.longitude = geographyPoint.longitude;\n    this.latitude = geographyPoint.latitude;\n  }\n\n  /**\n   * Used to serialize to a GeoJSON Point.\n   */\n  public toJSON(): Record<string, unknown> {\n    return {\n      type: \"Point\",\n      coordinates: [this.longitude, this.latitude],\n      crs: { type: \"name\", properties: { name: WorldGeodeticSystem1984 } }\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport GeographyPoint from \"./geographyPoint\";\n\nconst ISO8601DateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/i;\nconst GeoJSONPointTypeName = \"Point\";\nconst WorldGeodeticSystem1984 = \"EPSG:4326\"; // See https://epsg.io/4326\n\nexport function serialize<OutputT>(obj: unknown): OutputT {\n  return walk(obj, (value) => {\n    const result = serializeSpecialNumbers(value);\n    return result;\n  });\n}\n\nexport function deserialize<OutputT>(obj: unknown): OutputT {\n  return walk(obj, (value) => {\n    let result = deserializeSpecialNumbers(value);\n    result = deserializeDates(result);\n    result = deserializeGeoPoint(result);\n    return result;\n  });\n}\n\nfunction walk(start: unknown, mapper: (val: any) => any): any {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const seenMarker = new WeakMap<object, boolean>();\n  const result = { value: undefined };\n  const queue: { value: any; parent: any; key: string }[] = [\n    { value: start, parent: result, key: \"value\" }\n  ];\n\n  while (queue.length) {\n    const current = queue.shift()!;\n\n    if (typeof current.value === \"object\" && current.value !== null) {\n      if (seenMarker.has(current.value)) {\n        continue;\n      } else {\n        seenMarker.set(current.value, true);\n      }\n    }\n\n    const mapped = mapper(current.value);\n    if (current?.parent && current.key) {\n      current.parent[current.key] = mapped;\n    }\n    if (typeof mapped === \"object\" && mapped !== null) {\n      for (const key of Object.keys(mapped)) {\n        queue.push({\n          value: mapped[key],\n          parent: mapped,\n          key\n        });\n      }\n    }\n  }\n\n  return result.value;\n}\n\nfunction serializeSpecialNumbers(input: unknown): unknown {\n  if (typeof input === \"number\") {\n    if (isNaN(input)) {\n      return \"NaN\";\n    } else if (input === Infinity) {\n      return \"INF\";\n    } else if (input === -Infinity) {\n      return \"-INF\";\n    }\n  }\n  return input;\n}\n\nfunction deserializeSpecialNumbers(input: unknown): unknown {\n  if (typeof input === \"string\") {\n    if (input === \"NaN\") {\n      return NaN;\n    } else if (input === \"INF\") {\n      return Infinity;\n    } else if (input === \"-INF\") {\n      return -Infinity;\n    }\n  }\n  return input;\n}\n\nfunction deserializeDates(input: unknown): Date | unknown {\n  if (typeof input === \"string\") {\n    if (ISO8601DateRegex.test(input)) {\n      return new Date(input);\n    }\n  }\n  return input;\n}\n\nfunction deserializeGeoPoint(input: unknown): GeographyPoint | unknown {\n  if (isGeoJSONPoint(input)) {\n    return new GeographyPoint({ longitude: input.coordinates[0], latitude: input.coordinates[1] });\n  }\n\n  return input;\n}\n\ninterface GeoJSONPoint {\n  type: \"Point\";\n  coordinates: [number, number];\n  crs: {\n    type: \"name\";\n    properties: {\n      name: \"EPSG:4326\";\n    };\n  };\n}\n\nfunction isGeoJSONPoint(obj: any): obj is GeoJSONPoint {\n  const requiredKeys = [\"type\", \"coordinates\"];\n  return isValidObject(obj, {\n    requiredKeys,\n    propertyValidator: (key) => {\n      switch (key) {\n        case \"type\":\n          return obj.type === GeoJSONPointTypeName;\n          break;\n        case \"coordinates\":\n          return isCoordinateArray(obj.coordinates);\n          break;\n        case \"crs\":\n          return isCrs(obj.crs);\n          break;\n        default:\n          return false;\n      }\n    }\n  });\n}\n\nfunction isCoordinateArray(maybeCoordinates: any): boolean {\n  if (!Array.isArray(maybeCoordinates)) {\n    return false;\n  }\n  if (maybeCoordinates.length !== 2) {\n    return false;\n  }\n  if (typeof maybeCoordinates[0] !== \"number\" || typeof maybeCoordinates[1] !== \"number\") {\n    return false;\n  }\n  return true;\n}\n\nfunction isCrs(maybeCrs: any): boolean {\n  return isValidObject(maybeCrs, {\n    requiredKeys: [\"type\", \"properties\"],\n    propertyValidator: (key) => {\n      switch (key) {\n        case \"type\":\n          return maybeCrs.type === \"name\";\n          break;\n        case \"properties\":\n          return isCrsProperties(maybeCrs.properties);\n          break;\n        default:\n          return false;\n      }\n    }\n  });\n}\n\nfunction isCrsProperties(maybeProperties: any): boolean {\n  return isValidObject(maybeProperties, {\n    requiredKeys: [\"name\"],\n    propertyValidator: (key) => {\n      if (key === \"name\") {\n        return maybeProperties.name === WorldGeodeticSystem1984;\n      } else {\n        return false;\n      }\n    }\n  });\n}\n\nfunction isValidObject(\n  obj: any,\n  options: {\n    requiredKeys?: string[];\n    propertyValidator?: (keyName: string) => boolean;\n  } = {}\n): boolean {\n  if (typeof obj !== \"object\" || obj === null) {\n    return false;\n  }\n\n  const keys = Object.keys(obj);\n\n  if (options.requiredKeys) {\n    for (const requiredKey of options.requiredKeys) {\n      if (!keys.includes(requiredKey)) {\n        return false;\n      }\n    }\n  }\n\n  if (options.propertyValidator) {\n    for (const key of keys) {\n      if (!options.propertyValidator(key)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  RequestPolicy,\n  RequestPolicyOptions,\n  BaseRequestPolicy,\n  WebResourceLike,\n  HttpOperationResponse,\n  RequestPolicyFactory,\n  RequestPolicyOptionsLike\n} from \"@azure/core-http\";\n\nconst AcceptHeaderName = \"Accept\";\n\nexport type MetadataLevel = \"none\" | \"minimal\";\n\n/**\n * A policy factory for setting the Accept header to ignore odata metadata\n * @internal\n */\nexport function odataMetadataPolicy(metadataLevel: MetadataLevel): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new OdataMetadataPolicy(nextPolicy, options, { metadataLevel });\n    }\n  };\n}\n\nclass OdataMetadataPolicy extends BaseRequestPolicy {\n  private metadataLevel: MetadataLevel;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike,\n    policyOptions: { metadataLevel: MetadataLevel }\n  ) {\n    super(nextPolicy, options);\n    this.metadataLevel = policyOptions.metadataLevel;\n  }\n\n  public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n    webResource.headers.set(\n      AcceptHeaderName,\n      `application/json;odata.metadata=${this.metadataLevel}`\n    );\n    return this._nextPolicy.sendRequest(webResource);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { IndexDocumentsAction } from \"./indexModels\";\n\n/**\n * Class used to perform batch operations\n * with multiple documents to the index.\n */\nexport class IndexDocumentsBatch<T> {\n  /**\n   * The set of actions taken in this batch.\n   */\n  public readonly actions: IndexDocumentsAction<T>[];\n\n  constructor(actions: IndexDocumentsAction<T>[] = []) {\n    this.actions = actions;\n  }\n\n  /**\n   * Upload an array of documents to the index.\n   * @param documents - The documents to upload.\n   */\n  public upload(documents: T[]): void {\n    const batch = documents.map<IndexDocumentsAction<T>>((doc) => {\n      return {\n        ...doc,\n        __actionType: \"upload\"\n      };\n    });\n\n    this.actions.push(...batch);\n  }\n\n  /**\n   * Update a set of documents in the index.\n   * For more details about how merging works, see https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The updated documents.\n   */\n  public merge(documents: T[]): void {\n    const batch = documents.map<IndexDocumentsAction<T>>((doc) => {\n      return {\n        ...doc,\n        __actionType: \"merge\"\n      };\n    });\n\n    this.actions.push(...batch);\n  }\n\n  /**\n   * Update a set of documents in the index or uploads them if they don't exist.\n   * For more details about how merging works, see https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The new/updated documents.\n   */\n  public mergeOrUpload(documents: T[]): void {\n    const batch = documents.map<IndexDocumentsAction<T>>((doc) => {\n      return {\n        ...doc,\n        __actionType: \"mergeOrUpload\"\n      };\n    });\n\n    this.actions.push(...batch);\n  }\n\n  /**\n   * Delete a set of documents.\n   * @param keyName - The name of their primary key in the index.\n   * @param keyValues - The primary key values of documents to delete.\n   */\n  public delete(keyName: keyof T, keyValues: string[]): void;\n\n  /**\n   * Delete a set of documents.\n   * @param documents - Documents to be deleted.\n   */\n  public delete(documents: T[]): void;\n\n  public delete(keyNameOrDocuments: keyof T | T[], keyValues?: string[]): void {\n    if (keyValues) {\n      const keyName = keyNameOrDocuments as keyof T;\n\n      const batch = keyValues.map<IndexDocumentsAction<T>>((keyValue) => {\n        return {\n          __actionType: \"delete\",\n          [keyName]: keyValue\n        } as IndexDocumentsAction<T>;\n      });\n\n      this.actions.push(...batch);\n    } else {\n      const documents = keyNameOrDocuments as T[];\n\n      const batch = documents.map<IndexDocumentsAction<T>>((document) => {\n        return {\n          __actionType: \"delete\",\n          ...document\n        } as IndexDocumentsAction<T>;\n      });\n\n      this.actions.push(...batch);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Encodes a string in base64 format.\n * @param value - The string to encode.\n */\nexport function encode(value: string): string {\n  return Buffer.from(value).toString(\"base64\");\n}\n\n/**\n * Decodes a base64 string into a regular string.\n * @param value - The base64 string to decode.\n */\nexport function decode(value: string): string {\n  return Buffer.from(value, \"base64\").toString();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-http\";\nimport {\n  LuceneStandardAnalyzer,\n  StopAnalyzer,\n  CorsOptions,\n  Suggester as SearchSuggester,\n  ClassicTokenizer,\n  EdgeNGramTokenizer,\n  MicrosoftLanguageTokenizer,\n  MicrosoftLanguageStemmingTokenizer,\n  NGramTokenizer,\n  PathHierarchyTokenizerV2 as PathHierarchyTokenizer,\n  UaxUrlEmailTokenizer,\n  AsciiFoldingTokenFilter,\n  CjkBigramTokenFilter,\n  CommonGramTokenFilter,\n  DictionaryDecompounderTokenFilter,\n  LengthTokenFilter,\n  ElisionTokenFilter,\n  KeepTokenFilter,\n  KeywordMarkerTokenFilter,\n  LimitTokenFilter,\n  PatternCaptureTokenFilter,\n  PatternReplaceTokenFilter,\n  PhoneticTokenFilter,\n  ShingleTokenFilter,\n  SnowballTokenFilter,\n  StemmerTokenFilter,\n  StemmerOverrideTokenFilter,\n  StopwordsTokenFilter,\n  SynonymTokenFilter,\n  TruncateTokenFilter,\n  UniqueTokenFilter,\n  WordDelimiterTokenFilter,\n  MappingCharFilter,\n  PatternReplaceCharFilter,\n  DistanceScoringFunction,\n  FreshnessScoringFunction,\n  MagnitudeScoringFunction,\n  TagScoringFunction,\n  TextWeights,\n  ScoringFunctionAggregation,\n  RegexFlags,\n  ConditionalSkill,\n  KeyPhraseExtractionSkill,\n  OcrSkill,\n  ImageAnalysisSkill,\n  LanguageDetectionSkill,\n  ShaperSkill,\n  MergeSkill,\n  EntityRecognitionSkill,\n  SentimentSkill,\n  SplitSkill,\n  CustomEntityLookupSkill,\n  DocumentExtractionSkill,\n  TextTranslationSkill,\n  WebApiSkill,\n  DefaultCognitiveServicesAccount,\n  CognitiveServicesAccountKey,\n  HighWaterMarkChangeDetectionPolicy,\n  SqlIntegratedChangeTrackingPolicy,\n  SoftDeleteColumnDeletionDetectionPolicy,\n  SearchIndexerDataSourceType,\n  SearchIndexerDataContainer,\n  LexicalAnalyzerName,\n  ClassicSimilarity,\n  BM25Similarity,\n  EdgeNGramTokenFilterSide,\n  ServiceCounters,\n  ServiceLimits,\n  FieldMapping,\n  IndexingParameters,\n  IndexingSchedule,\n  SearchIndexerKnowledgeStore\n} from \"./generated/service/models\";\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\n/**\n * Options for a list skillsets operation.\n */\nexport type ListSkillsetsOptions = OperationOptions;\n\n/**\n * Options for a list synonymMaps operation.\n */\nexport type ListSynonymMapsOptions = OperationOptions;\n\n/**\n * Options for a list indexes operation.\n */\nexport type ListIndexesOptions = OperationOptions;\n\n/**\n * Options for a list indexers operation.\n */\nexport type ListIndexersOptions = OperationOptions;\n\n/**\n * Options for a list data sources operation.\n */\nexport type ListDataSourceConnectionsOptions = OperationOptions;\n\n/**\n * Options for get index operation.\n */\nexport type GetIndexOptions = OperationOptions;\n\n/**\n * Options for get skillset operation.\n */\nexport type GetSkillSetOptions = OperationOptions;\n\n/**\n * Options for get synonymmaps operation.\n */\nexport type GetSynonymMapsOptions = OperationOptions;\n\n/**\n * Options for get indexer operation.\n */\nexport type GetIndexerOptions = OperationOptions;\n\n/**\n * Options for get datasource operation.\n */\nexport type GetDataSourceConnectionOptions = OperationOptions;\n\n/**\n * Options for get index statistics operation.\n */\nexport type GetIndexStatisticsOptions = OperationOptions;\n\n/**\n * Statistics for a given index. Statistics are collected periodically and are not guaranteed to\n * always be up-to-date.\n */\nexport interface SearchIndexStatistics {\n  /**\n   * The number of documents in the index.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly documentCount: number;\n  /**\n   * The amount of storage in bytes consumed by the index.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly storageSize: number;\n}\n\n/**\n * Response from a get service statistics request. If successful, it includes service level\n * counters and limits.\n */\nexport interface SearchServiceStatistics {\n  /**\n   * Service level resource counters.\n   */\n  counters: ServiceCounters;\n  /**\n   * Service level general limits.\n   */\n  limits: ServiceLimits;\n}\n\n/**\n * Options for get service statistics operation.\n */\nexport type GetServiceStatisticsOptions = OperationOptions;\n\n/**\n * Options for get indexer status operation.\n */\nexport type GetIndexerStatusOptions = OperationOptions;\n\n/**\n * Options for reset indexer operation.\n */\nexport type ResetIndexerOptions = OperationOptions;\n\n/**\n * Options for run indexer operation.\n */\nexport type RunIndexerOptions = OperationOptions;\n\n/**\n * Options for create index operation.\n */\nexport type CreateIndexOptions = OperationOptions;\n\n/**\n * Options for create skillset operation.\n */\nexport type CreateSkillsetOptions = OperationOptions;\n\n/**\n * Options for create synonymmap operation.\n */\nexport type CreateSynonymMapOptions = OperationOptions;\n\n/**\n * Options for create indexer operation.\n */\nexport type CreateIndexerOptions = OperationOptions;\n\n/**\n * Options for create datasource operation.\n */\nexport type CreateDataSourceConnectionOptions = OperationOptions;\n\n/**\n * Options for create/update index operation.\n */\nexport interface CreateOrUpdateIndexOptions extends OperationOptions {\n  /**\n   * Allows new analyzers, tokenizers, token filters, or char filters to be added to an index by\n   * taking the index offline for at least a few seconds. This temporarily causes indexing and\n   * query requests to fail. Performance and write availability of the index can be impaired for\n   * several minutes after the index is updated, or longer for very large indexes.\n   */\n  allowIndexDowntime?: boolean;\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Options for create/update skillset operation.\n */\nexport interface CreateOrUpdateSkillsetOptions extends OperationOptions {\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Options for create/update synonymmap operation.\n */\nexport interface CreateOrUpdateSynonymMapOptions extends OperationOptions {\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Options for create/update indexer operation.\n */\nexport interface CreateorUpdateIndexerOptions extends OperationOptions {\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Options for create/update datasource operation.\n */\nexport interface CreateorUpdateDataSourceConnectionOptions extends OperationOptions {\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Options for delete index operation.\n */\nexport interface DeleteIndexOptions extends OperationOptions {\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Options for delete skillset operaion.\n */\nexport interface DeleteSkillsetOptions extends OperationOptions {\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Options for delete synonymmap operation.\n */\nexport interface DeleteSynonymMapOptions extends OperationOptions {\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Options for delete indexer operation.\n */\nexport interface DeleteIndexerOptions extends OperationOptions {\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Options for delete datasource operation.\n */\nexport interface DeleteDataSourceConnectionOptions extends OperationOptions {\n  /**\n   * If set to true, Resource will be deleted only if the etag matches.\n   */\n  onlyIfUnchanged?: boolean;\n}\n\n/**\n * Specifies some text and analysis components used to break that text into tokens.\n */\nexport interface AnalyzeRequest {\n  /**\n   * The text to break into tokens.\n   */\n  text: string;\n  /**\n   * The name of the analyzer to use to break the given text. If this parameter is not specified,\n   * you must specify a tokenizer instead. The tokenizer and analyzer parameters are mutually\n   * exclusive. KnownAnalyzerNames is an enum containing known values.\n   * NOTE: Either analyzerName or tokenizerName is required in an AnalyzeRequest.\n   */\n  analyzerName?: string;\n  /**\n   * The name of the tokenizer to use to break the given text. If this parameter is not specified,\n   * you must specify an analyzer instead. The tokenizer and analyzer parameters are mutually\n   * exclusive. KnownTokenizerNames is an enum containing known values.\n   * NOTE: Either analyzerName or tokenizerName is required in an AnalyzeRequest.\n   */\n  tokenizerName?: string;\n  /**\n   * An optional list of token filters to use when breaking the given text. This parameter can only\n   * be set when using the tokenizer parameter.\n   */\n  tokenFilters?: string[];\n  /**\n   * An optional list of character filters to use when breaking the given text. This parameter can\n   * only be set when using the tokenizer parameter.\n   */\n  charFilters?: string[];\n}\n\n/**\n * Options for analyze text operation.\n */\nexport type AnalyzeTextOptions = OperationOptions & AnalyzeRequest;\n\n// BEGIN manually modified generated interfaces\n//\n// This section is for places where we have to manually fix issues\n// with interfaces from the generated code.\n// One issue is that unions of discriminated types generated with\n// their abstract base class as a member.\n\n/**\n * Flexibly separates text into terms via a regular expression pattern. This analyzer is\n * implemented using Apache Lucene.\n */\nexport interface PatternAnalyzer {\n  /**\n   * Polymorphic Discriminator\n   */\n  odatatype: \"#Microsoft.Azure.Search.PatternAnalyzer\";\n  /**\n   * The name of the analyzer. It must only contain letters, digits, spaces, dashes or underscores,\n   * can only start and end with alphanumeric characters, and is limited to 128 characters.\n   */\n  name: string;\n  /**\n   * A value indicating whether terms should be lower-cased. Default is true. Default value: true.\n   */\n  lowerCaseTerms?: boolean;\n  /**\n   * A regular expression pattern to match token separators. Default is an expression that matches\n   * one or more whitespace characters. Default value: `\\W+`.\n   */\n  pattern?: string;\n  /**\n   * Regular expression flags. Possible values include: 'CANON_EQ', 'CASE_INSENSITIVE', 'COMMENTS',\n   * 'DOTALL', 'LITERAL', 'MULTILINE', 'UNICODE_CASE', 'UNIX_LINES'\n   */\n  flags?: RegexFlags[];\n  /**\n   * A list of stopwords.\n   */\n  stopwords?: string[];\n}\n\n/**\n * Allows you to take control over the process of converting text into indexable/searchable tokens.\n * It's a user-defined configuration consisting of a single predefined tokenizer and one or more\n * filters. The tokenizer is responsible for breaking text into tokens, and the filters for\n * modifying tokens emitted by the tokenizer.\n */\nexport interface CustomAnalyzer {\n  /**\n   * Polymorphic Discriminator\n   */\n  odatatype: \"#Microsoft.Azure.Search.CustomAnalyzer\";\n  /**\n   * The name of the analyzer. It must only contain letters, digits, spaces, dashes or underscores,\n   * can only start and end with alphanumeric characters, and is limited to 128 characters.\n   */\n  name: string;\n  /**\n   * The name of the tokenizer to use to divide continuous text into a sequence of tokens, such as\n   * breaking a sentence into words. KnownTokenizerNames is an enum containing known values.\n   */\n  tokenizerName: string;\n  /**\n   * A list of token filters used to filter out or modify the tokens generated by a tokenizer. For\n   * example, you can specify a lowercase filter that converts all characters to lowercase. The\n   * filters are run in the order in which they are listed.\n   */\n  tokenFilters?: string[];\n  /**\n   * A list of character filters used to prepare input text before it is processed by the\n   * tokenizer. For instance, they can replace certain characters or symbols. The filters are run\n   * in the order in which they are listed.\n   */\n  charFilters?: string[];\n}\n\n/**\n * Contains the possible cases for Analyzer.\n */\nexport type LexicalAnalyzer =\n  | CustomAnalyzer\n  | PatternAnalyzer\n  | LuceneStandardAnalyzer\n  | StopAnalyzer;\n\n/**\n * Contains the possible cases for Skill.\n */\nexport type SearchIndexerSkill =\n  | ConditionalSkill\n  | KeyPhraseExtractionSkill\n  | OcrSkill\n  | ImageAnalysisSkill\n  | LanguageDetectionSkill\n  | ShaperSkill\n  | MergeSkill\n  | EntityRecognitionSkill\n  | SentimentSkill\n  | SplitSkill\n  | CustomEntityLookupSkill\n  | TextTranslationSkill\n  | DocumentExtractionSkill\n  | WebApiSkill;\n\n/**\n * Contains the possible cases for CognitiveServicesAccount.\n */\nexport type CognitiveServicesAccount =\n  | DefaultCognitiveServicesAccount\n  | CognitiveServicesAccountKey;\n/**\n * Tokenizer that uses regex pattern matching to construct distinct tokens. This tokenizer is\n * implemented using Apache Lucene.\n */\nexport interface PatternTokenizer {\n  /**\n   * Polymorphic Discriminator\n   */\n  odatatype: \"#Microsoft.Azure.Search.PatternTokenizer\";\n  /**\n   * The name of the tokenizer. It must only contain letters, digits, spaces, dashes or\n   * underscores, can only start and end with alphanumeric characters, and is limited to 128\n   * characters.\n   */\n  name: string;\n  /**\n   * A regular expression pattern to match token separators. Default is an expression that matches\n   * one or more whitespace characters. Default value: `\\W+`.\n   */\n  pattern?: string;\n  /**\n   * Regular expression flags. Possible values include: 'CANON_EQ', 'CASE_INSENSITIVE', 'COMMENTS',\n   * 'DOTALL', 'LITERAL', 'MULTILINE', 'UNICODE_CASE', 'UNIX_LINES'\n   */\n  flags?: RegexFlags[];\n  /**\n   * The zero-based ordinal of the matching group in the regular expression pattern to extract into\n   * tokens. Use -1 if you want to use the entire pattern to split the input into tokens,\n   * irrespective of matching groups. Default is -1. Default value: -1.\n   */\n  group?: number;\n}\n/**\n * Breaks text following the Unicode Text Segmentation rules. This tokenizer is implemented using\n * Apache Lucene.\n */\nexport interface LuceneStandardTokenizer {\n  /**\n   * Polymorphic Discriminator\n   */\n  odatatype:\n    | \"#Microsoft.Azure.Search.StandardTokenizerV2\"\n    | \"#Microsoft.Azure.Search.StandardTokenizer\";\n  /**\n   * The name of the tokenizer. It must only contain letters, digits, spaces, dashes or\n   * underscores, can only start and end with alphanumeric characters, and is limited to 128\n   * characters.\n   */\n  name: string;\n  /**\n   * The maximum token length. Default is 255. Tokens longer than the maximum length are split. The\n   * maximum token length that can be used is 300 characters. Default value: 255.\n   */\n  maxTokenLength?: number;\n}\n\n/**\n * Generates n-grams of the given size(s) starting from the front or the back of an input token.\n * This token filter is implemented using Apache Lucene.\n */\nexport interface EdgeNGramTokenFilter {\n  /**\n   * Polymorphic Discriminator\n   */\n  odatatype:\n    | \"#Microsoft.Azure.Search.EdgeNGramTokenFilterV2\"\n    | \"#Microsoft.Azure.Search.EdgeNGramTokenFilter\";\n  /**\n   * The name of the token filter. It must only contain letters, digits, spaces, dashes or\n   * underscores, can only start and end with alphanumeric characters, and is limited to 128\n   * characters.\n   */\n  name: string;\n  /**\n   * The minimum n-gram length. Default is 1. Maximum is 300. Must be less than the value of\n   * maxGram. Default value: 1.\n   */\n  minGram?: number;\n  /**\n   * The maximum n-gram length. Default is 2. Maximum is 300. Default value: 2.\n   */\n  maxGram?: number;\n  /**\n   * Specifies which side of the input the n-gram should be generated from. Default is \"front\".\n   * Possible values include: 'Front', 'Back'\n   */\n  side?: EdgeNGramTokenFilterSide;\n}\n\n/**\n * Emits the entire input as a single token. This tokenizer is implemented using Apache Lucene.\n */\nexport interface KeywordTokenizer {\n  /**\n   * Polymorphic Discriminator\n   */\n  odatatype:\n    | \"#Microsoft.Azure.Search.KeywordTokenizerV2\"\n    | \"#Microsoft.Azure.Search.KeywordTokenizer\";\n  /**\n   * The name of the tokenizer. It must only contain letters, digits, spaces, dashes or\n   * underscores, can only start and end with alphanumeric characters, and is limited to 128\n   * characters.\n   */\n  name: string;\n  /**\n   * The maximum token length. Default is 256. Tokens longer than the maximum length are split. The\n   * maximum token length that can be used is 300 characters. Default value: 256.\n   */\n  maxTokenLength?: number;\n}\n\n/**\n * Contains the possible cases for Tokenizer.\n */\nexport type LexicalTokenizer =\n  | ClassicTokenizer\n  | EdgeNGramTokenizer\n  | KeywordTokenizer\n  | MicrosoftLanguageTokenizer\n  | MicrosoftLanguageStemmingTokenizer\n  | NGramTokenizer\n  | PathHierarchyTokenizer\n  | PatternTokenizer\n  | LuceneStandardTokenizer\n  | UaxUrlEmailTokenizer;\n\n/**\n * Contains the possible cases for Similarity.\n */\nexport type SimilarityAlgorithm = ClassicSimilarity | BM25Similarity;\n\n/**\n * Generates n-grams of the given size(s). This token filter is implemented using Apache Lucene.\n */\nexport interface NGramTokenFilter {\n  /**\n   * Polymorphic Discriminator\n   */\n  odatatype:\n    | \"#Microsoft.Azure.Search.NGramTokenFilterV2\"\n    | \"#Microsoft.Azure.Search.NGramTokenFilter\";\n  /**\n   * The name of the token filter. It must only contain letters, digits, spaces, dashes or\n   * underscores, can only start and end with alphanumeric characters, and is limited to 128\n   * characters.\n   */\n  name: string;\n  /**\n   * The minimum n-gram length. Default is 1. Maximum is 300. Must be less than the value of\n   * maxGram. Default value: 1.\n   */\n  minGram?: number;\n  /**\n   * The maximum n-gram length. Default is 2. Maximum is 300. Default value: 2.\n   */\n  maxGram?: number;\n}\n\n/**\n * Contains the possible cases for TokenFilter.\n */\nexport type TokenFilter =\n  | AsciiFoldingTokenFilter\n  | CjkBigramTokenFilter\n  | CommonGramTokenFilter\n  | DictionaryDecompounderTokenFilter\n  | EdgeNGramTokenFilter\n  | ElisionTokenFilter\n  | KeepTokenFilter\n  | KeywordMarkerTokenFilter\n  | LengthTokenFilter\n  | LimitTokenFilter\n  | NGramTokenFilter\n  | PatternCaptureTokenFilter\n  | PatternReplaceTokenFilter\n  | PhoneticTokenFilter\n  | ShingleTokenFilter\n  | SnowballTokenFilter\n  | StemmerTokenFilter\n  | StemmerOverrideTokenFilter\n  | StopwordsTokenFilter\n  | SynonymTokenFilter\n  | TruncateTokenFilter\n  | UniqueTokenFilter\n  | WordDelimiterTokenFilter;\n\n/**\n * Contains the possible cases for CharFilter.\n */\nexport type CharFilter = MappingCharFilter | PatternReplaceCharFilter;\n\n/**\n * Contains the possible cases for ScoringFunction.\n */\nexport type ScoringFunction =\n  | DistanceScoringFunction\n  | FreshnessScoringFunction\n  | MagnitudeScoringFunction\n  | TagScoringFunction;\n\n/**\n * Defines values for SearchFieldDataType.\n * Possible values include: 'Edm.String', 'Edm.Int32', 'Edm.Int64', 'Edm.Double', 'Edm.Boolean',\n * 'Edm.DateTimeOffset', 'Edm.GeographyPoint', 'Collection(Edm.String)',\n * 'Collection(Edm.Int32)', 'Collection(Edm.Int64)', 'Collection(Edm.Double)',\n * 'Collection(Edm.Boolean)', 'Collection(Edm.DateTimeOffset)', 'Collection(Edm.GeographyPoint)'\n * @readonly\n */\nexport type SearchFieldDataType =\n  | \"Edm.String\"\n  | \"Edm.Int32\"\n  | \"Edm.Int64\"\n  | \"Edm.Double\"\n  | \"Edm.Boolean\"\n  | \"Edm.DateTimeOffset\"\n  | \"Edm.GeographyPoint\"\n  | \"Collection(Edm.String)\"\n  | \"Collection(Edm.Int32)\"\n  | \"Collection(Edm.Int64)\"\n  | \"Collection(Edm.Double)\"\n  | \"Collection(Edm.Boolean)\"\n  | \"Collection(Edm.DateTimeOffset)\"\n  | \"Collection(Edm.GeographyPoint)\";\n\n/**\n * Defines values for ComplexDataType.\n * Possible values include: 'Edm.ComplexType', 'Collection(Edm.ComplexType)'\n * @readonly\n */\nexport type ComplexDataType = \"Edm.ComplexType\" | \"Collection(Edm.ComplexType)\";\n\n/**\n * Represents a field in an index definition, which describes the name, data type, and search\n * behavior of a field.\n */\nexport type SearchField = SimpleField | ComplexField;\n\n/**\n * Represents a field in an index definition, which describes the name, data type, and search\n * behavior of a field.\n */\nexport interface SimpleField {\n  /**\n   * The name of the field, which must be unique within the fields collection of the index or\n   * parent field.\n   */\n  name: string;\n  /**\n   * The data type of the field. Possible values include: 'Edm.String', 'Edm.Int32', 'Edm.Int64',\n   * 'Edm.Double', 'Edm.Boolean', 'Edm.DateTimeOffset', 'Edm.GeographyPoint'\n   * 'Collection(Edm.String)', 'Collection(Edm.Int32)', 'Collection(Edm.Int64)',\n   * 'Collection(Edm.Double)', 'Collection(Edm.Boolean)', 'Collection(Edm.DateTimeOffset)',\n   * 'Collection(Edm.GeographyPoint)'\n   */\n  type: SearchFieldDataType;\n  /**\n   * A value indicating whether the field uniquely identifies documents in the index. Exactly one\n   * top-level field in each index must be chosen as the key field and it must be of type\n   * Edm.String. Key fields can be used to look up documents directly and update or delete specific\n   * documents. Default is false.\n   */\n  key?: boolean;\n  /**\n   * A value indicating whether the field can be returned in a search result. You can enable this\n   * option if you want to use a field (for example, margin) as a filter, sorting, or scoring\n   * mechanism but do not want the field to be visible to the end user. This property must be false\n   * for key fields. This property can be changed on existing fields.\n   * Disabling this property does not cause any increase in index storage requirements.\n   * Default is false.\n   */\n  hidden?: boolean;\n  /**\n   * A value indicating whether the field is full-text searchable. This means it will undergo\n   * analysis such as word-breaking during indexing. If you set a searchable field to a value like\n   * \"sunny day\", internally it will be split into the individual tokens \"sunny\" and \"day\". This\n   * enables full-text searches for these terms. This property must be false for simple\n   * fields of other non-string data types.\n   * Note: searchable fields consume extra space in your index since Azure Cognitive Search will store an\n   * additional tokenized version of the field value for full-text searches.\n   * Defaults to false for simple fields.\n   */\n  searchable?: boolean;\n  /**\n   * A value indicating whether to enable the field to be referenced in $filter queries. Filterable\n   * differs from searchable in how strings are handled. Fields of type Edm.String or\n   * Collection(Edm.String) that are filterable do not undergo word-breaking, so comparisons are\n   * for exact matches only. For example, if you set such a field f to \"sunny day\", $filter=f eq\n   * 'sunny' will find no matches, but $filter=f eq 'sunny day' will.\n   * Default is false.\n   */\n  filterable?: boolean;\n  /**\n   * A value indicating whether to enable the field to be referenced in $orderby expressions. By\n   * default Azure Cognitive Search sorts results by score, but in many experiences users will want\n   * to sort by fields in the documents. A simple field can be sortable only if it is single-valued\n   * (it has a single value in the scope of the parent document). Simple collection fields cannot\n   * be sortable, since they are multi-valued. Simple sub-fields of complex collections are also\n   * multi-valued, and therefore cannot be sortable. This is true whether it's an immediate parent\n   * field, or an ancestor field, that's the complex collection. The default for sortable is false.\n   */\n  sortable?: boolean;\n  /**\n   * A value indicating whether to enable the field to be referenced in facet queries. Typically\n   * used in a presentation of search results that includes hit count by category (for example,\n   * search for digital cameras and see hits by brand, by megapixels, by price, and so on).\n   * Fields of type Edm.GeographyPoint or Collection(Edm.GeographyPoint) cannot be facetable.\n   * Default is false for all other simple fields.\n   */\n  facetable?: boolean;\n  /**\n   * The name of the language analyzer to use for the field. This option can be used only with\n   * searchable fields and it can't be set together with either searchAnalyzer or indexAnalyzer.\n   * Once the analyzer is chosen, it cannot be changed for the field.\n   * KnownAnalyzerNames is an enum containing known values.\n   */\n  analyzerName?: LexicalAnalyzerName;\n  /**\n   * The name of the analyzer used at search time for the field. This option can be used only with\n   * searchable fields. It must be set together with indexAnalyzer and it cannot be set together\n   * with the analyzer option. This analyzer can be updated on an existing field.\n   * KnownAnalyzerNames is an enum containing known values.\n   */\n  searchAnalyzerName?: LexicalAnalyzerName;\n  /**\n   * The name of the analyzer used at indexing time for the field. This option can be used only\n   * with searchable fields. It must be set together with searchAnalyzer and it cannot be set\n   * together with the analyzer option. Once the analyzer is chosen, it cannot be changed for the\n   * field. KnownAnalyzerNames is an enum containing known values.\n   */\n  indexAnalyzerName?: LexicalAnalyzerName;\n  /**\n   * A list of the names of synonym maps to associate with this field. This option can be used only\n   * with searchable fields. Currently only one synonym map per field is supported. Assigning a\n   * synonym map to a field ensures that query terms targeting that field are expanded at\n   * query-time using the rules in the synonym map. This attribute can be changed on existing\n   * fields.\n   */\n  synonymMapNames?: string[];\n}\n\nexport function isComplexField(field: SearchField): field is ComplexField {\n  return field.type === \"Edm.ComplexType\" || field.type === \"Collection(Edm.ComplexType)\";\n}\n\n/**\n * Represents a field in an index definition, which describes the name, data type, and search\n * behavior of a field.\n */\nexport interface ComplexField {\n  /**\n   * The name of the field, which must be unique within the fields collection of the index or\n   * parent field.\n   */\n  name: string;\n  /**\n   * The data type of the field.\n   * Possible values include: 'Edm.ComplexType','Collection(Edm.ComplexType)'\n   */\n  type: ComplexDataType;\n  /**\n   * A list of sub-fields.\n   */\n  fields: SearchField[];\n}\n\n/**\n * Represents a synonym map definition.\n */\nexport interface SynonymMap {\n  /**\n   * The name of the synonym map.\n   */\n  name: string;\n  /**\n   * An array of synonym rules in the specified synonym map format.\n   */\n  synonyms: string[];\n  /**\n   * A description of an encryption key that you create in Azure Key Vault. This key is used to\n   * provide an additional level of encryption-at-rest for your data when you want full assurance\n   * that no one, not even Microsoft, can decrypt your data in Azure Cognitive Search. Once you\n   * have encrypted your data, it will always remain encrypted. Azure Cognitive Search will ignore\n   * attempts to set this property to null. You can change this property as needed if you want to\n   * rotate your encryption key; Your data will be unaffected. Encryption with customer-managed\n   * keys is not available for free search services, and is only available for paid services\n   * created on or after January 1, 2019.\n   */\n  encryptionKey?: SearchResourceEncryptionKey | null;\n  /**\n   * The ETag of the synonym map.\n   */\n  etag?: string;\n}\n\n/**\n * An iterator for listing the indexes that exist in the Search service. Will make requests\n * as needed during iteration. Use .byPage() to make one request to the server\n * per iteration.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type IndexIterator = PagedAsyncIterableIterator<SearchIndex, SearchIndex[], {}>;\n\n/**\n * An iterator for listing the indexes that exist in the Search service. Will make requests\n * as needed during iteration. Use .byPage() to make one request to the server\n * per iteration.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type IndexNameIterator = PagedAsyncIterableIterator<string, string[], {}>;\n\n/**\n * Represents a search index definition, which describes the fields and search behavior of an\n * index.\n */\nexport interface SearchIndex {\n  /**\n   * The name of the index.\n   */\n  name: string;\n  /**\n   * The fields of the index.\n   */\n  fields: SearchField[];\n  /**\n   * The scoring profiles for the index.\n   */\n  scoringProfiles?: ScoringProfile[];\n  /**\n   * The name of the scoring profile to use if none is specified in the query. If this property is\n   * not set and no scoring profile is specified in the query, then default scoring (tf-idf) will\n   * be used.\n   */\n  defaultScoringProfile?: string;\n  /**\n   * Options to control Cross-Origin Resource Sharing (CORS) for the index.\n   */\n  corsOptions?: CorsOptions | null;\n  /**\n   * The suggesters for the index.\n   */\n  suggesters?: SearchSuggester[];\n  /**\n   * The analyzers for the index.\n   */\n  analyzers?: LexicalAnalyzer[];\n  /**\n   * The tokenizers for the index.\n   */\n  tokenizers?: LexicalTokenizer[];\n  /**\n   * The token filters for the index.\n   */\n  tokenFilters?: TokenFilter[];\n  /**\n   * The character filters for the index.\n   */\n  charFilters?: CharFilter[];\n  /**\n   * A description of an encryption key that you create in Azure Key Vault. This key is used to\n   * provide an additional level of encryption-at-rest for your data when you want full assurance\n   * that no one, not even Microsoft, can decrypt your data in Azure Cognitive Search. Once you\n   * have encrypted your data, it will always remain encrypted. Azure Cognitive Search will ignore\n   * attempts to set this property to null. You can change this property as needed if you want to\n   * rotate your encryption key; Your data will be unaffected. Encryption with customer-managed\n   * keys is not available for free search services, and is only available for paid services\n   * created on or after January 1, 2019.\n   */\n  encryptionKey?: SearchResourceEncryptionKey | null;\n  /**\n   * The type of similarity algorithm to be used when scoring and ranking the documents matching a\n   * search query. The similarity algorithm can only be defined at index creation time and cannot\n   * be modified on existing indexes. If null, the ClassicSimilarity algorithm is used.\n   */\n  similarity?: SimilarityAlgorithm;\n  /**\n   * The ETag of the index.\n   */\n  etag?: string;\n}\n\n/**\n * Represents an indexer.\n */\nexport interface SearchIndexer {\n  /**\n   * The name of the indexer.\n   */\n  name: string;\n  /**\n   * The description of the indexer.\n   */\n  description?: string;\n  /**\n   * The name of the datasource from which this indexer reads data.\n   */\n  dataSourceName: string;\n  /**\n   * The name of the skillset executing with this indexer.\n   */\n  skillsetName?: string;\n  /**\n   * The name of the index to which this indexer writes data.\n   */\n  targetIndexName: string;\n  /**\n   * The schedule for this indexer.\n   */\n  schedule?: IndexingSchedule | null;\n  /**\n   * Parameters for indexer execution.\n   */\n  parameters?: IndexingParameters | null;\n  /**\n   * Defines mappings between fields in the data source and corresponding target fields in the\n   * index.\n   */\n  fieldMappings?: FieldMapping[];\n  /**\n   * Output field mappings are applied after enrichment and immediately before indexing.\n   */\n  outputFieldMappings?: FieldMapping[];\n  /**\n   * A value indicating whether the indexer is disabled. Default is false. Default value: false.\n   */\n  isDisabled?: boolean | null;\n  /**\n   * The ETag of the indexer.\n   */\n  etag?: string;\n  /**\n   * A description of an encryption key that you create in Azure Key Vault. This key is used to\n   * provide an additional level of encryption-at-rest for your indexer definition (as well as\n   * indexer execution status) when you want full assurance that no one, not even Microsoft, can\n   * decrypt them in Azure Cognitive Search. Once you have encrypted your indexer definition, it\n   * will always remain encrypted. Azure Cognitive Search will ignore attempts to set this property\n   * to null. You can change this property as needed if you want to rotate your encryption key;\n   * Your indexer definition (and indexer execution status) will be unaffected. Encryption with\n   * customer-managed keys is not available for free search services, and is only available for\n   * paid services created on or after January 1, 2019.\n   */\n  encryptionKey?: SearchResourceEncryptionKey | null;\n}\n\n/**\n * A customer-managed encryption key in Azure Key Vault. Keys that you create and manage can be\n * used to encrypt or decrypt data-at-rest in Azure Cognitive Search, such as indexes and synonym\n * maps.\n */\nexport interface SearchResourceEncryptionKey {\n  /**\n   * The name of your Azure Key Vault key to be used to encrypt your data at rest.\n   */\n  keyName: string;\n  /**\n   * The version of your Azure Key Vault key to be used to encrypt your data at rest.\n   */\n  keyVersion: string;\n  /**\n   * The URI of your Azure Key Vault, also referred to as DNS name, that contains the key to be\n   * used to encrypt your data at rest. An example URI might be\n   * https://my-keyvault-name.vault.azure.net.\n   */\n  vaultUrl: string;\n  /**\n   * An AAD Application ID that was granted the required access permissions to the Azure Key Vault\n   * that is to be used when encrypting your data at rest. The Application ID should not be\n   * confused with the Object ID for your AAD Application.\n   */\n  applicationId?: string;\n  /**\n   * The authentication key of the specified AAD application.\n   */\n  applicationSecret?: string;\n}\n\n/**\n * A list of skills.\n */\nexport interface SearchIndexerSkillset {\n  /**\n   * The name of the skillset.\n   */\n  name: string;\n  /**\n   * The description of the skillset.\n   */\n  description?: string;\n  /**\n   * A list of skills in the skillset.\n   */\n  skills: SearchIndexerSkill[];\n  /**\n   * Details about cognitive services to be used when running skills.\n   */\n  cognitiveServicesAccount?: CognitiveServicesAccount;\n  /**\n   * Definition of additional projections to azure blob, table, or files, of enriched data.\n   */\n  knowledgeStore?: SearchIndexerKnowledgeStore;\n  /**\n   * The ETag of the skillset.\n   */\n  etag?: string;\n  /**\n   * A description of an encryption key that you create in Azure Key Vault. This key is used to\n   * provide an additional level of encryption-at-rest for your skillset definition when you want\n   * full assurance that no one, not even Microsoft, can decrypt your skillset definition in Azure\n   * Cognitive Search. Once you have encrypted your skillset definition, it will always remain\n   * encrypted. Azure Cognitive Search will ignore attempts to set this property to null. You can\n   * change this property as needed if you want to rotate your encryption key; Your skillset\n   * definition will be unaffected. Encryption with customer-managed keys is not available for free\n   * search services, and is only available for paid services created on or after January 1, 2019.\n   */\n  encryptionKey?: SearchResourceEncryptionKey | null;\n}\n\n/**\n * Defines parameters for a search index that influence scoring in search queries.\n */\nexport interface ScoringProfile {\n  /**\n   * The name of the scoring profile.\n   */\n  name: string;\n  /**\n   * Parameters that boost scoring based on text matches in certain index fields.\n   */\n  textWeights?: TextWeights;\n  /**\n   * The collection of functions that influence the scoring of documents.\n   */\n  functions?: ScoringFunction[];\n  /**\n   * A value indicating how the results of individual scoring functions should be combined.\n   * Defaults to \"Sum\". Ignored if there are no scoring functions. Possible values include: 'sum',\n   * 'average', 'minimum', 'maximum', 'firstMatching'\n   */\n  functionAggregation?: ScoringFunctionAggregation;\n}\n\n/**\n * Defines values for TokenizerName.\n * @readonly\n */\nexport enum KnownTokenizerNames {\n  /**\n   * Grammar-based tokenizer that is suitable for processing most European-language documents. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicTokenizer.html\n   */\n  Classic = \"classic\",\n  /**\n   * Tokenizes the input from an edge into n-grams of the given size(s). See\n   * https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.html\n   */\n  EdgeNGram = \"edgeNGram\",\n  /**\n   * Emits the entire input as a single token. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/KeywordTokenizer.html\n   */\n  Keyword = \"keyword_v2\",\n  /**\n   * Divides text at non-letters. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LetterTokenizer.html\n   */\n  Letter = \"letter\",\n  /**\n   * Divides text at non-letters and converts them to lower case. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LowerCaseTokenizer.html\n   */\n  Lowercase = \"lowercase\",\n  /**\n   * Divides text using language-specific rules.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  MicrosoftLanguageTokenizer = \"microsoft_language_tokenizer\",\n  /**\n   * Divides text using language-specific rules and reduces words to their base forms.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  MicrosoftLanguageStemmingTokenizer = \"microsoft_language_stemming_tokenizer\",\n  /**\n   * Tokenizes the input into n-grams of the given size(s). See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenizer.html\n   */\n  NGram = \"nGram\",\n  /**\n   * Tokenizer for path-like hierarchies. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/path/PathHierarchyTokenizer.html\n   */\n  PathHierarchy = \"path_hierarchy_v2\",\n  /**\n   * Tokenizer that uses regex pattern matching to construct distinct tokens. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/pattern/PatternTokenizer.html\n   */\n  Pattern = \"pattern\",\n  /**\n   * Standard Lucene analyzer; Composed of the standard tokenizer, lowercase filter and stop\n   * filter. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/StandardTokenizer.html\n   */\n  Standard = \"standard_v2\",\n  /**\n   * Tokenizes urls and emails as one token. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.html\n   */\n  UaxUrlEmail = \"uax_url_email\",\n  /**\n   * Divides text at whitespace. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/WhitespaceTokenizer.html\n   */\n  Whitespace = \"whitespace\"\n}\n\n/**\n * Defines values for TokenFilterName.\n * @readonly\n */\nexport enum KnownTokenFilterNames {\n  /**\n   * A token filter that applies the Arabic normalizer to normalize the orthography. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.html\n   */\n  ArabicNormalization = \"arabic_normalization\",\n  /**\n   * Strips all characters after an apostrophe (including the apostrophe itself). See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/tr/ApostropheFilter.html\n   */\n  Apostrophe = \"apostrophe\",\n  /**\n   * Converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127\n   * ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if such\n   * equivalents exist. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html\n   */\n  AsciiFolding = \"asciifolding\",\n  /**\n   * Forms bigrams of CJK terms that are generated from StandardTokenizer. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKBigramFilter.html\n   */\n  CjkBigram = \"cjk_bigram\",\n  /**\n   * Normalizes CJK width differences. Folds fullwidth ASCII variants into the equivalent basic\n   * Latin, and half-width Katakana variants into the equivalent Kana. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKWidthFilter.html\n   */\n  CjkWidth = \"cjk_width\",\n  /**\n   * Removes English possessives, and dots from acronyms. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicFilter.html\n   */\n  Classic = \"classic\",\n  /**\n   * Construct bigrams for frequently occurring terms while indexing. Single terms are still\n   * indexed too, with bigrams overlaid. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/commongrams/CommonGramsFilter.html\n   */\n  CommonGram = \"common_grams\",\n  /**\n   * Generates n-grams of the given size(s) starting from the front or the back of an input token.\n   * See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.html\n   */\n  EdgeNGram = \"edgeNGram_v2\",\n  /**\n   * Removes elisions. For example, \"l'avion\" (the plane) will be converted to \"avion\" (plane). See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/util/ElisionFilter.html\n   */\n  Elision = \"elision\",\n  /**\n   * Normalizes German characters according to the heuristics of the German2 snowball algorithm.\n   * See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/de/GermanNormalizationFilter.html\n   */\n  GermanNormalization = \"german_normalization\",\n  /**\n   * Normalizes text in Hindi to remove some differences in spelling variations. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/hi/HindiNormalizationFilter.html\n   */\n  HindiNormalization = \"hindi_normalization\",\n  /**\n   * Normalizes the Unicode representation of text in Indian languages. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/in/IndicNormalizationFilter.html\n   */\n  IndicNormalization = \"indic_normalization\",\n  /**\n   * Emits each incoming token twice, once as keyword and once as non-keyword. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.html\n   */\n  KeywordRepeat = \"keyword_repeat\",\n  /**\n   * A high-performance kstem filter for English. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/en/KStemFilter.html\n   */\n  KStem = \"kstem\",\n  /**\n   * Removes words that are too long or too short. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LengthFilter.html\n   */\n  Length = \"length\",\n  /**\n   * Limits the number of tokens while indexing. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.html\n   */\n  Limit = \"limit\",\n  /**\n   * Normalizes token text to lower case. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LowerCaseFilter.htm\n   */\n  Lowercase = \"lowercase\",\n  /**\n   * Generates n-grams of the given size(s). See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenFilter.html\n   */\n  NGram = \"nGram_v2\",\n  /**\n   * Applies normalization for Persian. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/fa/PersianNormalizationFilter.html\n   */\n  PersianNormalization = \"persian_normalization\",\n  /**\n   * Create tokens for phonetic matches. See\n   * https://lucene.apache.org/core/4_10_3/analyzers-phonetic/org/apache/lucene/analysis/phonetic/package-tree.html\n   */\n  Phonetic = \"phonetic\",\n  /**\n   * Uses the Porter stemming algorithm to transform the token stream. See\n   * http://tartarus.org/~martin/PorterStemmer\n   */\n  PorterStem = \"porter_stem\",\n  /**\n   * Reverses the token string. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/reverse/ReverseStringFilter.html\n   */\n  Reverse = \"reverse\",\n  /**\n   * Normalizes use of the interchangeable Scandinavian characters. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.html\n   */\n  ScandinavianNormalization = \"scandinavian_normalization\",\n  /**\n   * Folds Scandinavian characters åÅäæÄÆ-&gt;a and öÖøØ-&gt;o. It also discriminates against use\n   * of double vowels aa, ae, ao, oe and oo, leaving just the first one. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.html\n   */\n  ScandinavianFoldingNormalization = \"scandinavian_folding\",\n  /**\n   * Creates combinations of tokens as a single token. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/shingle/ShingleFilter.html\n   */\n  Shingle = \"shingle\",\n  /**\n   * A filter that stems words using a Snowball-generated stemmer. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/snowball/SnowballFilter.html\n   */\n  Snowball = \"snowball\",\n  /**\n   * Normalizes the Unicode representation of Sorani text. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.html\n   */\n  SoraniNormalization = \"sorani_normalization\",\n  /**\n   * Language specific stemming filter. See\n   * https://docs.microsoft.com/rest/api/searchservice/Custom-analyzers-in-Azure-Search#TokenFilters\n   */\n  Stemmer = \"stemmer\",\n  /**\n   * Removes stop words from a token stream. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/StopFilter.html\n   */\n  Stopwords = \"stopwords\",\n  /**\n   * Trims leading and trailing whitespace from tokens. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TrimFilter.html\n   */\n  Trim = \"trim\",\n  /**\n   * Truncates the terms to a specific length. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.html\n   */\n  Truncate = \"truncate\",\n  /**\n   * Filters out tokens with same text as the previous token. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.html\n   */\n  Unique = \"unique\",\n  /**\n   * Normalizes token text to upper case. See\n   * http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/UpperCaseFilter.html\n   */\n  Uppercase = \"uppercase\",\n  /**\n   * Splits words into subwords and performs optional transformations on subword groups.\n   */\n  WordDelimiter = \"word_delimiter\"\n}\n\n/**\n * Defines values for CharFilterName.\n * @readonly\n */\nexport enum KnownCharFilterNames {\n  /**\n   * A character filter that attempts to strip out HTML constructs. See\n   * https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.html\n   */\n  HtmlStrip = \"html_strip\"\n}\n\n/**\n * Defines values for AnalyzerName.\n * See https://docs.microsoft.com/rest/api/searchservice/Language-support\n * @readonly\n */\nexport enum KnownAnalyzerNames {\n  /**\n   * Arabic\n   */\n  ArMicrosoft = \"ar.microsoft\",\n  /**\n   * Arabic\n   */\n  ArLucene = \"ar.lucene\",\n  /**\n   * Armenian\n   */\n  HyLucene = \"hy.lucene\",\n  /**\n   * Bangla\n   */\n  BnMicrosoft = \"bn.microsoft\",\n  /**\n   * Basque\n   */\n  EuLucene = \"eu.lucene\",\n  /**\n   * Bulgarian\n   */\n  BgMicrosoft = \"bg.microsoft\",\n  /**\n   * Bulgarian\n   */\n  BgLucene = \"bg.lucene\",\n  /**\n   * Catalan\n   */\n  CaMicrosoft = \"ca.microsoft\",\n  /**\n   * Catalan\n   */\n  CaLucene = \"ca.lucene\",\n  /**\n   * Chinese Simplified\n   */\n  ZhHansMicrosoft = \"zh-Hans.microsoft\",\n  /**\n   * Chinese Simplified\n   */\n  ZhHansLucene = \"zh-Hans.lucene\",\n  /**\n   * Chinese Traditional\n   */\n  ZhHantMicrosoft = \"zh-Hant.microsoft\",\n  /**\n   * Chinese Traditional\n   */\n  ZhHantLucene = \"zh-Hant.lucene\",\n  /**\n   * Croatian\n   */\n  HrMicrosoft = \"hr.microsoft\",\n  /**\n   * Czech\n   */\n  CsMicrosoft = \"cs.microsoft\",\n  /**\n   * Czech\n   */\n  CsLucene = \"cs.lucene\",\n  /**\n   * Danish\n   */\n  DaMicrosoft = \"da.microsoft\",\n  /**\n   * Danish\n   */\n  DaLucene = \"da.lucene\",\n  /**\n   * Dutch\n   */\n  NlMicrosoft = \"nl.microsoft\",\n  /**\n   * Dutch\n   */\n  NlLucene = \"nl.lucene\",\n  /**\n   * English\n   */\n  EnMicrosoft = \"en.microsoft\",\n  /**\n   * English\n   */\n  EnLucene = \"en.lucene\",\n  /**\n   * Estonian\n   */\n  EtMicrosoft = \"et.microsoft\",\n  /**\n   * Finnish\n   */\n  FiMicrosoft = \"fi.microsoft\",\n  /**\n   * Finnish\n   */\n  FiLucene = \"fi.lucene\",\n  /**\n   * French\n   */\n  FrMicrosoft = \"fr.microsoft\",\n  /**\n   * French\n   */\n  FrLucene = \"fr.lucene\",\n  /**\n   * Galician\n   */\n  GlLucene = \"gl.lucene\",\n  /**\n   * German\n   */\n  DeMicrosoft = \"de.microsoft\",\n  /**\n   * German\n   */\n  DeLucene = \"de.lucene\",\n  /**\n   * Greek\n   */\n  ElMicrosoft = \"el.microsoft\",\n  /**\n   * Greek\n   */\n  ElLucene = \"el.lucene\",\n  /**\n   * Gujarati\n   */\n  GuMicrosoft = \"gu.microsoft\",\n  /**\n   * Hebrew\n   */\n  HeMicrosoft = \"he.microsoft\",\n  /**\n   * Hindi\n   */\n  HiMicrosoft = \"hi.microsoft\",\n  /**\n   * Hindi\n   */\n  HiLucene = \"hi.lucene\",\n  /**\n   * Hungarian\n   */\n  HuMicrosoft = \"hu.microsoft\",\n  /**\n   * Hungarian\n   */\n  HuLucene = \"hu.lucene\",\n  /**\n   * Icelandic\n   */\n  IsMicrosoft = \"is.microsoft\",\n  /**\n   * Indonesian (Bahasa)\n   */\n  IdMicrosoft = \"id.microsoft\",\n  /**\n   * Indonesian (Bahasa)\n   */\n  IdLucene = \"id.lucene\",\n  /**\n   * Irish\n   */\n  GaLucene = \"ga.lucene\",\n  /**\n   * Italian\n   */\n  ItMicrosoft = \"it.microsoft\",\n  /**\n   * Italian\n   */\n  ItLucene = \"it.lucene\",\n  /**\n   * Japanese\n   */\n  JaMicrosoft = \"ja.microsoft\",\n  /**\n   * Japanese\n   */\n  JaLucene = \"ja.lucene\",\n  /**\n   * Kannada\n   */\n  KnMicrosoft = \"kn.microsoft\",\n  /**\n   * Korean\n   */\n  KoMicrosoft = \"ko.microsoft\",\n  /**\n   * Korean\n   */\n  KoLucene = \"ko.lucene\",\n  /**\n   * Latvian\n   */\n  LvMicrosoft = \"lv.microsoft\",\n  /**\n   * Latvian\n   */\n  LvLucene = \"lv.lucene\",\n  /**\n   * Lithuanian\n   */\n  LtMicrosoft = \"lt.microsoft\",\n  /**\n   * Malayalam\n   */\n  MlMicrosoft = \"ml.microsoft\",\n  /**\n   * Malay (Latin)\n   */\n  MsMicrosoft = \"ms.microsoft\",\n  /**\n   * Marathi\n   */\n  MrMicrosoft = \"mr.microsoft\",\n  /**\n   * Norwegian\n   */\n  NbMicrosoft = \"nb.microsoft\",\n  /**\n   * Norwegian\n   */\n  NoLucene = \"no.lucene\",\n  /**\n   * Persian\n   */\n  FaLucene = \"fa.lucene\",\n  /**\n   * Polish\n   */\n  PlMicrosoft = \"pl.microsoft\",\n  /**\n   * Polish\n   */\n  PlLucene = \"pl.lucene\",\n  /**\n   * Portuguese (Brazil)\n   */\n  PtBRMicrosoft = \"pt-BR.microsoft\",\n  /**\n   * Portuguese (Brazil)\n   */\n  PtBRLucene = \"pt-BR.lucene\",\n  /**\n   * Portuguese (Portugal)\n   */\n  PtPTMicrosoft = \"pt-PT.microsoft\",\n  /**\n   * Portuguese (Portugal)\n   */\n  PtPTLucene = \"pt-PT.lucene\",\n  /**\n   * Punjabi\n   */ PaMicrosoft = \"pa.microsoft\",\n  /**\n   * Romanian\n   */\n  RoMicrosoft = \"ro.microsoft\",\n  /**\n   * Romanian\n   */\n  RoLucene = \"ro.lucene\",\n  /**\n   * Russian\n   */\n  RuMicrosoft = \"ru.microsoft\",\n  /**\n   * Russian\n   */\n  RuLucene = \"ru.lucene\",\n  /**\n   * Serbian (Cyrillic)\n   */\n  SrCyrillicMicrosoft = \"sr-cyrillic.microsoft\",\n  /**\n   * Serbian (Latin)\n   */\n  SrLatinMicrosoft = \"sr-latin.microsoft\",\n  /**\n   * Slovak\n   */\n  SkMicrosoft = \"sk.microsoft\",\n  /**\n   * Slovenian\n   */\n  SlMicrosoft = \"sl.microsoft\",\n  /**\n   * Spanish\n   */\n  EsMicrosoft = \"es.microsoft\",\n  /**\n   * Spanish\n   */\n  EsLucene = \"es.lucene\",\n  /**\n   * Swedish\n   */\n  SvMicrosoft = \"sv.microsoft\",\n  /**\n   * Swedish\n   */\n  SvLucene = \"sv.lucene\",\n  /**\n   * Tamil\n   */\n  TaMicrosoft = \"ta.microsoft\",\n  /**\n   * Telugu\n   */\n  TeMicrosoft = \"te.microsoft\",\n  /**\n   * Thai\n   */\n  ThMicrosoft = \"th.microsoft\",\n  /**\n   * Thai\n   */\n  ThLucene = \"th.lucene\",\n  /**\n   * Turkish\n   */\n  TrMicrosoft = \"tr.microsoft\",\n  /**\n   * Turkish\n   */\n  TrLucene = \"tr.lucene\",\n  /**\n   * Ukrainian\n   */\n  UkMicrosoft = \"uk.microsoft\",\n  /**\n   * Urdu\n   */\n  UrMicrosoft = \"ur.microsoft\",\n  /**\n   * Vietnamese\n   */\n  ViMicrosoft = \"vi.microsoft\",\n  /**\n   * See: https://lucene.apache.org/core/6_6_1/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html\n   */\n  StandardLucene = \"standard.lucene\",\n  /**\n   * See https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html\n   */\n  StandardAsciiFoldingLucene = \"standardasciifolding.lucene\",\n  /**\n   * Treats the entire content of a field as a single token. This is useful for data like zip codes, ids, and some product names.\n   */\n  Keyword = \"keyword\",\n  /**\n   * Flexibly separates text into terms via a regular expression pattern.\n   */\n  Pattern = \"pattern\",\n  /**\n   * Divides text at non-letters and converts them to lower case.\n   */\n  Simple = \"simple\",\n  /**\n   * Divides text at non-letters; Applies the lowercase and stopword token filters.\n   */\n  Stop = \"stop\",\n  /**\n   * An analyzer that uses the whitespace tokenizer.\n   */\n  Whitespace = \"whitespace\"\n}\n\n/**\n * Contains the possible cases for DataChangeDetectionPolicy.\n */\nexport type DataChangeDetectionPolicy =\n  | HighWaterMarkChangeDetectionPolicy\n  | SqlIntegratedChangeTrackingPolicy;\n\n/**\n * Contains the possible cases for DataDeletionDetectionPolicy.\n */\nexport type DataDeletionDetectionPolicy = SoftDeleteColumnDeletionDetectionPolicy;\n\n/**\n * Represents a datasource definition, which can be used to configure an indexer.\n */\nexport interface SearchIndexerDataSourceConnection {\n  /**\n   * The name of the datasource.\n   */\n  name: string;\n  /**\n   * The description of the datasource.\n   */\n  description?: string;\n  /**\n   * The type of the datasource. Possible values include: 'AzureSql', 'CosmosDb', 'AzureBlob',\n   * 'AzureTable', 'MySql', 'AdlsGen2'\n   */\n  type: SearchIndexerDataSourceType;\n  /**\n   * The connection string for the datasource.\n   */\n  connectionString?: string;\n  /**\n   * The data container for the datasource.\n   */\n  container: SearchIndexerDataContainer;\n  /**\n   * The data change detection policy for the datasource.\n   */\n  dataChangeDetectionPolicy?: DataChangeDetectionPolicy | null;\n  /**\n   * The data deletion detection policy for the datasource.\n   */\n  dataDeletionDetectionPolicy?: DataDeletionDetectionPolicy | null;\n  /**\n   * The ETag of the DataSource.\n   */\n  etag?: string;\n  /**\n   * A description of an encryption key that you create in Azure Key Vault. This key is used to\n   * provide an additional level of encryption-at-rest for your datasource definition when you want\n   * full assurance that no one, not even Microsoft, can decrypt your data source definition in\n   * Azure Cognitive Search. Once you have encrypted your data source definition, it will always\n   * remain encrypted. Azure Cognitive Search will ignore attempts to set this property to null.\n   * You can change this property as needed if you want to rotate your encryption key; Your\n   * datasource definition will be unaffected. Encryption with customer-managed keys is not\n   * available for free search services, and is only available for paid services created on or\n   * after January 1, 2019.\n   */\n  encryptionKey?: SearchResourceEncryptionKey | null;\n}\n// END manually modified generated interfaces\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-http\";\nimport {\n  LexicalAnalyzerUnion,\n  CognitiveServicesAccountKey,\n  CognitiveServicesAccountUnion,\n  DefaultCognitiveServicesAccount,\n  SearchField as GeneratedSearchField,\n  SearchIndex as GeneratedSearchIndex,\n  RegexFlags,\n  SearchIndexer as GeneratedSearchIndexer,\n  SearchIndexerSkillset as GeneratedSearchIndexerSkillset,\n  SearchIndexerSkillUnion,\n  LexicalTokenizerUnion,\n  SynonymMap as GeneratedSynonymMap,\n  SearchIndexerDataSource as GeneratedSearchIndexerDataSourceConnection,\n  DataChangeDetectionPolicyUnion,\n  HighWaterMarkChangeDetectionPolicy,\n  SqlIntegratedChangeTrackingPolicy,\n  DataDeletionDetectionPolicyUnion,\n  SoftDeleteColumnDeletionDetectionPolicy,\n  LexicalAnalyzerName,\n  SimilarityUnion,\n  BM25Similarity,\n  ClassicSimilarity,\n  TokenFilterUnion,\n  SearchResourceEncryptionKey as GeneratedSearchResourceEncryptionKey,\n  ConditionalSkill,\n  KeyPhraseExtractionSkill,\n  OcrSkill,\n  ImageAnalysisSkill,\n  LanguageDetectionSkill,\n  ShaperSkill,\n  MergeSkill,\n  EntityRecognitionSkill,\n  SentimentSkill,\n  DocumentExtractionSkill,\n  CustomEntityLookupSkill,\n  SplitSkill,\n  TextTranslationSkill,\n  WebApiSkill,\n  LuceneStandardAnalyzer,\n  StopAnalyzer,\n  PatternAnalyzer as GeneratedPatternAnalyzer,\n  CustomAnalyzer,\n  PatternTokenizer\n} from \"./generated/service/models\";\nimport {\n  LexicalAnalyzer,\n  CharFilter,\n  CognitiveServicesAccount,\n  SearchField,\n  SearchIndex,\n  isComplexField,\n  ScoringProfile,\n  SimpleField,\n  SearchIndexerSkill,\n  SearchIndexerSkillset,\n  TokenFilter,\n  LexicalTokenizer,\n  SynonymMap,\n  SearchIndexer,\n  SearchIndexerDataSourceConnection,\n  DataChangeDetectionPolicy,\n  DataDeletionDetectionPolicy,\n  SimilarityAlgorithm,\n  SearchResourceEncryptionKey,\n  PatternAnalyzer\n} from \"./serviceModels\";\nimport { SuggestDocumentsResult, SuggestResult, SearchResult } from \"./indexModels\";\nimport {\n  SuggestDocumentsResult as GeneratedSuggestDocumentsResult,\n  SearchResult as GeneratedSearchResult\n} from \"./generated/data/models\";\n\nexport function convertSkillsToPublic(skills: SearchIndexerSkillUnion[]): SearchIndexerSkill[] {\n  if (!skills) {\n    return skills;\n  }\n\n  const result: SearchIndexerSkill[] = [];\n  for (const skill of skills) {\n    switch (skill.odatatype) {\n      case \"#Microsoft.Skills.Util.ConditionalSkill\":\n        result.push(skill as ConditionalSkill);\n        break;\n      case \"#Microsoft.Skills.Text.KeyPhraseExtractionSkill\":\n        result.push(skill as KeyPhraseExtractionSkill);\n        break;\n      case \"#Microsoft.Skills.Vision.OcrSkill\":\n        result.push(skill as OcrSkill);\n        break;\n      case \"#Microsoft.Skills.Vision.ImageAnalysisSkill\":\n        result.push(skill as ImageAnalysisSkill);\n        break;\n      case \"#Microsoft.Skills.Text.LanguageDetectionSkill\":\n        result.push(skill as LanguageDetectionSkill);\n        break;\n      case \"#Microsoft.Skills.Util.ShaperSkill\":\n        result.push(skill as ShaperSkill);\n        break;\n      case \"#Microsoft.Skills.Text.MergeSkill\":\n        result.push(skill as MergeSkill);\n        break;\n      case \"#Microsoft.Skills.Text.EntityRecognitionSkill\":\n        result.push(skill as EntityRecognitionSkill);\n        break;\n      case \"#Microsoft.Skills.Text.SentimentSkill\":\n        result.push(skill as SentimentSkill);\n        break;\n      case \"#Microsoft.Skills.Text.SplitSkill\":\n        result.push(skill as SplitSkill);\n        break;\n      case \"#Microsoft.Skills.Text.TranslationSkill\":\n        result.push(skill as TextTranslationSkill);\n        break;\n      case \"#Microsoft.Skills.Custom.WebApiSkill\":\n        result.push(skill as WebApiSkill);\n        break;\n      case \"#Microsoft.Skills.Text.CustomEntityLookupSkill\":\n        result.push(skill as CustomEntityLookupSkill);\n        break;\n      case \"#Microsoft.Skills.Util.DocumentExtractionSkill\":\n        result.push(skill as DocumentExtractionSkill);\n        break;\n    }\n  }\n  return result;\n}\n\nexport function convertCognitiveServicesAccountToGenerated(\n  cognitiveServicesAccount?: CognitiveServicesAccount\n): CognitiveServicesAccountUnion | undefined {\n  if (!cognitiveServicesAccount) {\n    return cognitiveServicesAccount;\n  }\n\n  return cognitiveServicesAccount as CognitiveServicesAccountUnion;\n}\n\nexport function convertCognitiveServicesAccountToPublic(\n  cognitiveServicesAccount?: CognitiveServicesAccountUnion\n): CognitiveServicesAccount | undefined {\n  if (!cognitiveServicesAccount) {\n    return cognitiveServicesAccount;\n  }\n\n  if (cognitiveServicesAccount.odatatype === \"#Microsoft.Azure.Search.DefaultCognitiveServices\") {\n    return cognitiveServicesAccount as DefaultCognitiveServicesAccount;\n  } else {\n    return cognitiveServicesAccount as CognitiveServicesAccountKey;\n  }\n}\n\nexport function convertTokenFiltersToGenerated(\n  tokenFilters?: TokenFilter[]\n): TokenFilterUnion[] | undefined {\n  if (!tokenFilters) {\n    return tokenFilters;\n  }\n\n  const result: TokenFilterUnion[] = [];\n  for (const filter of tokenFilters) {\n    result.push(filter);\n  }\n\n  return result;\n}\n\nexport function convertAnalyzersToGenerated(\n  analyzers?: LexicalAnalyzer[]\n): LexicalAnalyzerUnion[] | undefined {\n  if (!analyzers) {\n    return analyzers;\n  }\n\n  const result: LexicalAnalyzerUnion[] = [];\n  for (const analyzer of analyzers) {\n    switch (analyzer.odatatype) {\n      case \"#Microsoft.Azure.Search.StandardAnalyzer\":\n      case \"#Microsoft.Azure.Search.StopAnalyzer\":\n        result.push(analyzer);\n        break;\n      case \"#Microsoft.Azure.Search.PatternAnalyzer\":\n        result.push({\n          ...analyzer,\n          flags: analyzer.flags ? analyzer.flags.join(\"|\") : undefined\n        });\n        break;\n      case \"#Microsoft.Azure.Search.CustomAnalyzer\":\n        result.push({\n          ...analyzer,\n          tokenizerName: analyzer.tokenizerName\n        });\n        break;\n    }\n  }\n  return result;\n}\n\nexport function convertAnalyzersToPublic(\n  analyzers?: LexicalAnalyzerUnion[]\n): LexicalAnalyzer[] | undefined {\n  if (!analyzers) {\n    return analyzers;\n  }\n\n  const result: LexicalAnalyzer[] = [];\n  for (const analyzer of analyzers) {\n    switch (analyzer.odatatype) {\n      case \"#Microsoft.Azure.Search.StandardAnalyzer\":\n        result.push(analyzer as LuceneStandardAnalyzer);\n        break;\n      case \"#Microsoft.Azure.Search.StopAnalyzer\":\n        result.push(analyzer as StopAnalyzer);\n        break;\n      case \"#Microsoft.Azure.Search.PatternAnalyzer\":\n        result.push({\n          ...analyzer,\n          flags: (analyzer as GeneratedPatternAnalyzer).flags\n            ? ((analyzer as GeneratedPatternAnalyzer).flags!.split(\"|\") as RegexFlags[])\n            : undefined\n        } as PatternAnalyzer);\n        break;\n      case \"#Microsoft.Azure.Search.CustomAnalyzer\":\n        result.push({\n          ...analyzer,\n          tokenizerName: (analyzer as CustomAnalyzer).tokenizerName\n        } as CustomAnalyzer);\n        break;\n    }\n  }\n  return result;\n}\n\nexport function convertFieldsToPublic(fields: GeneratedSearchField[]): SearchField[] {\n  if (!fields) {\n    return fields;\n  }\n\n  return fields.map<SearchField>((field) => {\n    let result: SearchField;\n    if (field.type === \"Collection(Edm.ComplexType)\" || field.type === \"Edm.ComplexType\") {\n      return {\n        name: field.name,\n        type: field.type,\n        fields: convertFieldsToPublic(field.fields!)\n      };\n    } else {\n      const analyzerName: LexicalAnalyzerName | undefined | null = field.analyzer;\n      const searchAnalyzerName: LexicalAnalyzerName | undefined | null = field.searchAnalyzer;\n      const indexAnalyzerName: LexicalAnalyzerName | undefined | null = field.indexAnalyzer;\n      const synonymMapNames: string[] | undefined = field.synonymMaps;\n\n      const { retrievable, ...restField } = field;\n      const hidden = typeof retrievable === \"boolean\" ? !retrievable : retrievable;\n\n      result = {\n        ...restField,\n        hidden,\n        analyzerName,\n        searchAnalyzerName,\n        indexAnalyzerName,\n        synonymMapNames\n      } as SimpleField;\n    }\n    return result;\n  });\n}\n\nexport function convertFieldsToGenerated(fields: SearchField[]): GeneratedSearchField[] {\n  return fields.map<GeneratedSearchField>((field) => {\n    if (isComplexField(field)) {\n      return {\n        name: field.name,\n        type: field.type,\n        fields: convertFieldsToGenerated(field.fields)\n      };\n    } else {\n      const { hidden, ...restField } = field;\n      const retrievable = typeof hidden === \"boolean\" ? !hidden : hidden;\n      return {\n        ...restField,\n        retrievable,\n        // modify API defaults to use less storage for simple types\n        searchable: field.searchable ?? false,\n        filterable: field.filterable ?? false,\n        facetable: field.facetable ?? false,\n        sortable: field.sortable ?? false,\n        analyzer: field.analyzerName,\n        searchAnalyzer: field.searchAnalyzerName,\n        indexAnalyzer: field.indexAnalyzerName,\n        synonymMaps: field.synonymMapNames\n      };\n    }\n  });\n}\n\nexport function convertTokenizersToGenerated(\n  tokenizers?: LexicalTokenizer[]\n): LexicalTokenizerUnion[] | undefined {\n  if (!tokenizers) {\n    return tokenizers;\n  }\n\n  const result: LexicalTokenizerUnion[] = [];\n  for (const tokenizer of tokenizers) {\n    if (tokenizer.odatatype === \"#Microsoft.Azure.Search.PatternTokenizer\") {\n      result.push({\n        ...tokenizer,\n        flags: tokenizer.flags ? tokenizer.flags.join(\"|\") : undefined\n      });\n    } else {\n      result.push(tokenizer);\n    }\n  }\n  return result;\n}\n\nexport function convertTokenizersToPublic(\n  tokenizers?: LexicalTokenizerUnion[]\n): LexicalTokenizer[] | undefined {\n  if (!tokenizers) {\n    return tokenizers;\n  }\n\n  const result: LexicalTokenizer[] = [];\n  for (const tokenizer of tokenizers) {\n    if (tokenizer.odatatype === \"#Microsoft.Azure.Search.PatternTokenizer\") {\n      result.push({\n        ...tokenizer,\n        flags: (tokenizer as PatternTokenizer).flags\n          ? ((tokenizer as PatternTokenizer).flags!.split(\"|\") as RegexFlags[])\n          : undefined\n      });\n    } else {\n      result.push(tokenizer);\n    }\n  }\n  return result;\n}\n\nexport function convertSimilarityToGenerated(\n  similarity?: SimilarityAlgorithm\n): SimilarityUnion | undefined {\n  if (!similarity) {\n    return similarity;\n  }\n\n  return similarity as SimilarityUnion;\n}\n\nexport function convertSimilarityToPublic(\n  similarity?: SimilarityUnion\n): SimilarityAlgorithm | undefined {\n  if (!similarity) {\n    return similarity;\n  }\n\n  if (similarity.odatatype === \"#Microsoft.Azure.Search.ClassicSimilarity\") {\n    return similarity as ClassicSimilarity;\n  } else {\n    return similarity as BM25Similarity;\n  }\n}\n\nexport function extractOperationOptions<T extends OperationOptions>(\n  obj: T\n): {\n  operationOptions: OperationOptions;\n  restOptions: Pick<T, Exclude<keyof T, keyof OperationOptions>>;\n} {\n  const { abortSignal, requestOptions, tracingOptions, ...restOptions } = obj;\n\n  return {\n    operationOptions: {\n      abortSignal,\n      requestOptions,\n      tracingOptions\n    },\n    restOptions\n  };\n}\n\nexport function convertEncryptionKeyToPublic(\n  encryptionKey?: GeneratedSearchResourceEncryptionKey | null\n): SearchResourceEncryptionKey | undefined | null {\n  if (!encryptionKey) {\n    return encryptionKey;\n  }\n\n  const result: SearchResourceEncryptionKey = {\n    keyName: encryptionKey.keyName,\n    keyVersion: encryptionKey.keyVersion,\n    vaultUrl: encryptionKey.vaultUri\n  };\n\n  if (encryptionKey.accessCredentials) {\n    result.applicationId = encryptionKey.accessCredentials.applicationId;\n    result.applicationSecret = encryptionKey.accessCredentials.applicationSecret;\n  }\n\n  return result;\n}\n\nexport function convertEncryptionKeyToGenerated(\n  encryptionKey?: SearchResourceEncryptionKey | null\n): GeneratedSearchResourceEncryptionKey | undefined | null {\n  if (!encryptionKey) {\n    return encryptionKey;\n  }\n\n  const result: GeneratedSearchResourceEncryptionKey = {\n    keyName: encryptionKey.keyName,\n    keyVersion: encryptionKey.keyVersion,\n    vaultUri: encryptionKey.vaultUrl\n  };\n\n  if (encryptionKey.applicationId) {\n    result.accessCredentials = {\n      applicationId: encryptionKey.applicationId,\n      applicationSecret: encryptionKey.applicationSecret\n    };\n  }\n\n  return result;\n}\n\nexport function generatedIndexToPublicIndex(generatedIndex: GeneratedSearchIndex): SearchIndex {\n  return {\n    name: generatedIndex.name,\n    defaultScoringProfile: generatedIndex.defaultScoringProfile,\n    corsOptions: generatedIndex.corsOptions,\n    suggesters: generatedIndex.suggesters,\n    encryptionKey: convertEncryptionKeyToPublic(generatedIndex.encryptionKey),\n    etag: generatedIndex.etag,\n    analyzers: convertAnalyzersToPublic(generatedIndex.analyzers),\n    tokenizers: convertTokenizersToPublic(generatedIndex.tokenizers),\n    tokenFilters: generatedIndex.tokenFilters as TokenFilter[],\n    charFilters: generatedIndex.charFilters as CharFilter[],\n    scoringProfiles: generatedIndex.scoringProfiles as ScoringProfile[],\n    fields: convertFieldsToPublic(generatedIndex.fields),\n    similarity: convertSimilarityToPublic(generatedIndex.similarity)\n  };\n}\n\nexport function generatedSearchResultToPublicSearchResult<T>(\n  results: GeneratedSearchResult[]\n): SearchResult<T>[] {\n  const returnValues: SearchResult<T>[] = results.map<SearchResult<T>>((result) => {\n    const { _score, _highlights, rerankerScore, captions, ...restProps } = result;\n    const doc: { [key: string]: any } = {\n      ...restProps\n    };\n    const obj = {\n      score: _score,\n      highlights: _highlights,\n      document: doc\n    };\n    return obj as SearchResult<T>;\n  });\n  return returnValues;\n}\n\nexport function generatedSuggestDocumentsResultToPublicSuggestDocumentsResult<T>(\n  searchDocumentsResult: GeneratedSuggestDocumentsResult\n): SuggestDocumentsResult<T> {\n  const results = searchDocumentsResult.results.map<SuggestResult<T>>((element) => {\n    const { _text, ...restProps } = element;\n\n    const doc: { [key: string]: any } = {\n      ...restProps\n    };\n\n    const obj = {\n      text: _text,\n      document: doc\n    };\n\n    return obj as SuggestResult<T>;\n  });\n\n  const result: SuggestDocumentsResult<T> = {\n    results: results,\n    coverage: searchDocumentsResult.coverage\n  };\n\n  return result;\n}\n\nexport function publicIndexToGeneratedIndex(index: SearchIndex): GeneratedSearchIndex {\n  return {\n    name: index.name,\n    defaultScoringProfile: index.defaultScoringProfile,\n    corsOptions: index.corsOptions,\n    suggesters: index.suggesters,\n    encryptionKey: convertEncryptionKeyToGenerated(index.encryptionKey),\n    etag: index.etag,\n    tokenFilters: convertTokenFiltersToGenerated(index.tokenFilters),\n    charFilters: index.charFilters,\n    scoringProfiles: index.scoringProfiles,\n    analyzers: convertAnalyzersToGenerated(index.analyzers),\n    tokenizers: convertTokenizersToGenerated(index.tokenizers),\n    fields: convertFieldsToGenerated(index.fields),\n    similarity: convertSimilarityToGenerated(index.similarity)\n  };\n}\n\nexport function generatedSkillsetToPublicSkillset(\n  generatedSkillset: GeneratedSearchIndexerSkillset\n): SearchIndexerSkillset {\n  return {\n    name: generatedSkillset.name,\n    description: generatedSkillset.description,\n    skills: convertSkillsToPublic(generatedSkillset.skills),\n    cognitiveServicesAccount: convertCognitiveServicesAccountToPublic(\n      generatedSkillset.cognitiveServicesAccount\n    ),\n    knowledgeStore: generatedSkillset.knowledgeStore,\n    etag: generatedSkillset.etag,\n    encryptionKey: convertEncryptionKeyToPublic(generatedSkillset.encryptionKey)\n  };\n}\n\nexport function publicSkillsetToGeneratedSkillset(\n  skillset: SearchIndexerSkillset\n): GeneratedSearchIndexerSkillset {\n  return {\n    name: skillset.name,\n    description: skillset.description,\n    etag: skillset.etag,\n    skills: skillset.skills,\n    cognitiveServicesAccount: convertCognitiveServicesAccountToGenerated(\n      skillset.cognitiveServicesAccount\n    ),\n    knowledgeStore: skillset.knowledgeStore,\n    encryptionKey: convertEncryptionKeyToGenerated(skillset.encryptionKey)\n  };\n}\n\nexport function generatedSynonymMapToPublicSynonymMap(synonymMap: GeneratedSynonymMap): SynonymMap {\n  const result: SynonymMap = {\n    name: synonymMap.name,\n    encryptionKey: convertEncryptionKeyToPublic(synonymMap.encryptionKey),\n    etag: synonymMap.etag,\n    synonyms: []\n  };\n\n  if (synonymMap.synonyms) {\n    result.synonyms = synonymMap.synonyms.split(\"\\n\");\n  }\n\n  return result;\n}\n\nexport function publicSynonymMapToGeneratedSynonymMap(synonymMap: SynonymMap): GeneratedSynonymMap {\n  const result: GeneratedSynonymMap = {\n    name: synonymMap.name,\n    format: \"solr\",\n    encryptionKey: convertEncryptionKeyToGenerated(synonymMap.encryptionKey),\n    etag: synonymMap.etag,\n    synonyms: synonymMap.synonyms.join(\"\\n\")\n  };\n\n  result.encryptionKey = convertEncryptionKeyToGenerated(synonymMap.encryptionKey);\n\n  return result;\n}\n\nexport function publicSearchIndexerToGeneratedSearchIndexer(\n  indexer: SearchIndexer\n): GeneratedSearchIndexer {\n  return {\n    ...indexer,\n    encryptionKey: convertEncryptionKeyToGenerated(indexer.encryptionKey)\n  };\n}\n\nexport function generatedSearchIndexerToPublicSearchIndexer(\n  indexer: GeneratedSearchIndexer\n): SearchIndexer {\n  return {\n    ...indexer,\n    encryptionKey: convertEncryptionKeyToPublic(indexer.encryptionKey)\n  };\n}\n\nexport function publicDataSourceToGeneratedDataSource(\n  dataSource: SearchIndexerDataSourceConnection\n): GeneratedSearchIndexerDataSourceConnection {\n  return {\n    name: dataSource.name,\n    description: dataSource.description,\n    type: dataSource.type,\n    credentials: {\n      connectionString: dataSource.connectionString\n    },\n    container: dataSource.container,\n    etag: dataSource.etag,\n    dataChangeDetectionPolicy: dataSource.dataChangeDetectionPolicy,\n    dataDeletionDetectionPolicy: dataSource.dataDeletionDetectionPolicy,\n    encryptionKey: convertEncryptionKeyToGenerated(dataSource.encryptionKey)\n  };\n}\n\nexport function generatedDataSourceToPublicDataSource(\n  dataSource: GeneratedSearchIndexerDataSourceConnection\n): SearchIndexerDataSourceConnection {\n  return {\n    name: dataSource.name,\n    description: dataSource.name,\n    type: dataSource.type,\n    connectionString: dataSource.credentials.connectionString,\n    container: dataSource.container,\n    etag: dataSource.etag,\n    dataChangeDetectionPolicy: convertDataChangeDetectionPolicyToPublic(\n      dataSource.dataChangeDetectionPolicy\n    ),\n    dataDeletionDetectionPolicy: convertDataDeletionDetectionPolicyToPublic(\n      dataSource.dataDeletionDetectionPolicy\n    ),\n    encryptionKey: convertEncryptionKeyToPublic(dataSource.encryptionKey)\n  };\n}\n\nexport function convertDataChangeDetectionPolicyToPublic(\n  dataChangeDetectionPolicy?: DataChangeDetectionPolicyUnion | null\n): DataChangeDetectionPolicy | undefined | null {\n  if (!dataChangeDetectionPolicy) {\n    return dataChangeDetectionPolicy;\n  }\n\n  if (\n    dataChangeDetectionPolicy.odatatype ===\n    \"#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy\"\n  ) {\n    return dataChangeDetectionPolicy as HighWaterMarkChangeDetectionPolicy;\n  } else {\n    return dataChangeDetectionPolicy as SqlIntegratedChangeTrackingPolicy;\n  }\n}\n\nexport function convertDataDeletionDetectionPolicyToPublic(\n  dataDeletionDetectionPolicy?: DataDeletionDetectionPolicyUnion | null\n): DataDeletionDetectionPolicy | undefined | null {\n  if (!dataDeletionDetectionPolicy) {\n    return dataDeletionDetectionPolicy;\n  }\n\n  return dataDeletionDetectionPolicy as SoftDeleteColumnDeletionDetectionPolicy;\n}\n\nexport function getRandomIntegerInclusive(min: number, max: number): number {\n  // Make sure inputs are integers.\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  // Pick a random offset from zero to the size of the range.\n  // Since Math.random() can never return 1, we have to make the range one larger\n  // in order to be inclusive of the maximum value after we take the floor.\n  const offset = Math.floor(Math.random() * (max - min + 1));\n  return offset + min;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Known values for Search Audience\n */\nexport enum KnownSearchAudience {\n  /**\n   * Audience for Azure China\n   */\n  AzureChina = \"https://search.azure.cn\",\n  /**\n   * Audience for Azure Government\n   */\n  AzureGovernment = \"https://search.azure.us\",\n  /**\n   * Audience for Azure Public\n   */\n  AzurePublicCloud = \"https://search.azure.com\"\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  PipelineOptions,\n  InternalPipelineOptions,\n  createPipelineFromOptions,\n  OperationOptions,\n  operationOptionsToRequestOptionsBase,\n  RequestPolicyFactory,\n  bearerTokenAuthenticationPolicy\n} from \"@azure/core-http\";\nimport { SearchClient as GeneratedClient } from \"./generated/data/searchClient\";\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { createSearchApiKeyCredentialPolicy } from \"./searchApiKeyCredentialPolicy\";\nimport { SDK_VERSION } from \"./constants\";\nimport { logger } from \"./logger\";\nimport {\n  AutocompleteResult,\n  AutocompleteRequest,\n  SuggestRequest,\n  IndexDocumentsResult\n} from \"./generated/data/models\";\nimport { createSpan } from \"./tracing\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { deserialize, serialize } from \"./serialization\";\nimport {\n  CountDocumentsOptions,\n  AutocompleteOptions,\n  SearchOptions,\n  SearchDocumentsResult,\n  SearchIterator,\n  ListSearchResultsPageSettings,\n  SearchResult,\n  SuggestOptions,\n  SuggestDocumentsResult,\n  GetDocumentOptions,\n  IndexDocumentsOptions,\n  UploadDocumentsOptions,\n  MergeDocumentsOptions,\n  DeleteDocumentsOptions,\n  SearchDocumentsPageResult,\n  MergeOrUploadDocumentsOptions,\n  SearchRequest\n} from \"./indexModels\";\nimport { odataMetadataPolicy } from \"./odataMetadataPolicy\";\nimport { IndexDocumentsBatch } from \"./indexDocumentsBatch\";\nimport { encode, decode } from \"./base64\";\nimport * as utils from \"./serviceUtils\";\nimport { IndexDocumentsClient } from \"./searchIndexingBufferedSender\";\nimport { KnownSearchAudience } from \"./searchAudience\";\n/**\n * Client options used to configure Cognitive Search API requests.\n */\nexport interface SearchClientOptions extends PipelineOptions {\n  /**\n   * The API version to use when communicating with the service.\n   */\n  apiVersion?: string;\n\n  /**\n   * The Audience to use for authentication with Azure Active Directory (AAD). The\n   * audience is not considered when using a shared key.\n   * {@link KnownSearchAudience} can be used interchangeably with audience\n   */\n  audience?: string;\n}\n\n/**\n * Class used to perform operations against a search index,\n * including querying documents in the index as well as\n * adding, updating, and removing them.\n */\nexport class SearchClient<T> implements IndexDocumentsClient<T> {\n  /// Maintenance note: when updating supported API versions,\n  /// the ContinuationToken logic will need to be updated below.\n\n  /**\n   * The API version to use when communicating with the service.\n   */\n  public readonly apiVersion: string = \"2020-06-30-Preview\";\n\n  /**\n   * The endpoint of the search service\n   */\n  public readonly endpoint: string;\n\n  /**\n   * The name of the index\n   */\n  public readonly indexName: string;\n\n  /**\n   * @internal\n   * @hidden\n   * A reference to the auto-generated SearchClient\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of SearchClient.\n   *\n   * Example usage:\n   * ```ts\n   * const { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n   *\n   * const client = new SearchClient(\n   *   \"<endpoint>\",\n   *   \"<indexName>\",\n   *   new AzureKeyCredential(\"<Admin Key>\");\n   * );\n   * ```\n   * @param endpoint - The endpoint of the search service\n   * @param indexName - The name of the index\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the Search client.\n   */\n  constructor(\n    endpoint: string,\n    indexName: string,\n    credential: KeyCredential | TokenCredential,\n    options: SearchClientOptions = {}\n  ) {\n    this.endpoint = endpoint;\n    this.indexName = indexName;\n\n    const libInfo = `azsdk-js-search-documents/${SDK_VERSION}`;\n    if (!options.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n    if (options.userAgentOptions.userAgentPrefix) {\n      options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      options.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\n            \"elapsed-time\",\n            \"Location\",\n            \"OData-MaxVersion\",\n            \"OData-Version\",\n            \"Prefer\",\n            \"throttle-reason\"\n          ]\n        }\n      }\n    };\n\n    const scope: string = options.audience\n      ? `${options.audience}/.default`\n      : `${KnownSearchAudience.AzurePublicCloud}/.default`;\n\n    const requestPolicyFactory: RequestPolicyFactory = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, scope)\n      : createSearchApiKeyCredentialPolicy(credential);\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, requestPolicyFactory);\n\n    if (Array.isArray(pipeline.requestPolicyFactories)) {\n      pipeline.requestPolicyFactories.unshift(odataMetadataPolicy(\"none\"));\n    }\n\n    let apiVersion = this.apiVersion;\n\n    if (options.apiVersion) {\n      if (![\"2020-06-30-Preview\", \"2020-06-30\"].includes(options.apiVersion)) {\n        throw new Error(`Invalid Api Version: ${options.apiVersion}`);\n      }\n      apiVersion = options.apiVersion;\n    }\n\n    this.client = new GeneratedClient(this.endpoint, this.indexName, apiVersion, pipeline);\n  }\n\n  /**\n   * Retrieves the number of documents in the index.\n   * @param options - Options to the count operation.\n   */\n  public async getDocumentsCount(options: CountDocumentsOptions = {}): Promise<number> {\n    const { span, updatedOptions } = createSpan(\"SearchClient-getDocumentsCount\", options);\n    try {\n      const result = await this.client.documents.count(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return Number(result._response.bodyAsText);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Based on a partial searchText from the user, return a list\n   * of potential completion strings based on a specified suggester.\n   * @param searchText - The search text on which to base autocomplete results.\n   * @param suggesterName - The name of the suggester as specified in the suggesters collection that's part of the index definition.\n   * @param options - Options to the autocomplete operation.\n   */\n  public async autocomplete<Fields extends keyof T>(\n    searchText: string,\n    suggesterName: string,\n    options: AutocompleteOptions<Fields> = {}\n  ): Promise<AutocompleteResult> {\n    const { operationOptions, restOptions } = this.extractOperationOptions({ ...options });\n    const { searchFields, ...nonFieldOptions } = restOptions;\n    const fullOptions: AutocompleteRequest = {\n      searchText: searchText,\n      suggesterName: suggesterName,\n      searchFields: this.convertSearchFields<Fields>(searchFields),\n      ...nonFieldOptions\n    };\n\n    if (!fullOptions.searchText) {\n      throw new RangeError(\"searchText must be provided.\");\n    }\n\n    if (!fullOptions.suggesterName) {\n      throw new RangeError(\"suggesterName must be provided.\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"SearchClient-autocomplete\", operationOptions);\n\n    try {\n      const result = await this.client.documents.autocompletePost(\n        fullOptions,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async searchDocuments<Fields extends keyof T>(\n    searchText?: string,\n    options: SearchOptions<Fields> = {},\n    nextPageParameters: SearchRequest = {}\n  ): Promise<SearchDocumentsPageResult<Pick<T, Fields>>> {\n    const { operationOptions, restOptions } = this.extractOperationOptions({ ...options });\n    const { select, searchFields, orderBy, ...nonFieldOptions } = restOptions;\n    const fullOptions: SearchRequest = {\n      searchFields: this.convertSearchFields<Fields>(searchFields),\n      select: this.convertSelect<Fields>(select),\n      orderBy: this.convertOrderBy(orderBy),\n      ...nonFieldOptions,\n      ...nextPageParameters\n    };\n\n    const { span, updatedOptions } = createSpan(\"SearchClient-searchDocuments\", operationOptions);\n\n    try {\n      const result = await this.client.documents.searchPost(\n        {\n          ...fullOptions,\n          includeTotalResultCount: fullOptions.includeTotalCount,\n          searchText: searchText\n        },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n\n      const { results, count, coverage, facets, nextLink } = result;\n\n      const modifiedResults = utils.generatedSearchResultToPublicSearchResult<T>(results);\n\n      const converted: SearchDocumentsPageResult<T> = {\n        results: modifiedResults,\n        count,\n        coverage,\n        facets,\n        continuationToken: this.encodeContinuationToken(nextLink, result.nextPageParameters)\n      };\n\n      return deserialize<SearchDocumentsPageResult<Pick<T, Fields>>>(converted);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listSearchResultsPage<Fields extends keyof T>(\n    searchText?: string,\n    options: SearchOptions<Fields> = {},\n    settings: ListSearchResultsPageSettings = {}\n  ): AsyncIterableIterator<SearchDocumentsPageResult<Pick<T, Fields>>> {\n    let decodedContinuation = this.decodeContinuationToken(settings.continuationToken);\n    let result = await this.searchDocuments<Fields>(\n      searchText,\n      options,\n      decodedContinuation?.nextPageParameters\n    );\n\n    yield result;\n\n    // Technically, we should also leverage nextLink, but the generated code\n    // doesn't support this yet.\n    while (result.continuationToken) {\n      decodedContinuation = this.decodeContinuationToken(result.continuationToken);\n      result = await this.searchDocuments(\n        searchText,\n        options,\n        decodedContinuation?.nextPageParameters\n      );\n      yield result;\n    }\n  }\n\n  private async *listSearchResultsAll<Fields extends keyof T>(\n    firstPage: SearchDocumentsPageResult<Pick<T, Fields>>,\n    searchText?: string,\n    options: SearchOptions<Fields> = {}\n  ): AsyncIterableIterator<SearchResult<Pick<T, Fields>>> {\n    yield* firstPage.results;\n    if (firstPage.continuationToken) {\n      for await (const page of this.listSearchResultsPage(searchText, options, {\n        continuationToken: firstPage.continuationToken\n      })) {\n        yield* page.results;\n      }\n    }\n  }\n\n  private listSearchResults<Fields extends keyof T>(\n    firstPage: SearchDocumentsPageResult<Pick<T, Fields>>,\n    searchText?: string,\n    options: SearchOptions<Fields> = {}\n  ): SearchIterator<Pick<T, Fields>> {\n    const iter = this.listSearchResultsAll(firstPage, searchText, options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: ListSearchResultsPageSettings = {}) => {\n        return this.listSearchResultsPage(searchText, options, settings);\n      }\n    };\n  }\n\n  /**\n   * Performs a search on the current index given\n   * the specified arguments.\n   * @param searchText - Text to search\n   * @param options - Options for the search operation.\n   */\n  public async search<Fields extends keyof T>(\n    searchText?: string,\n    options: SearchOptions<Fields> = {}\n  ): Promise<SearchDocumentsResult<Pick<T, Fields>>> {\n    const { span, updatedOptions } = createSpan(\"SearchClient-search\", options);\n\n    try {\n      const pageResult = await this.searchDocuments(searchText, updatedOptions);\n\n      const { count, coverage, facets } = pageResult;\n\n      return {\n        count,\n        coverage,\n        facets,\n        results: this.listSearchResults(pageResult, searchText, updatedOptions)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns a short list of suggestions based on the searchText\n   * and specified suggester.\n   * @param searchText - The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.\n   * @param suggesterName - The name of the suggester as specified in the suggesters collection that's part of the index definition.\n   * @param options - Options for the suggest operation\n   */\n  public async suggest<Fields extends keyof T = never>(\n    searchText: string,\n    suggesterName: string,\n    options: SuggestOptions<Fields> = {}\n  ): Promise<SuggestDocumentsResult<Pick<T, Fields>>> {\n    const { operationOptions, restOptions } = this.extractOperationOptions({ ...options });\n    const { select, searchFields, orderBy, ...nonFieldOptions } = restOptions;\n    const fullOptions: SuggestRequest = {\n      searchText: searchText,\n      suggesterName: suggesterName,\n      searchFields: this.convertSearchFields<Fields>(searchFields),\n      select: this.convertSelect<Fields>(select),\n      orderBy: this.convertOrderBy(orderBy),\n      ...nonFieldOptions\n    };\n\n    if (!fullOptions.searchText) {\n      throw new RangeError(\"searchText must be provided.\");\n    }\n\n    if (!fullOptions.suggesterName) {\n      throw new RangeError(\"suggesterName must be provided.\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"SearchClient-suggest\", operationOptions);\n\n    try {\n      const result = await this.client.documents.suggestPost(\n        fullOptions,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n\n      const modifiedResult = utils.generatedSuggestDocumentsResultToPublicSuggestDocumentsResult<T>(\n        result\n      );\n\n      return deserialize<SuggestDocumentsResult<Pick<T, Fields>>>(modifiedResult);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieve a particular document from the index by key.\n   * @param key - The primary key value of the document\n   * @param options - Additional options\n   */\n  public async getDocument<Fields extends keyof T>(\n    key: string,\n    options: GetDocumentOptions<Fields> = {}\n  ): Promise<T> {\n    const { span, updatedOptions } = createSpan(\"SearchClient-getDocument\", options);\n    try {\n      const result = await this.client.documents.get(\n        key,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return deserialize<T>(result.body);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Perform a set of index modifications (upload, merge, mergeOrUpload, delete)\n   * for the given set of documents.\n   * This operation may partially succeed and not all document operations will\n   * be reflected in the index. If you would like to treat this as an exception,\n   * set the `throwOnAnyFailure` option to true.\n   * For more details about how merging works, see: https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param batch - An array of actions to perform on the index.\n   * @param options - Additional options.\n   */\n  public async indexDocuments(\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    batch: IndexDocumentsBatch<T>,\n    options: IndexDocumentsOptions = {}\n  ): Promise<IndexDocumentsResult> {\n    const { span, updatedOptions } = createSpan(\"SearchClient-indexDocuments\", options);\n    try {\n      const result = await this.client.documents.index(\n        { actions: serialize(batch.actions) },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      if (options.throwOnAnyFailure && result._response.status === 207) {\n        throw result;\n      }\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Upload an array of documents to the index.\n   * @param documents - The documents to upload.\n   * @param options - Additional options.\n   */\n  public async uploadDocuments(\n    documents: T[],\n    options: UploadDocumentsOptions = {}\n  ): Promise<IndexDocumentsResult> {\n    const { span, updatedOptions } = createSpan(\"SearchClient-uploadDocuments\", options);\n\n    const batch = new IndexDocumentsBatch<T>();\n    batch.upload(documents);\n\n    try {\n      return await this.indexDocuments(batch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update a set of documents in the index.\n   * For more details about how merging works, see https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The updated documents.\n   * @param options - Additional options.\n   */\n  public async mergeDocuments(\n    documents: T[],\n    options: MergeDocumentsOptions = {}\n  ): Promise<IndexDocumentsResult> {\n    const { span, updatedOptions } = createSpan(\"SearchClient-mergeDocuments\", options);\n\n    const batch = new IndexDocumentsBatch<T>();\n    batch.merge(documents);\n\n    try {\n      return await this.indexDocuments(batch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update a set of documents in the index or upload them if they don't exist.\n   * For more details about how merging works, see https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The updated documents.\n   * @param options - Additional options.\n   */\n  public async mergeOrUploadDocuments(\n    documents: T[],\n    options: MergeOrUploadDocumentsOptions = {}\n  ): Promise<IndexDocumentsResult> {\n    const { span, updatedOptions } = createSpan(\"SearchClient-mergeDocuments\", options);\n\n    const batch = new IndexDocumentsBatch<T>();\n    batch.mergeOrUpload(documents);\n\n    try {\n      return await this.indexDocuments(batch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a set of documents.\n   * @param documents - Documents to be deleted.\n   * @param options - Additional options.\n   */\n  public async deleteDocuments(\n    documents: T[],\n    options?: DeleteDocumentsOptions\n  ): Promise<IndexDocumentsResult>;\n\n  /**\n   * Delete a set of documents.\n   * @param keyName - The name of their primary key in the index.\n   * @param keyValues - The primary key values of documents to delete.\n   * @param options - Additional options.\n   */\n  public async deleteDocuments(\n    keyName: keyof T,\n    keyValues: string[],\n    options?: DeleteDocumentsOptions\n  ): Promise<IndexDocumentsResult>;\n\n  public async deleteDocuments(\n    keyNameOrDocuments: keyof T | T[],\n    keyValuesOrOptions?: string[] | DeleteDocumentsOptions,\n    options: DeleteDocumentsOptions = {}\n  ): Promise<IndexDocumentsResult> {\n    const { span, updatedOptions } = createSpan(\"SearchClient-deleteDocuments\", options);\n\n    const batch = new IndexDocumentsBatch<T>();\n    if (typeof keyNameOrDocuments === \"string\") {\n      batch.delete(keyNameOrDocuments, keyValuesOrOptions as string[]);\n    } else {\n      batch.delete(keyNameOrDocuments as T[]);\n    }\n\n    try {\n      return await this.indexDocuments(batch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private encodeContinuationToken(\n    nextLink: string | undefined,\n    nextPageParameters: SearchRequest | undefined\n  ): string | undefined {\n    if (!nextLink || !nextPageParameters) {\n      return undefined;\n    }\n    const payload = JSON.stringify({\n      apiVersion: this.apiVersion,\n      nextLink,\n      nextPageParameters\n    });\n    return encode(payload);\n  }\n\n  private decodeContinuationToken(\n    token?: string\n  ): { nextPageParameters: SearchRequest; nextLink: string } | undefined {\n    if (!token) {\n      return undefined;\n    }\n\n    const decodedToken = decode(token);\n\n    try {\n      const result: {\n        apiVersion: string;\n        nextLink: string;\n        nextPageParameters: SearchRequest;\n      } = JSON.parse(decodedToken);\n\n      if (result.apiVersion !== this.apiVersion) {\n        throw new RangeError(`Continuation token uses unsupported apiVersion \"${this.apiVersion}\"`);\n      }\n\n      return {\n        nextLink: result.nextLink,\n        nextPageParameters: result.nextPageParameters\n      };\n    } catch (e) {\n      throw new Error(`Corrupted or invalid continuation token: ${decodedToken}`);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  private extractOperationOptions<T extends OperationOptions>(\n    obj: T\n  ): {\n    operationOptions: OperationOptions;\n    restOptions: Pick<T, Exclude<keyof T, keyof OperationOptions>>;\n  } {\n    const { abortSignal, requestOptions, tracingOptions, ...restOptions } = obj;\n\n    return {\n      operationOptions: {\n        abortSignal,\n        requestOptions,\n        tracingOptions\n      },\n      restOptions\n    };\n  }\n\n  private convertSelect<Fields>(select?: Fields[]): string | undefined {\n    if (select) {\n      return select.join(\",\");\n    }\n    return select;\n  }\n\n  private convertSearchFields<Fields>(searchFields?: Fields[]): string | undefined {\n    if (searchFields) {\n      return searchFields.join(\",\");\n    }\n    return searchFields;\n  }\n\n  private convertOrderBy(orderBy?: string[]): string | undefined {\n    if (orderBy) {\n      return orderBy.join(\",\");\n    }\n    return orderBy;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { IndexDocumentsBatch } from \"./indexDocumentsBatch\";\nimport {\n  IndexDocumentsAction,\n  SearchIndexingBufferedSenderOptions,\n  SearchIndexingBufferedSenderUploadDocumentsOptions,\n  SearchIndexingBufferedSenderMergeDocumentsOptions,\n  SearchIndexingBufferedSenderMergeOrUploadDocumentsOptions,\n  SearchIndexingBufferedSenderDeleteDocumentsOptions,\n  SearchIndexingBufferedSenderFlushDocumentsOptions,\n  IndexDocumentsOptions\n} from \"./indexModels\";\nimport { IndexDocumentsResult } from \"./generated/data/models\";\nimport { RestError, OperationOptions } from \"@azure/core-http\";\nimport EventEmitter from \"events\";\nimport { createSpan } from \"./tracing\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { delay } from \"@azure/core-http\";\nimport { getRandomIntegerInclusive } from \"./serviceUtils\";\n\n/**\n * Index Documents Client\n */\nexport interface IndexDocumentsClient<T> {\n  /**\n   * Perform a set of index modifications (upload, merge, mergeOrUpload, delete)\n   * for the given set of documents.\n   *\n   * @param batch - An array of actions to perform on the index.\n   * @param options - Additional options.\n   */\n  indexDocuments(\n    batch: IndexDocumentsBatch<T>,\n    options: IndexDocumentsOptions\n  ): Promise<IndexDocumentsResult>;\n}\n\n/**\n * Default Batch Size\n */\nexport const DEFAULT_BATCH_SIZE: number = 512;\n/**\n * Default window flush interval\n */\nexport const DEFAULT_FLUSH_WINDOW: number = 60000;\n/**\n * Default number of times to retry.\n */\nexport const DEFAULT_RETRY_COUNT: number = 3;\n/**\n * Default retry delay.\n */\nexport const DEFAULT_RETRY_DELAY: number = 800;\n/**\n * Default Max Delay between retries.\n */\nexport const DEFAULT_MAX_RETRY_DELAY: number = 60000;\n\n/**\n * Class used to perform buffered operations against a search index,\n * including adding, updating, and removing them.\n */\nexport class SearchIndexingBufferedSender<T> {\n  /**\n   * Search Client used to call the underlying IndexBatch operations.\n   */\n  private client: IndexDocumentsClient<T>;\n  /**\n   * Indicates if autoFlush is enabled.\n   */\n  private autoFlush: boolean;\n  /**\n   * Interval between flushes (in milliseconds).\n   */\n  private flushWindowInMs: number;\n  /**\n   * Delay between retries\n   */\n  private throttlingDelayInMs: number;\n  /**\n   * Maximum number of Retries\n   */\n  private maxRetriesPerAction: number;\n  /**\n   * Max Delay between retries\n   */\n  private maxThrottlingDelayInMs: number;\n  /**\n   * Size of the batch.\n   */\n  private initialBatchActionCount: number;\n  /**\n   * Batch object used to complete the service call.\n   */\n  private batchObject: IndexDocumentsBatch<T>;\n  /**\n   * Clean up for the timer\n   */\n  private cleanupTimer?: () => void;\n  /**\n   * Event emitter/publisher used in the Buffered Sender\n   */\n  private readonly emitter = new EventEmitter();\n  /**\n   * Method to retrieve the document key\n   */\n  private documentKeyRetriever: (document: T) => string;\n\n  /**\n   * Creates a new instance of SearchIndexingBufferedSender.\n   *\n   * @param client - Search Client used to call the underlying IndexBatch operations.\n   * @param options - Options to modify auto flush.\n   *\n   */\n  constructor(\n    client: IndexDocumentsClient<T>,\n    documentKeyRetriever: (document: T) => string,\n    options: SearchIndexingBufferedSenderOptions = {}\n  ) {\n    this.client = client;\n    this.documentKeyRetriever = documentKeyRetriever;\n    // General Configuration properties\n    this.autoFlush = options.autoFlush ?? true;\n    this.initialBatchActionCount = options.initialBatchActionCount ?? DEFAULT_BATCH_SIZE;\n    this.flushWindowInMs = options.flushWindowInMs ?? DEFAULT_FLUSH_WINDOW;\n    // Retry specific configuration properties\n    this.throttlingDelayInMs = options.throttlingDelayInMs ?? DEFAULT_FLUSH_WINDOW;\n    this.maxRetriesPerAction = options.maxRetriesPerAction ?? DEFAULT_RETRY_COUNT;\n    this.maxThrottlingDelayInMs = options.maxThrottlingDelayInMs ?? DEFAULT_MAX_RETRY_DELAY;\n\n    this.batchObject = new IndexDocumentsBatch<T>();\n    if (this.autoFlush) {\n      const interval = setInterval(() => this.flush(), this.flushWindowInMs);\n      interval?.unref();\n      this.cleanupTimer = () => {\n        clearInterval(interval);\n      };\n    }\n  }\n\n  /**\n   * Uploads the documents/Adds the documents to the upload queue.\n   *\n   * @param documents - Documents to be uploaded.\n   * @param options - Upload options.\n   */\n  public async uploadDocuments(\n    documents: T[],\n    options: SearchIndexingBufferedSenderUploadDocumentsOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexingBufferedSender-uploadDocuments\",\n      options\n    );\n    try {\n      this.batchObject.upload(documents);\n      this.emitter.emit(\"batchAdded\", {\n        action: \"upload\",\n        documents\n      });\n      return this.internalFlush(false, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Merges the documents/Adds the documents to the merge queue.\n   *\n   * @param documents - Documents to be merged.\n   * @param options - Upload options.\n   */\n  public async mergeDocuments(\n    documents: T[],\n    options: SearchIndexingBufferedSenderMergeDocumentsOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexingBufferedSender-mergeDocuments\",\n      options\n    );\n    try {\n      this.batchObject.merge(documents);\n      this.emitter.emit(\"batchAdded\", {\n        action: \"merge\",\n        documents\n      });\n      return this.internalFlush(false, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Merges/Uploads the documents/Adds the documents to the merge/upload queue.\n   *\n   * @param documents - Documents to be merged/uploaded.\n   * @param options - Upload options.\n   */\n  public async mergeOrUploadDocuments(\n    documents: T[],\n    options: SearchIndexingBufferedSenderMergeOrUploadDocumentsOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexingBufferedSender-mergeOrUploadDocuments\",\n      options\n    );\n    try {\n      this.batchObject.mergeOrUpload(documents);\n      this.emitter.emit(\"batchAdded\", {\n        action: \"mergeOrUpload\",\n        documents\n      });\n      return this.internalFlush(false, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes the documents/Adds the documents to the delete queue.\n   *\n   * @param documents - Documents to be deleted.\n   * @param options - Upload options.\n   */\n  public async deleteDocuments(\n    documents: T[],\n    options: SearchIndexingBufferedSenderDeleteDocumentsOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexingBufferedSender-deleteDocuments\",\n      options\n    );\n    try {\n      this.batchObject.delete(documents);\n      this.emitter.emit(\"batchAdded\", {\n        action: \"delete\",\n        documents\n      });\n      return this.internalFlush(false, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Flushes the queue manually.\n   *\n   * @param options - Flush options.\n   */\n  public async flush(\n    options: SearchIndexingBufferedSenderFlushDocumentsOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexingBufferedSender-flush\", options);\n    try {\n      if (this.batchObject.actions.length > 0) {\n        return this.internalFlush(true, updatedOptions);\n      }\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * If using autoFlush: true, call this to cleanup the autoflush timer.\n   */\n  public async dispose(): Promise<void> {\n    if (this.batchObject.actions.length > 0) {\n      await this.internalFlush(true);\n    }\n    if (this.cleanupTimer) {\n      this.cleanupTimer();\n    }\n  }\n\n  /**\n   * Attach Batch Added Event\n   *\n   * @param event - Event to be emitted\n   * @param listener - Event Listener\n   */\n  public on(event: \"batchAdded\", listener: (e: { action: string; documents: T[] }) => void): void;\n  /**\n   * Attach Batch Sent Event\n   *\n   * @param event - Event to be emitted\n   * @param listener - Event Listener\n   */\n  public on(event: \"beforeDocumentSent\", listener: (e: IndexDocumentsAction<T>) => void): void;\n  /**\n   * Attach Batch Succeeded Event\n   *\n   * @param event - Event to be emitted\n   * @param listener - Event Listener\n   */\n  public on(event: \"batchSucceeded\", listener: (e: IndexDocumentsResult) => void): void;\n  /**\n   * Attach Batch Failed Event\n   *\n   * @param event - Event to be emitted\n   * @param listener - Event Listener\n   */\n  public on(event: \"batchFailed\", listener: (e: RestError) => void): void;\n  public on(\n    event: \"batchAdded\" | \"beforeDocumentSent\" | \"batchSucceeded\" | \"batchFailed\" | \"batchResizing\",\n    listener: (e: any) => void\n  ): void {\n    this.emitter.on(event, listener);\n  }\n\n  /**\n   * Detach Batch Added Event\n   *\n   * @param event - Event to be emitted\n   * @param listener - Event Listener\n   */\n  public off(event: \"batchAdded\", listener: (e: { action: string; documents: T[] }) => void): void;\n  /**\n   * Detach Batch Sent Event\n   *\n   * @param event - Event to be emitted\n   * @param listener - Event Listener\n   */\n  public off(event: \"beforeDocumentSent\", listener: (e: IndexDocumentsAction<T>) => void): void;\n  /**\n   * Detach Batch Succeeded Event\n   *\n   * @param event - Event to be emitted\n   * @param listener - Event Listener\n   */\n  public off(event: \"batchSucceeded\", listener: (e: IndexDocumentsResult) => void): void;\n  /**\n   * Detach Batch Failed Event\n   *\n   * @param event - Event to be emitted\n   * @param listener - Event Listener\n   */\n  public off(event: \"batchFailed\", listener: (e: RestError) => void): void;\n  public off(\n    event: \"batchAdded\" | \"beforeDocumentSent\" | \"batchSucceeded\" | \"batchFailed\",\n    listener: (e: any) => void\n  ): void {\n    this.emitter.removeListener(event, listener);\n  }\n\n  private isBatchReady(): boolean {\n    return this.batchObject.actions.length >= this.initialBatchActionCount;\n  }\n\n  private async internalFlush(force: boolean, options: OperationOptions = {}): Promise<void> {\n    if (force || (this.autoFlush && this.isBatchReady())) {\n      // Split it\n      const actions: IndexDocumentsAction<T>[] = this.batchObject.actions;\n      this.batchObject = new IndexDocumentsBatch<T>();\n      while (actions.length > 0) {\n        const actionsToSend = actions.splice(0, this.initialBatchActionCount);\n        const { batchToSubmit, submitLater } = this.pruneActions(actionsToSend);\n        actions.unshift(...submitLater);\n        await this.submitDocuments(batchToSubmit, options);\n      }\n    }\n  }\n\n  private pruneActions(\n    batch: IndexDocumentsAction<T>[]\n  ): { batchToSubmit: IndexDocumentsAction<T>[]; submitLater: IndexDocumentsAction<T>[] } {\n    const hashSet: Set<string> = new Set<string>();\n    const resultBatch: IndexDocumentsAction<T>[] = [];\n    const pruned: IndexDocumentsAction<T>[] = [];\n\n    for (const document of batch) {\n      const key = this.documentKeyRetriever((document as unknown) as T);\n      if (hashSet.has(key)) {\n        pruned.push(document);\n      } else {\n        hashSet.add(key);\n        resultBatch.push(document);\n      }\n    }\n    return { batchToSubmit: resultBatch, submitLater: pruned };\n  }\n\n  private async submitDocuments(\n    actionsToSend: IndexDocumentsAction<T>[],\n    options: OperationOptions,\n    retryAttempt: number = 1\n  ): Promise<void> {\n    try {\n      for (const action of actionsToSend) {\n        this.emitter.emit(\"beforeDocumentSent\", action);\n      }\n      const result = await this.client.indexDocuments(\n        new IndexDocumentsBatch<T>(actionsToSend),\n        options\n      );\n      // raise success event\n      this.emitter.emit(\"batchSucceeded\", result);\n    } catch (e) {\n      if (e.statusCode && e.statusCode === 413 && actionsToSend.length > 1) {\n        // Cut the payload size to half\n        const splitActionsArray = [\n          actionsToSend.slice(0, actionsToSend.length / 2),\n          actionsToSend.slice(actionsToSend.length / 2, actionsToSend.length)\n        ];\n        this.initialBatchActionCount = splitActionsArray[0].length; // So, we do not want 413 happening again and again\n        for (const actions of splitActionsArray) {\n          await this.submitDocuments(actions, options);\n        }\n      } else if (this.isRetryAbleError(e) && retryAttempt <= this.maxRetriesPerAction) {\n        // Exponentially increase the delay each time\n        const exponentialDelay = this.throttlingDelayInMs * Math.pow(2, retryAttempt);\n        // Don't let the delay exceed the maximum\n        const clampedExponentialDelay = Math.min(this.maxThrottlingDelayInMs, exponentialDelay);\n        // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n        // that retries across multiple clients don't occur simultaneously.\n        const delayWithJitter =\n          clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n        await delay(delayWithJitter);\n        await this.submitDocuments(actionsToSend, options, retryAttempt + 1);\n      } else {\n        this.emitter.emit(\"batchFailed\", e);\n        throw e;\n      }\n    }\n  }\n\n  private isRetryAbleError(e: any): boolean {\n    return e.statusCode && (e.statusCode === 422 || e.statusCode === 409 || e.statusCode === 503);\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const SearchIndexerDataSource: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerDataSource\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"DataSourceCredentials\"\n        }\n      },\n      container: {\n        serializedName: \"container\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchIndexerDataContainer\"\n        }\n      },\n      dataChangeDetectionPolicy: {\n        serializedName: \"dataChangeDetectionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"DataChangeDetectionPolicy\"\n        }\n      },\n      dataDeletionDetectionPolicy: {\n        serializedName: \"dataDeletionDetectionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"DataDeletionDetectionPolicy\"\n        }\n      },\n      etag: {\n        serializedName: \"@odata\\\\.etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionKey: {\n        serializedName: \"encryptionKey\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchResourceEncryptionKey\"\n        }\n      }\n    }\n  }\n};\n\nexport const DataSourceCredentials: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataSourceCredentials\",\n    modelProperties: {\n      connectionString: {\n        serializedName: \"connectionString\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerDataContainer: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerDataContainer\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DataChangeDetectionPolicy: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataChangeDetectionPolicy\",\n    uberParent: \"DataChangeDetectionPolicy\",\n    polymorphicDiscriminator: {\n      serializedName: \"@odata\\\\.type\",\n      clientName: \"odatatype\"\n    },\n    modelProperties: {\n      odatatype: {\n        serializedName: \"@odata\\\\.type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DataDeletionDetectionPolicy: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataDeletionDetectionPolicy\",\n    uberParent: \"DataDeletionDetectionPolicy\",\n    polymorphicDiscriminator: {\n      serializedName: \"@odata\\\\.type\",\n      clientName: \"odatatype\"\n    },\n    modelProperties: {\n      odatatype: {\n        serializedName: \"@odata\\\\.type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchResourceEncryptionKey: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchResourceEncryptionKey\",\n    modelProperties: {\n      keyName: {\n        serializedName: \"keyVaultKeyName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      keyVersion: {\n        serializedName: \"keyVaultKeyVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vaultUri: {\n        serializedName: \"keyVaultUri\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      accessCredentials: {\n        serializedName: \"accessCredentials\",\n        type: {\n          name: \"Composite\",\n          className: \"AzureActiveDirectoryApplicationCredentials\"\n        }\n      }\n    }\n  }\n};\n\nexport const AzureActiveDirectoryApplicationCredentials: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AzureActiveDirectoryApplicationCredentials\",\n    modelProperties: {\n      applicationId: {\n        serializedName: \"applicationId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      applicationSecret: {\n        serializedName: \"applicationSecret\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchError: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListDataSourcesResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ListDataSourcesResult\",\n    modelProperties: {\n      dataSources: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexerDataSource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexer: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexer\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSourceName: {\n        serializedName: \"dataSourceName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      skillsetName: {\n        serializedName: \"skillsetName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      targetIndexName: {\n        serializedName: \"targetIndexName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      schedule: {\n        serializedName: \"schedule\",\n        type: {\n          name: \"Composite\",\n          className: \"IndexingSchedule\"\n        }\n      },\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"IndexingParameters\"\n        }\n      },\n      fieldMappings: {\n        serializedName: \"fieldMappings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FieldMapping\"\n            }\n          }\n        }\n      },\n      outputFieldMappings: {\n        serializedName: \"outputFieldMappings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FieldMapping\"\n            }\n          }\n        }\n      },\n      isDisabled: {\n        serializedName: \"disabled\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      etag: {\n        serializedName: \"@odata\\\\.etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionKey: {\n        serializedName: \"encryptionKey\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchResourceEncryptionKey\"\n        }\n      }\n    }\n  }\n};\n\nexport const IndexingSchedule: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexingSchedule\",\n    modelProperties: {\n      interval: {\n        serializedName: \"interval\",\n        required: true,\n        type: {\n          name: \"TimeSpan\"\n        }\n      },\n      startTime: {\n        serializedName: \"startTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const IndexingParameters: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexingParameters\",\n    modelProperties: {\n      batchSize: {\n        serializedName: \"batchSize\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxFailedItems: {\n        serializedName: \"maxFailedItems\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxFailedItemsPerBatch: {\n        serializedName: \"maxFailedItemsPerBatch\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      configuration: {\n        serializedName: \"configuration\",\n        type: {\n          name: \"Composite\",\n          className: \"IndexingParametersConfiguration\"\n        }\n      }\n    }\n  }\n};\n\nexport const IndexingParametersConfiguration: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexingParametersConfiguration\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      parsingMode: {\n        defaultValue: \"default\",\n        serializedName: \"parsingMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      excludedFileNameExtensions: {\n        serializedName: \"excludedFileNameExtensions\",\n        type: {\n          name: \"String\"\n        }\n      },\n      indexedFileNameExtensions: {\n        serializedName: \"indexedFileNameExtensions\",\n        type: {\n          name: \"String\"\n        }\n      },\n      failOnUnsupportedContentType: {\n        serializedName: \"failOnUnsupportedContentType\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      failOnUnprocessableDocument: {\n        serializedName: \"failOnUnprocessableDocument\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      indexStorageMetadataOnlyForOversizedDocuments: {\n        serializedName: \"indexStorageMetadataOnlyForOversizedDocuments\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      delimitedTextHeaders: {\n        serializedName: \"delimitedTextHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      delimitedTextDelimiter: {\n        serializedName: \"delimitedTextDelimiter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      firstLineContainsHeaders: {\n        defaultValue: true,\n        serializedName: \"firstLineContainsHeaders\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      documentRoot: {\n        serializedName: \"documentRoot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dataToExtract: {\n        defaultValue: \"contentAndMetadata\",\n        serializedName: \"dataToExtract\",\n        type: {\n          name: \"String\"\n        }\n      },\n      imageAction: {\n        defaultValue: \"none\",\n        serializedName: \"imageAction\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowSkillsetToReadFileData: {\n        serializedName: \"allowSkillsetToReadFileData\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      pdfTextRotationAlgorithm: {\n        defaultValue: \"none\",\n        serializedName: \"pdfTextRotationAlgorithm\",\n        type: {\n          name: \"String\"\n        }\n      },\n      executionEnvironment: {\n        defaultValue: \"standard\",\n        serializedName: \"executionEnvironment\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTimeout: {\n        defaultValue: \"00:05:00\",\n        serializedName: \"queryTimeout\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FieldMapping: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FieldMapping\",\n    modelProperties: {\n      sourceFieldName: {\n        serializedName: \"sourceFieldName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      targetFieldName: {\n        serializedName: \"targetFieldName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      mappingFunction: {\n        serializedName: \"mappingFunction\",\n        type: {\n          name: \"Composite\",\n          className: \"FieldMappingFunction\"\n        }\n      }\n    }\n  }\n};\n\nexport const FieldMappingFunction: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FieldMappingFunction\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const ListIndexersResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ListIndexersResult\",\n    modelProperties: {\n      indexers: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexer\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerStatus: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerStatus\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"unknown\", \"error\", \"running\"]\n        }\n      },\n      lastResult: {\n        serializedName: \"lastResult\",\n        type: {\n          name: \"Composite\",\n          className: \"IndexerExecutionResult\"\n        }\n      },\n      executionHistory: {\n        serializedName: \"executionHistory\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IndexerExecutionResult\"\n            }\n          }\n        }\n      },\n      limits: {\n        serializedName: \"limits\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchIndexerLimits\"\n        }\n      }\n    }\n  }\n};\n\nexport const IndexerExecutionResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexerExecutionResult\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"transientFailure\", \"success\", \"inProgress\", \"reset\"]\n        }\n      },\n      errorMessage: {\n        serializedName: \"errorMessage\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      startTime: {\n        serializedName: \"startTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      endTime: {\n        serializedName: \"endTime\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexerError\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexerWarning\"\n            }\n          }\n        }\n      },\n      itemCount: {\n        serializedName: \"itemsProcessed\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      failedItemCount: {\n        serializedName: \"itemsFailed\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      initialTrackingState: {\n        serializedName: \"initialTrackingState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      finalTrackingState: {\n        serializedName: \"finalTrackingState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerError: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerError\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      errorMessage: {\n        serializedName: \"errorMessage\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      statusCode: {\n        serializedName: \"statusCode\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      documentationLink: {\n        serializedName: \"documentationLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerWarning: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerWarning\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      documentationLink: {\n        serializedName: \"documentationLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerLimits: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerLimits\",\n    modelProperties: {\n      maxRunTime: {\n        serializedName: \"maxRunTime\",\n        readOnly: true,\n        type: {\n          name: \"TimeSpan\"\n        }\n      },\n      maxDocumentExtractionSize: {\n        serializedName: \"maxDocumentExtractionSize\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxDocumentContentCharactersToExtract: {\n        serializedName: \"maxDocumentContentCharactersToExtract\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerSkillset: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerSkillset\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      skills: {\n        serializedName: \"skills\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexerSkill\"\n            }\n          }\n        }\n      },\n      cognitiveServicesAccount: {\n        serializedName: \"cognitiveServices\",\n        type: {\n          name: \"Composite\",\n          className: \"CognitiveServicesAccount\"\n        }\n      },\n      knowledgeStore: {\n        serializedName: \"knowledgeStore\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchIndexerKnowledgeStore\"\n        }\n      },\n      etag: {\n        serializedName: \"@odata\\\\.etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionKey: {\n        serializedName: \"encryptionKey\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchResourceEncryptionKey\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerSkill: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: {\n      serializedName: \"@odata\\\\.type\",\n      clientName: \"odatatype\"\n    },\n    modelProperties: {\n      odatatype: {\n        serializedName: \"@odata\\\\.type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inputs: {\n        serializedName: \"inputs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InputFieldMappingEntry\"\n            }\n          }\n        }\n      },\n      outputs: {\n        serializedName: \"outputs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OutputFieldMappingEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const InputFieldMappingEntry: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InputFieldMappingEntry\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceContext: {\n        serializedName: \"sourceContext\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inputs: {\n        serializedName: \"inputs\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InputFieldMappingEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OutputFieldMappingEntry: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OutputFieldMappingEntry\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      targetName: {\n        serializedName: \"targetName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CognitiveServicesAccount: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CognitiveServicesAccount\",\n    uberParent: \"CognitiveServicesAccount\",\n    polymorphicDiscriminator: {\n      serializedName: \"@odata\\\\.type\",\n      clientName: \"odatatype\"\n    },\n    modelProperties: {\n      odatatype: {\n        serializedName: \"@odata\\\\.type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerKnowledgeStore: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerKnowledgeStore\",\n    modelProperties: {\n      storageConnectionString: {\n        serializedName: \"storageConnectionString\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      projections: {\n        serializedName: \"projections\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexerKnowledgeStoreProjection\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerKnowledgeStoreProjection: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerKnowledgeStoreProjection\",\n    modelProperties: {\n      tables: {\n        serializedName: \"tables\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexerKnowledgeStoreTableProjectionSelector\"\n            }\n          }\n        }\n      },\n      objects: {\n        serializedName: \"objects\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexerKnowledgeStoreObjectProjectionSelector\"\n            }\n          }\n        }\n      },\n      files: {\n        serializedName: \"files\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexerKnowledgeStoreFileProjectionSelector\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerKnowledgeStoreProjectionSelector: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerKnowledgeStoreProjectionSelector\",\n    modelProperties: {\n      referenceKeyName: {\n        serializedName: \"referenceKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      generatedKeyName: {\n        serializedName: \"generatedKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceContext: {\n        serializedName: \"sourceContext\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inputs: {\n        serializedName: \"inputs\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InputFieldMappingEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListSkillsetsResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ListSkillsetsResult\",\n    modelProperties: {\n      skillsets: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndexerSkillset\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SynonymMap: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SynonymMap\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      format: {\n        defaultValue: \"solr\",\n        isConstant: true,\n        serializedName: \"format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      synonyms: {\n        serializedName: \"synonyms\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionKey: {\n        serializedName: \"encryptionKey\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchResourceEncryptionKey\"\n        }\n      },\n      etag: {\n        serializedName: \"@odata\\\\.etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListSynonymMapsResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ListSynonymMapsResult\",\n    modelProperties: {\n      synonymMaps: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SynonymMap\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndex: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndex\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchField\"\n            }\n          }\n        }\n      },\n      scoringProfiles: {\n        serializedName: \"scoringProfiles\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ScoringProfile\"\n            }\n          }\n        }\n      },\n      defaultScoringProfile: {\n        serializedName: \"defaultScoringProfile\",\n        type: {\n          name: \"String\"\n        }\n      },\n      corsOptions: {\n        serializedName: \"corsOptions\",\n        type: {\n          name: \"Composite\",\n          className: \"CorsOptions\"\n        }\n      },\n      suggesters: {\n        serializedName: \"suggesters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Suggester\"\n            }\n          }\n        }\n      },\n      analyzers: {\n        serializedName: \"analyzers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LexicalAnalyzer\"\n            }\n          }\n        }\n      },\n      tokenizers: {\n        serializedName: \"tokenizers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LexicalTokenizer\"\n            }\n          }\n        }\n      },\n      tokenFilters: {\n        serializedName: \"tokenFilters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TokenFilter\"\n            }\n          }\n        }\n      },\n      charFilters: {\n        serializedName: \"charFilters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CharFilter\"\n            }\n          }\n        }\n      },\n      encryptionKey: {\n        serializedName: \"encryptionKey\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchResourceEncryptionKey\"\n        }\n      },\n      similarity: {\n        serializedName: \"similarity\",\n        type: {\n          name: \"Composite\",\n          className: \"Similarity\"\n        }\n      },\n      etag: {\n        serializedName: \"@odata\\\\.etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchField: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchField\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retrievable: {\n        serializedName: \"retrievable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      searchable: {\n        serializedName: \"searchable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      filterable: {\n        serializedName: \"filterable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      sortable: {\n        serializedName: \"sortable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      facetable: {\n        serializedName: \"facetable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      analyzer: {\n        serializedName: \"analyzer\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      searchAnalyzer: {\n        serializedName: \"searchAnalyzer\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      indexAnalyzer: {\n        serializedName: \"indexAnalyzer\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      synonymMaps: {\n        serializedName: \"synonymMaps\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchField\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ScoringProfile: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ScoringProfile\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      textWeights: {\n        serializedName: \"text\",\n        type: {\n          name: \"Composite\",\n          className: \"TextWeights\"\n        }\n      },\n      functions: {\n        serializedName: \"functions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ScoringFunction\"\n            }\n          }\n        }\n      },\n      functionAggregation: {\n        serializedName: \"functionAggregation\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"sum\",\n            \"average\",\n            \"minimum\",\n            \"maximum\",\n            \"firstMatching\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const TextWeights: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextWeights\",\n    modelProperties: {\n      weights: {\n        serializedName: \"weights\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"Number\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const ScoringFunction: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ScoringFunction\",\n    uberParent: \"ScoringFunction\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fieldName: {\n        serializedName: \"fieldName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boost: {\n        serializedName: \"boost\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      interpolation: {\n        serializedName: \"interpolation\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"linear\", \"constant\", \"quadratic\", \"logarithmic\"]\n        }\n      }\n    }\n  }\n};\n\nexport const CorsOptions: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CorsOptions\",\n    modelProperties: {\n      allowedOrigins: {\n        serializedName: \"allowedOrigins\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      maxAgeInSeconds: {\n        serializedName: \"maxAgeInSeconds\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Suggester: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Suggester\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      searchMode: {\n        defaultValue: \"analyzingInfixMatching\",\n        isConstant: true,\n        serializedName: \"searchMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceFields: {\n        serializedName: \"sourceFields\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const LexicalAnalyzer: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LexicalAnalyzer\",\n    uberParent: \"LexicalAnalyzer\",\n    polymorphicDiscriminator: {\n      serializedName: \"@odata\\\\.type\",\n      clientName: \"odatatype\"\n    },\n    modelProperties: {\n      odatatype: {\n        serializedName: \"@odata\\\\.type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LexicalTokenizer: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LexicalTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: {\n      serializedName: \"@odata\\\\.type\",\n      clientName: \"odatatype\"\n    },\n    modelProperties: {\n      odatatype: {\n        serializedName: \"@odata\\\\.type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokenFilter: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: {\n      serializedName: \"@odata\\\\.type\",\n      clientName: \"odatatype\"\n    },\n    modelProperties: {\n      odatatype: {\n        serializedName: \"@odata\\\\.type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CharFilter: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CharFilter\",\n    uberParent: \"CharFilter\",\n    polymorphicDiscriminator: {\n      serializedName: \"@odata\\\\.type\",\n      clientName: \"odatatype\"\n    },\n    modelProperties: {\n      odatatype: {\n        serializedName: \"@odata\\\\.type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Similarity: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Similarity\",\n    uberParent: \"Similarity\",\n    polymorphicDiscriminator: {\n      serializedName: \"@odata\\\\.type\",\n      clientName: \"odatatype\"\n    },\n    modelProperties: {\n      odatatype: {\n        serializedName: \"@odata\\\\.type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListIndexesResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ListIndexesResult\",\n    modelProperties: {\n      indexes: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchIndex\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const GetIndexStatisticsResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GetIndexStatisticsResult\",\n    modelProperties: {\n      documentCount: {\n        serializedName: \"documentCount\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      storageSize: {\n        serializedName: \"storageSize\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeRequest: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeRequest\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      analyzer: {\n        serializedName: \"analyzer\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tokenizer: {\n        serializedName: \"tokenizer\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tokenFilters: {\n        serializedName: \"tokenFilters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      charFilters: {\n        serializedName: \"charFilters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeResult\",\n    modelProperties: {\n      tokens: {\n        serializedName: \"tokens\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AnalyzedTokenInfo\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzedTokenInfo: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzedTokenInfo\",\n    modelProperties: {\n      token: {\n        serializedName: \"token\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      startOffset: {\n        serializedName: \"startOffset\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      endOffset: {\n        serializedName: \"endOffset\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      position: {\n        serializedName: \"position\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceStatistics: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ServiceStatistics\",\n    modelProperties: {\n      counters: {\n        serializedName: \"counters\",\n        type: {\n          name: \"Composite\",\n          className: \"ServiceCounters\"\n        }\n      },\n      limits: {\n        serializedName: \"limits\",\n        type: {\n          name: \"Composite\",\n          className: \"ServiceLimits\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceCounters: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ServiceCounters\",\n    modelProperties: {\n      documentCounter: {\n        serializedName: \"documentCount\",\n        type: {\n          name: \"Composite\",\n          className: \"ResourceCounter\"\n        }\n      },\n      indexCounter: {\n        serializedName: \"indexesCount\",\n        type: {\n          name: \"Composite\",\n          className: \"ResourceCounter\"\n        }\n      },\n      indexerCounter: {\n        serializedName: \"indexersCount\",\n        type: {\n          name: \"Composite\",\n          className: \"ResourceCounter\"\n        }\n      },\n      dataSourceCounter: {\n        serializedName: \"dataSourcesCount\",\n        type: {\n          name: \"Composite\",\n          className: \"ResourceCounter\"\n        }\n      },\n      storageSizeCounter: {\n        serializedName: \"storageSize\",\n        type: {\n          name: \"Composite\",\n          className: \"ResourceCounter\"\n        }\n      },\n      synonymMapCounter: {\n        serializedName: \"synonymMaps\",\n        type: {\n          name: \"Composite\",\n          className: \"ResourceCounter\"\n        }\n      },\n      skillsetCounter: {\n        serializedName: \"skillsetCount\",\n        type: {\n          name: \"Composite\",\n          className: \"ResourceCounter\"\n        }\n      }\n    }\n  }\n};\n\nexport const ResourceCounter: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ResourceCounter\",\n    modelProperties: {\n      usage: {\n        serializedName: \"usage\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      quota: {\n        serializedName: \"quota\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceLimits: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ServiceLimits\",\n    modelProperties: {\n      maxFieldsPerIndex: {\n        serializedName: \"maxFieldsPerIndex\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxFieldNestingDepthPerIndex: {\n        serializedName: \"maxFieldNestingDepthPerIndex\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxComplexCollectionFieldsPerIndex: {\n        serializedName: \"maxComplexCollectionFieldsPerIndex\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxComplexObjectsInCollectionsPerDocument: {\n        serializedName: \"maxComplexObjectsInCollectionsPerDocument\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DistanceScoringParameters: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DistanceScoringParameters\",\n    modelProperties: {\n      referencePointParameter: {\n        serializedName: \"referencePointParameter\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boostingDistance: {\n        serializedName: \"boostingDistance\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const FreshnessScoringParameters: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FreshnessScoringParameters\",\n    modelProperties: {\n      boostingDuration: {\n        serializedName: \"boostingDuration\",\n        required: true,\n        type: {\n          name: \"TimeSpan\"\n        }\n      }\n    }\n  }\n};\n\nexport const MagnitudeScoringParameters: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MagnitudeScoringParameters\",\n    modelProperties: {\n      boostingRangeStart: {\n        serializedName: \"boostingRangeStart\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      boostingRangeEnd: {\n        serializedName: \"boostingRangeEnd\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      shouldBoostBeyondRangeByConstant: {\n        serializedName: \"constantBoostBeyondRange\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const TagScoringParameters: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TagScoringParameters\",\n    modelProperties: {\n      tagsParameter: {\n        serializedName: \"tagsParameter\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntity: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntity\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      subtype: {\n        serializedName: \"subtype\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      caseSensitive: {\n        serializedName: \"caseSensitive\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      accentSensitive: {\n        serializedName: \"accentSensitive\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      fuzzyEditDistance: {\n        serializedName: \"fuzzyEditDistance\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      defaultCaseSensitive: {\n        serializedName: \"defaultCaseSensitive\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      defaultAccentSensitive: {\n        serializedName: \"defaultAccentSensitive\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      defaultFuzzyEditDistance: {\n        serializedName: \"defaultFuzzyEditDistance\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      aliases: {\n        serializedName: \"aliases\",\n        nullable: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CustomEntityAlias\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntityAlias: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntityAlias\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      caseSensitive: {\n        serializedName: \"caseSensitive\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      accentSensitive: {\n        serializedName: \"accentSensitive\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      fuzzyEditDistance: {\n        serializedName: \"fuzzyEditDistance\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const HighWaterMarkChangeDetectionPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"HighWaterMarkChangeDetectionPolicy\",\n    uberParent: \"DataChangeDetectionPolicy\",\n    polymorphicDiscriminator:\n      DataChangeDetectionPolicy.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...DataChangeDetectionPolicy.type.modelProperties,\n      highWaterMarkColumnName: {\n        serializedName: \"highWaterMarkColumnName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SqlIntegratedChangeTrackingPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"SqlIntegratedChangeTrackingPolicy\",\n    uberParent: \"DataChangeDetectionPolicy\",\n    polymorphicDiscriminator:\n      DataChangeDetectionPolicy.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...DataChangeDetectionPolicy.type.modelProperties\n    }\n  }\n};\n\nexport const SoftDeleteColumnDeletionDetectionPolicy: coreHttp.CompositeMapper = {\n  serializedName:\n    \"#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"SoftDeleteColumnDeletionDetectionPolicy\",\n    uberParent: \"DataDeletionDetectionPolicy\",\n    polymorphicDiscriminator:\n      DataDeletionDetectionPolicy.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...DataDeletionDetectionPolicy.type.modelProperties,\n      softDeleteColumnName: {\n        serializedName: \"softDeleteColumnName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      softDeleteMarkerValue: {\n        serializedName: \"softDeleteMarkerValue\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ConditionalSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Util.ConditionalSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"ConditionalSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties\n    }\n  }\n};\n\nexport const KeyPhraseExtractionSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Text.KeyPhraseExtractionSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseExtractionSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      defaultLanguageCode: {\n        serializedName: \"defaultLanguageCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxKeyPhraseCount: {\n        serializedName: \"maxKeyPhraseCount\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OcrSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Vision.OcrSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"OcrSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      defaultLanguageCode: {\n        serializedName: \"defaultLanguageCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      shouldDetectOrientation: {\n        serializedName: \"detectOrientation\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageAnalysisSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Vision.ImageAnalysisSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageAnalysisSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      defaultLanguageCode: {\n        serializedName: \"defaultLanguageCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      visualFeatures: {\n        serializedName: \"visualFeatures\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageDetectionSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Text.LanguageDetectionSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageDetectionSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      defaultCountryHint: {\n        serializedName: \"defaultCountryHint\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShaperSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Util.ShaperSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"ShaperSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties\n    }\n  }\n};\n\nexport const MergeSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Text.MergeSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"MergeSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      insertPreTag: {\n        defaultValue: \" \",\n        serializedName: \"insertPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      insertPostTag: {\n        defaultValue: \" \",\n        serializedName: \"insertPostTag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityRecognitionSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Text.EntityRecognitionSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"EntityRecognitionSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      categories: {\n        serializedName: \"categories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      defaultLanguageCode: {\n        serializedName: \"defaultLanguageCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      includeTypelessEntities: {\n        serializedName: \"includeTypelessEntities\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      minimumPrecision: {\n        serializedName: \"minimumPrecision\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Text.SentimentSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"SentimentSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      defaultLanguageCode: {\n        serializedName: \"defaultLanguageCode\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SplitSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Text.SplitSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"SplitSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      defaultLanguageCode: {\n        serializedName: \"defaultLanguageCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      textSplitMode: {\n        serializedName: \"textSplitMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxPageLength: {\n        serializedName: \"maximumPageLength\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntityLookupSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Text.CustomEntityLookupSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntityLookupSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      defaultLanguageCode: {\n        serializedName: \"defaultLanguageCode\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entitiesDefinitionUri: {\n        serializedName: \"entitiesDefinitionUri\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      inlineEntitiesDefinition: {\n        serializedName: \"inlineEntitiesDefinition\",\n        nullable: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CustomEntity\"\n            }\n          }\n        }\n      },\n      globalDefaultCaseSensitive: {\n        serializedName: \"globalDefaultCaseSensitive\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      globalDefaultAccentSensitive: {\n        serializedName: \"globalDefaultAccentSensitive\",\n        nullable: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      globalDefaultFuzzyEditDistance: {\n        serializedName: \"globalDefaultFuzzyEditDistance\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextTranslationSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Text.TranslationSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"TextTranslationSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      defaultToLanguageCode: {\n        serializedName: \"defaultToLanguageCode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      defaultFromLanguageCode: {\n        serializedName: \"defaultFromLanguageCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      suggestedFrom: {\n        serializedName: \"suggestedFrom\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentExtractionSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Util.DocumentExtractionSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentExtractionSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      parsingMode: {\n        serializedName: \"parsingMode\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      dataToExtract: {\n        serializedName: \"dataToExtract\",\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      configuration: {\n        serializedName: \"configuration\",\n        nullable: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const WebApiSkill: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Skills.Custom.WebApiSkill\",\n  type: {\n    name: \"Composite\",\n    className: \"WebApiSkill\",\n    uberParent: \"SearchIndexerSkill\",\n    polymorphicDiscriminator: SearchIndexerSkill.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...SearchIndexerSkill.type.modelProperties,\n      uri: {\n        serializedName: \"uri\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      httpHeaders: {\n        serializedName: \"httpHeaders\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      httpMethod: {\n        serializedName: \"httpMethod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timeout: {\n        serializedName: \"timeout\",\n        type: {\n          name: \"TimeSpan\"\n        }\n      },\n      batchSize: {\n        serializedName: \"batchSize\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      degreeOfParallelism: {\n        serializedName: \"degreeOfParallelism\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DefaultCognitiveServicesAccount: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.DefaultCognitiveServices\",\n  type: {\n    name: \"Composite\",\n    className: \"DefaultCognitiveServicesAccount\",\n    uberParent: \"CognitiveServicesAccount\",\n    polymorphicDiscriminator:\n      CognitiveServicesAccount.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...CognitiveServicesAccount.type.modelProperties\n    }\n  }\n};\n\nexport const CognitiveServicesAccountKey: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.CognitiveServicesByKey\",\n  type: {\n    name: \"Composite\",\n    className: \"CognitiveServicesAccountKey\",\n    uberParent: \"CognitiveServicesAccount\",\n    polymorphicDiscriminator:\n      CognitiveServicesAccount.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...CognitiveServicesAccount.type.modelProperties,\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerKnowledgeStoreTableProjectionSelector: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerKnowledgeStoreTableProjectionSelector\",\n    modelProperties: {\n      ...SearchIndexerKnowledgeStoreProjectionSelector.type.modelProperties,\n      tableName: {\n        serializedName: \"tableName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerKnowledgeStoreBlobProjectionSelector: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerKnowledgeStoreBlobProjectionSelector\",\n    modelProperties: {\n      ...SearchIndexerKnowledgeStoreProjectionSelector.type.modelProperties,\n      storageContainer: {\n        serializedName: \"storageContainer\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DistanceScoringFunction: coreHttp.CompositeMapper = {\n  serializedName: \"distance\",\n  type: {\n    name: \"Composite\",\n    className: \"DistanceScoringFunction\",\n    uberParent: \"ScoringFunction\",\n    polymorphicDiscriminator: ScoringFunction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...ScoringFunction.type.modelProperties,\n      parameters: {\n        serializedName: \"distance\",\n        type: {\n          name: \"Composite\",\n          className: \"DistanceScoringParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const FreshnessScoringFunction: coreHttp.CompositeMapper = {\n  serializedName: \"freshness\",\n  type: {\n    name: \"Composite\",\n    className: \"FreshnessScoringFunction\",\n    uberParent: \"ScoringFunction\",\n    polymorphicDiscriminator: ScoringFunction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...ScoringFunction.type.modelProperties,\n      parameters: {\n        serializedName: \"freshness\",\n        type: {\n          name: \"Composite\",\n          className: \"FreshnessScoringParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const MagnitudeScoringFunction: coreHttp.CompositeMapper = {\n  serializedName: \"magnitude\",\n  type: {\n    name: \"Composite\",\n    className: \"MagnitudeScoringFunction\",\n    uberParent: \"ScoringFunction\",\n    polymorphicDiscriminator: ScoringFunction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...ScoringFunction.type.modelProperties,\n      parameters: {\n        serializedName: \"magnitude\",\n        type: {\n          name: \"Composite\",\n          className: \"MagnitudeScoringParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const TagScoringFunction: coreHttp.CompositeMapper = {\n  serializedName: \"tag\",\n  type: {\n    name: \"Composite\",\n    className: \"TagScoringFunction\",\n    uberParent: \"ScoringFunction\",\n    polymorphicDiscriminator: ScoringFunction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...ScoringFunction.type.modelProperties,\n      parameters: {\n        serializedName: \"tag\",\n        type: {\n          name: \"Composite\",\n          className: \"TagScoringParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomAnalyzer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.CustomAnalyzer\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomAnalyzer\",\n    uberParent: \"LexicalAnalyzer\",\n    polymorphicDiscriminator: LexicalAnalyzer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalAnalyzer.type.modelProperties,\n      tokenizerName: {\n        serializedName: \"tokenizer\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tokenFilters: {\n        serializedName: \"tokenFilters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      charFilters: {\n        serializedName: \"charFilters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PatternAnalyzer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.PatternAnalyzer\",\n  type: {\n    name: \"Composite\",\n    className: \"PatternAnalyzer\",\n    uberParent: \"LexicalAnalyzer\",\n    polymorphicDiscriminator: LexicalAnalyzer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalAnalyzer.type.modelProperties,\n      lowerCaseTerms: {\n        defaultValue: true,\n        serializedName: \"lowercase\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      pattern: {\n        defaultValue: \"W+\",\n        serializedName: \"pattern\",\n        type: {\n          name: \"String\"\n        }\n      },\n      flags: {\n        serializedName: \"flags\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stopwords: {\n        serializedName: \"stopwords\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const LuceneStandardAnalyzer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.StandardAnalyzer\",\n  type: {\n    name: \"Composite\",\n    className: \"LuceneStandardAnalyzer\",\n    uberParent: \"LexicalAnalyzer\",\n    polymorphicDiscriminator: LexicalAnalyzer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalAnalyzer.type.modelProperties,\n      maxTokenLength: {\n        defaultValue: 255,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxTokenLength\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      stopwords: {\n        serializedName: \"stopwords\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StopAnalyzer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.StopAnalyzer\",\n  type: {\n    name: \"Composite\",\n    className: \"StopAnalyzer\",\n    uberParent: \"LexicalAnalyzer\",\n    polymorphicDiscriminator: LexicalAnalyzer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalAnalyzer.type.modelProperties,\n      stopwords: {\n        serializedName: \"stopwords\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ClassicTokenizer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.ClassicTokenizer\",\n  type: {\n    name: \"Composite\",\n    className: \"ClassicTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      maxTokenLength: {\n        defaultValue: 255,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxTokenLength\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const EdgeNGramTokenizer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.EdgeNGramTokenizer\",\n  type: {\n    name: \"Composite\",\n    className: \"EdgeNGramTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      minGram: {\n        defaultValue: 1,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"minGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxGram: {\n        defaultValue: 2,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      tokenChars: {\n        serializedName: \"tokenChars\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Enum\",\n              allowedValues: [\n                \"letter\",\n                \"digit\",\n                \"whitespace\",\n                \"punctuation\",\n                \"symbol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeywordTokenizer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.KeywordTokenizer\",\n  type: {\n    name: \"Composite\",\n    className: \"KeywordTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      bufferSize: {\n        defaultValue: 256,\n        serializedName: \"bufferSize\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeywordTokenizerV2: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.KeywordTokenizerV2\",\n  type: {\n    name: \"Composite\",\n    className: \"KeywordTokenizerV2\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      maxTokenLength: {\n        defaultValue: 256,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxTokenLength\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const MicrosoftLanguageTokenizer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.MicrosoftLanguageTokenizer\",\n  type: {\n    name: \"Composite\",\n    className: \"MicrosoftLanguageTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      maxTokenLength: {\n        defaultValue: 255,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxTokenLength\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isSearchTokenizer: {\n        serializedName: \"isSearchTokenizer\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"bangla\",\n            \"bulgarian\",\n            \"catalan\",\n            \"chineseSimplified\",\n            \"chineseTraditional\",\n            \"croatian\",\n            \"czech\",\n            \"danish\",\n            \"dutch\",\n            \"english\",\n            \"french\",\n            \"german\",\n            \"greek\",\n            \"gujarati\",\n            \"hindi\",\n            \"icelandic\",\n            \"indonesian\",\n            \"italian\",\n            \"japanese\",\n            \"kannada\",\n            \"korean\",\n            \"malay\",\n            \"malayalam\",\n            \"marathi\",\n            \"norwegianBokmaal\",\n            \"polish\",\n            \"portuguese\",\n            \"portugueseBrazilian\",\n            \"punjabi\",\n            \"romanian\",\n            \"russian\",\n            \"serbianCyrillic\",\n            \"serbianLatin\",\n            \"slovenian\",\n            \"spanish\",\n            \"swedish\",\n            \"tamil\",\n            \"telugu\",\n            \"thai\",\n            \"ukrainian\",\n            \"urdu\",\n            \"vietnamese\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const MicrosoftLanguageStemmingTokenizer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.MicrosoftLanguageStemmingTokenizer\",\n  type: {\n    name: \"Composite\",\n    className: \"MicrosoftLanguageStemmingTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      maxTokenLength: {\n        defaultValue: 255,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxTokenLength\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isSearchTokenizer: {\n        serializedName: \"isSearchTokenizer\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"arabic\",\n            \"bangla\",\n            \"bulgarian\",\n            \"catalan\",\n            \"croatian\",\n            \"czech\",\n            \"danish\",\n            \"dutch\",\n            \"english\",\n            \"estonian\",\n            \"finnish\",\n            \"french\",\n            \"german\",\n            \"greek\",\n            \"gujarati\",\n            \"hebrew\",\n            \"hindi\",\n            \"hungarian\",\n            \"icelandic\",\n            \"indonesian\",\n            \"italian\",\n            \"kannada\",\n            \"latvian\",\n            \"lithuanian\",\n            \"malay\",\n            \"malayalam\",\n            \"marathi\",\n            \"norwegianBokmaal\",\n            \"polish\",\n            \"portuguese\",\n            \"portugueseBrazilian\",\n            \"punjabi\",\n            \"romanian\",\n            \"russian\",\n            \"serbianCyrillic\",\n            \"serbianLatin\",\n            \"slovak\",\n            \"slovenian\",\n            \"spanish\",\n            \"swedish\",\n            \"tamil\",\n            \"telugu\",\n            \"turkish\",\n            \"ukrainian\",\n            \"urdu\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const NGramTokenizer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.NGramTokenizer\",\n  type: {\n    name: \"Composite\",\n    className: \"NGramTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      minGram: {\n        defaultValue: 1,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"minGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxGram: {\n        defaultValue: 2,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      tokenChars: {\n        serializedName: \"tokenChars\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Enum\",\n              allowedValues: [\n                \"letter\",\n                \"digit\",\n                \"whitespace\",\n                \"punctuation\",\n                \"symbol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PathHierarchyTokenizerV2: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.PathHierarchyTokenizerV2\",\n  type: {\n    name: \"Composite\",\n    className: \"PathHierarchyTokenizerV2\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      delimiter: {\n        defaultValue: \"/\",\n        serializedName: \"delimiter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      replacement: {\n        defaultValue: \"/\",\n        serializedName: \"replacement\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxTokenLength: {\n        defaultValue: 300,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxTokenLength\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      reverseTokenOrder: {\n        serializedName: \"reverse\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      numberOfTokensToSkip: {\n        serializedName: \"skip\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PatternTokenizer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.PatternTokenizer\",\n  type: {\n    name: \"Composite\",\n    className: \"PatternTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      pattern: {\n        defaultValue: \"W+\",\n        serializedName: \"pattern\",\n        type: {\n          name: \"String\"\n        }\n      },\n      flags: {\n        serializedName: \"flags\",\n        type: {\n          name: \"String\"\n        }\n      },\n      group: {\n        defaultValue: -1,\n        serializedName: \"group\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const LuceneStandardTokenizer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.StandardTokenizer\",\n  type: {\n    name: \"Composite\",\n    className: \"LuceneStandardTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      maxTokenLength: {\n        defaultValue: 255,\n        serializedName: \"maxTokenLength\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const LuceneStandardTokenizerV2: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.StandardTokenizerV2\",\n  type: {\n    name: \"Composite\",\n    className: \"LuceneStandardTokenizerV2\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      maxTokenLength: {\n        defaultValue: 255,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxTokenLength\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const UaxUrlEmailTokenizer: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.UaxUrlEmailTokenizer\",\n  type: {\n    name: \"Composite\",\n    className: \"UaxUrlEmailTokenizer\",\n    uberParent: \"LexicalTokenizer\",\n    polymorphicDiscriminator: LexicalTokenizer.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...LexicalTokenizer.type.modelProperties,\n      maxTokenLength: {\n        defaultValue: 255,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxTokenLength\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AsciiFoldingTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.AsciiFoldingTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"AsciiFoldingTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      preserveOriginal: {\n        serializedName: \"preserveOriginal\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CjkBigramTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.CjkBigramTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"CjkBigramTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      ignoreScripts: {\n        serializedName: \"ignoreScripts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Enum\",\n              allowedValues: [\"han\", \"hiragana\", \"katakana\", \"hangul\"]\n            }\n          }\n        }\n      },\n      outputUnigrams: {\n        serializedName: \"outputUnigrams\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommonGramTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.CommonGramTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"CommonGramTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      commonWords: {\n        serializedName: \"commonWords\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      ignoreCase: {\n        serializedName: \"ignoreCase\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      useQueryMode: {\n        serializedName: \"queryMode\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DictionaryDecompounderTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"DictionaryDecompounderTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      wordList: {\n        serializedName: \"wordList\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      minWordSize: {\n        defaultValue: 5,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"minWordSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      minSubwordSize: {\n        defaultValue: 2,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"minSubwordSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxSubwordSize: {\n        defaultValue: 15,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxSubwordSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      onlyLongestMatch: {\n        serializedName: \"onlyLongestMatch\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const EdgeNGramTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.EdgeNGramTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"EdgeNGramTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      minGram: {\n        defaultValue: 1,\n        serializedName: \"minGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxGram: {\n        defaultValue: 2,\n        serializedName: \"maxGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      side: {\n        serializedName: \"side\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"front\", \"back\"]\n        }\n      }\n    }\n  }\n};\n\nexport const EdgeNGramTokenFilterV2: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.EdgeNGramTokenFilterV2\",\n  type: {\n    name: \"Composite\",\n    className: \"EdgeNGramTokenFilterV2\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      minGram: {\n        defaultValue: 1,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"minGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxGram: {\n        defaultValue: 2,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      side: {\n        serializedName: \"side\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"front\", \"back\"]\n        }\n      }\n    }\n  }\n};\n\nexport const ElisionTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.ElisionTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"ElisionTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      articles: {\n        serializedName: \"articles\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeepTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.KeepTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"KeepTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      keepWords: {\n        serializedName: \"keepWords\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      lowerCaseKeepWords: {\n        serializedName: \"keepWordsCase\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeywordMarkerTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.KeywordMarkerTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"KeywordMarkerTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      keywords: {\n        serializedName: \"keywords\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      ignoreCase: {\n        serializedName: \"ignoreCase\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const LengthTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.LengthTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"LengthTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      minLength: {\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"min\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxLength: {\n        defaultValue: 300,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"max\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const LimitTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.LimitTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"LimitTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      maxTokenCount: {\n        defaultValue: 1,\n        serializedName: \"maxTokenCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      consumeAllTokens: {\n        serializedName: \"consumeAllTokens\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const NGramTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.NGramTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"NGramTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      minGram: {\n        defaultValue: 1,\n        serializedName: \"minGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxGram: {\n        defaultValue: 2,\n        serializedName: \"maxGram\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const NGramTokenFilterV2: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.NGramTokenFilterV2\",\n  type: {\n    name: \"Composite\",\n    className: \"NGramTokenFilterV2\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      minGram: {\n        defaultValue: 1,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"minGram\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxGram: {\n        defaultValue: 2,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"maxGram\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PatternCaptureTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.PatternCaptureTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"PatternCaptureTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      patterns: {\n        serializedName: \"patterns\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      preserveOriginal: {\n        defaultValue: true,\n        serializedName: \"preserveOriginal\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const PatternReplaceTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.PatternReplaceTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"PatternReplaceTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      pattern: {\n        serializedName: \"pattern\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      replacement: {\n        serializedName: \"replacement\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PhoneticTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.PhoneticTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"PhoneticTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      encoder: {\n        serializedName: \"encoder\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"metaphone\",\n            \"doubleMetaphone\",\n            \"soundex\",\n            \"refinedSoundex\",\n            \"caverphone1\",\n            \"caverphone2\",\n            \"cologne\",\n            \"nysiis\",\n            \"koelnerPhonetik\",\n            \"haasePhonetik\",\n            \"beiderMorse\"\n          ]\n        }\n      },\n      replaceOriginalTokens: {\n        defaultValue: true,\n        serializedName: \"replace\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShingleTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.ShingleTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"ShingleTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      maxShingleSize: {\n        defaultValue: 2,\n        constraints: {\n          InclusiveMinimum: 2\n        },\n        serializedName: \"maxShingleSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      minShingleSize: {\n        defaultValue: 2,\n        constraints: {\n          InclusiveMinimum: 2\n        },\n        serializedName: \"minShingleSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      outputUnigrams: {\n        defaultValue: true,\n        serializedName: \"outputUnigrams\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      outputUnigramsIfNoShingles: {\n        serializedName: \"outputUnigramsIfNoShingles\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      tokenSeparator: {\n        defaultValue: \" \",\n        serializedName: \"tokenSeparator\",\n        type: {\n          name: \"String\"\n        }\n      },\n      filterToken: {\n        defaultValue: \"_\",\n        serializedName: \"filterToken\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SnowballTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.SnowballTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"SnowballTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      language: {\n        serializedName: \"language\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"armenian\",\n            \"basque\",\n            \"catalan\",\n            \"danish\",\n            \"dutch\",\n            \"english\",\n            \"finnish\",\n            \"french\",\n            \"german\",\n            \"german2\",\n            \"hungarian\",\n            \"italian\",\n            \"kp\",\n            \"lovins\",\n            \"norwegian\",\n            \"porter\",\n            \"portuguese\",\n            \"romanian\",\n            \"russian\",\n            \"spanish\",\n            \"swedish\",\n            \"turkish\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const StemmerTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.StemmerTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"StemmerTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      language: {\n        serializedName: \"language\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"arabic\",\n            \"armenian\",\n            \"basque\",\n            \"brazilian\",\n            \"bulgarian\",\n            \"catalan\",\n            \"czech\",\n            \"danish\",\n            \"dutch\",\n            \"dutchKp\",\n            \"english\",\n            \"lightEnglish\",\n            \"minimalEnglish\",\n            \"possessiveEnglish\",\n            \"porter2\",\n            \"lovins\",\n            \"finnish\",\n            \"lightFinnish\",\n            \"french\",\n            \"lightFrench\",\n            \"minimalFrench\",\n            \"galician\",\n            \"minimalGalician\",\n            \"german\",\n            \"german2\",\n            \"lightGerman\",\n            \"minimalGerman\",\n            \"greek\",\n            \"hindi\",\n            \"hungarian\",\n            \"lightHungarian\",\n            \"indonesian\",\n            \"irish\",\n            \"italian\",\n            \"lightItalian\",\n            \"sorani\",\n            \"latvian\",\n            \"norwegian\",\n            \"lightNorwegian\",\n            \"minimalNorwegian\",\n            \"lightNynorsk\",\n            \"minimalNynorsk\",\n            \"portuguese\",\n            \"lightPortuguese\",\n            \"minimalPortuguese\",\n            \"portugueseRslp\",\n            \"romanian\",\n            \"russian\",\n            \"lightRussian\",\n            \"spanish\",\n            \"lightSpanish\",\n            \"swedish\",\n            \"lightSwedish\",\n            \"turkish\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const StemmerOverrideTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.StemmerOverrideTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"StemmerOverrideTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      rules: {\n        serializedName: \"rules\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StopwordsTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.StopwordsTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"StopwordsTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      stopwords: {\n        serializedName: \"stopwords\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      stopwordsList: {\n        serializedName: \"stopwordsList\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"arabic\",\n            \"armenian\",\n            \"basque\",\n            \"brazilian\",\n            \"bulgarian\",\n            \"catalan\",\n            \"czech\",\n            \"danish\",\n            \"dutch\",\n            \"english\",\n            \"finnish\",\n            \"french\",\n            \"galician\",\n            \"german\",\n            \"greek\",\n            \"hindi\",\n            \"hungarian\",\n            \"indonesian\",\n            \"irish\",\n            \"italian\",\n            \"latvian\",\n            \"norwegian\",\n            \"persian\",\n            \"portuguese\",\n            \"romanian\",\n            \"russian\",\n            \"sorani\",\n            \"spanish\",\n            \"swedish\",\n            \"thai\",\n            \"turkish\"\n          ]\n        }\n      },\n      ignoreCase: {\n        serializedName: \"ignoreCase\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      removeTrailingStopWords: {\n        defaultValue: true,\n        serializedName: \"removeTrailing\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const SynonymTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.SynonymTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"SynonymTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      synonyms: {\n        serializedName: \"synonyms\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      ignoreCase: {\n        serializedName: \"ignoreCase\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      expand: {\n        defaultValue: true,\n        serializedName: \"expand\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const TruncateTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.TruncateTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"TruncateTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      length: {\n        defaultValue: 300,\n        constraints: {\n          InclusiveMaximum: 300\n        },\n        serializedName: \"length\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const UniqueTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.UniqueTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"UniqueTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      onlyOnSamePosition: {\n        serializedName: \"onlyOnSamePosition\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const WordDelimiterTokenFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.WordDelimiterTokenFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"WordDelimiterTokenFilter\",\n    uberParent: \"TokenFilter\",\n    polymorphicDiscriminator: TokenFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TokenFilter.type.modelProperties,\n      generateWordParts: {\n        defaultValue: true,\n        serializedName: \"generateWordParts\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      generateNumberParts: {\n        defaultValue: true,\n        serializedName: \"generateNumberParts\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      catenateWords: {\n        serializedName: \"catenateWords\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      catenateNumbers: {\n        serializedName: \"catenateNumbers\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      catenateAll: {\n        serializedName: \"catenateAll\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      splitOnCaseChange: {\n        defaultValue: true,\n        serializedName: \"splitOnCaseChange\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      preserveOriginal: {\n        serializedName: \"preserveOriginal\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      splitOnNumerics: {\n        defaultValue: true,\n        serializedName: \"splitOnNumerics\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      stemEnglishPossessive: {\n        defaultValue: true,\n        serializedName: \"stemEnglishPossessive\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      protectedWords: {\n        serializedName: \"protectedWords\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MappingCharFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.MappingCharFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"MappingCharFilter\",\n    uberParent: \"CharFilter\",\n    polymorphicDiscriminator: CharFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...CharFilter.type.modelProperties,\n      mappings: {\n        serializedName: \"mappings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PatternReplaceCharFilter: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.PatternReplaceCharFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"PatternReplaceCharFilter\",\n    uberParent: \"CharFilter\",\n    polymorphicDiscriminator: CharFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...CharFilter.type.modelProperties,\n      pattern: {\n        serializedName: \"pattern\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      replacement: {\n        serializedName: \"replacement\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClassicSimilarity: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.ClassicSimilarity\",\n  type: {\n    name: \"Composite\",\n    className: \"ClassicSimilarity\",\n    uberParent: \"Similarity\",\n    polymorphicDiscriminator: Similarity.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...Similarity.type.modelProperties\n    }\n  }\n};\n\nexport const BM25Similarity: coreHttp.CompositeMapper = {\n  serializedName: \"#Microsoft.Azure.Search.BM25Similarity\",\n  type: {\n    name: \"Composite\",\n    className: \"BM25Similarity\",\n    uberParent: \"Similarity\",\n    polymorphicDiscriminator: Similarity.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...Similarity.type.modelProperties,\n      k1: {\n        serializedName: \"k1\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      b: {\n        serializedName: \"b\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchIndexerKnowledgeStoreObjectProjectionSelector: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerKnowledgeStoreObjectProjectionSelector\",\n    modelProperties: {\n      ...SearchIndexerKnowledgeStoreBlobProjectionSelector.type.modelProperties\n    }\n  }\n};\n\nexport const SearchIndexerKnowledgeStoreFileProjectionSelector: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchIndexerKnowledgeStoreFileProjectionSelector\",\n    modelProperties: {\n      ...SearchIndexerKnowledgeStoreBlobProjectionSelector.type.modelProperties\n    }\n  }\n};\n\nexport let discriminators = {\n  DataChangeDetectionPolicy: DataChangeDetectionPolicy,\n  DataDeletionDetectionPolicy: DataDeletionDetectionPolicy,\n  SearchIndexerSkill: SearchIndexerSkill,\n  CognitiveServicesAccount: CognitiveServicesAccount,\n  ScoringFunction: ScoringFunction,\n  LexicalAnalyzer: LexicalAnalyzer,\n  LexicalTokenizer: LexicalTokenizer,\n  TokenFilter: TokenFilter,\n  CharFilter: CharFilter,\n  Similarity: Similarity,\n  \"DataChangeDetectionPolicy.#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy\": HighWaterMarkChangeDetectionPolicy,\n  \"DataChangeDetectionPolicy.#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy\": SqlIntegratedChangeTrackingPolicy,\n  \"DataDeletionDetectionPolicy.#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy\": SoftDeleteColumnDeletionDetectionPolicy,\n  \"SearchIndexerSkill.#Microsoft.Skills.Util.ConditionalSkill\": ConditionalSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Text.KeyPhraseExtractionSkill\": KeyPhraseExtractionSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Vision.OcrSkill\": OcrSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Vision.ImageAnalysisSkill\": ImageAnalysisSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Text.LanguageDetectionSkill\": LanguageDetectionSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Util.ShaperSkill\": ShaperSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Text.MergeSkill\": MergeSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Text.EntityRecognitionSkill\": EntityRecognitionSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Text.SentimentSkill\": SentimentSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Text.SplitSkill\": SplitSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Text.CustomEntityLookupSkill\": CustomEntityLookupSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Text.TranslationSkill\": TextTranslationSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Util.DocumentExtractionSkill\": DocumentExtractionSkill,\n  \"SearchIndexerSkill.#Microsoft.Skills.Custom.WebApiSkill\": WebApiSkill,\n  \"CognitiveServicesAccount.#Microsoft.Azure.Search.DefaultCognitiveServices\": DefaultCognitiveServicesAccount,\n  \"CognitiveServicesAccount.#Microsoft.Azure.Search.CognitiveServicesByKey\": CognitiveServicesAccountKey,\n  \"ScoringFunction.distance\": DistanceScoringFunction,\n  \"ScoringFunction.freshness\": FreshnessScoringFunction,\n  \"ScoringFunction.magnitude\": MagnitudeScoringFunction,\n  \"ScoringFunction.tag\": TagScoringFunction,\n  \"LexicalAnalyzer.#Microsoft.Azure.Search.CustomAnalyzer\": CustomAnalyzer,\n  \"LexicalAnalyzer.#Microsoft.Azure.Search.PatternAnalyzer\": PatternAnalyzer,\n  \"LexicalAnalyzer.#Microsoft.Azure.Search.StandardAnalyzer\": LuceneStandardAnalyzer,\n  \"LexicalAnalyzer.#Microsoft.Azure.Search.StopAnalyzer\": StopAnalyzer,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.ClassicTokenizer\": ClassicTokenizer,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.EdgeNGramTokenizer\": EdgeNGramTokenizer,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.KeywordTokenizer\": KeywordTokenizer,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.KeywordTokenizerV2\": KeywordTokenizerV2,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.MicrosoftLanguageTokenizer\": MicrosoftLanguageTokenizer,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.MicrosoftLanguageStemmingTokenizer\": MicrosoftLanguageStemmingTokenizer,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.NGramTokenizer\": NGramTokenizer,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.PathHierarchyTokenizerV2\": PathHierarchyTokenizerV2,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.PatternTokenizer\": PatternTokenizer,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.StandardTokenizer\": LuceneStandardTokenizer,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.StandardTokenizerV2\": LuceneStandardTokenizerV2,\n  \"LexicalTokenizer.#Microsoft.Azure.Search.UaxUrlEmailTokenizer\": UaxUrlEmailTokenizer,\n  \"TokenFilter.#Microsoft.Azure.Search.AsciiFoldingTokenFilter\": AsciiFoldingTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.CjkBigramTokenFilter\": CjkBigramTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.CommonGramTokenFilter\": CommonGramTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter\": DictionaryDecompounderTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.EdgeNGramTokenFilter\": EdgeNGramTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.EdgeNGramTokenFilterV2\": EdgeNGramTokenFilterV2,\n  \"TokenFilter.#Microsoft.Azure.Search.ElisionTokenFilter\": ElisionTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.KeepTokenFilter\": KeepTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.KeywordMarkerTokenFilter\": KeywordMarkerTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.LengthTokenFilter\": LengthTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.LimitTokenFilter\": LimitTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.NGramTokenFilter\": NGramTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.NGramTokenFilterV2\": NGramTokenFilterV2,\n  \"TokenFilter.#Microsoft.Azure.Search.PatternCaptureTokenFilter\": PatternCaptureTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.PatternReplaceTokenFilter\": PatternReplaceTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.PhoneticTokenFilter\": PhoneticTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.ShingleTokenFilter\": ShingleTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.SnowballTokenFilter\": SnowballTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.StemmerTokenFilter\": StemmerTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.StemmerOverrideTokenFilter\": StemmerOverrideTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.StopwordsTokenFilter\": StopwordsTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.SynonymTokenFilter\": SynonymTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.TruncateTokenFilter\": TruncateTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.UniqueTokenFilter\": UniqueTokenFilter,\n  \"TokenFilter.#Microsoft.Azure.Search.WordDelimiterTokenFilter\": WordDelimiterTokenFilter,\n  \"CharFilter.#Microsoft.Azure.Search.MappingCharFilter\": MappingCharFilter,\n  \"CharFilter.#Microsoft.Azure.Search.PatternReplaceCharFilter\": PatternReplaceCharFilter,\n  \"Similarity.#Microsoft.Azure.Search.ClassicSimilarity\": ClassicSimilarity,\n  \"Similarity.#Microsoft.Azure.Search.BM25Similarity\": BM25Similarity\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-http\";\nimport {\n  SearchIndexerDataSource as SearchIndexerDataSourceMapper,\n  SearchIndexer as SearchIndexerMapper,\n  SearchIndexerSkillset as SearchIndexerSkillsetMapper,\n  SynonymMap as SynonymMapMapper,\n  SearchIndex as SearchIndexMapper,\n  AnalyzeRequest as AnalyzeRequestMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const dataSource: OperationParameter = {\n  parameterPath: \"dataSource\",\n  mapper: SearchIndexerDataSourceMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const dataSourceName: OperationURLParameter = {\n  parameterPath: \"dataSourceName\",\n  mapper: {\n    serializedName: \"dataSourceName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const xMsClientRequestId: OperationParameter = {\n  parameterPath: [\"options\", \"requestOptionsParam\", \"xMsClientRequestId\"],\n  mapper: {\n    serializedName: \"x-ms-client-request-id\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\n\nexport const ifMatch: OperationParameter = {\n  parameterPath: [\"options\", \"ifMatch\"],\n  mapper: {\n    serializedName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifNoneMatch: OperationParameter = {\n  parameterPath: [\"options\", \"ifNoneMatch\"],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const prefer: OperationParameter = {\n  parameterPath: \"prefer\",\n  mapper: {\n    defaultValue: \"return=representation\",\n    isConstant: true,\n    serializedName: \"Prefer\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    serializedName: \"api-version\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const select: OperationQueryParameter = {\n  parameterPath: [\"options\", \"select\"],\n  mapper: {\n    serializedName: \"$select\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const indexerName: OperationURLParameter = {\n  parameterPath: \"indexerName\",\n  mapper: {\n    serializedName: \"indexerName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const indexer: OperationParameter = {\n  parameterPath: \"indexer\",\n  mapper: SearchIndexerMapper\n};\n\nexport const skillset: OperationParameter = {\n  parameterPath: \"skillset\",\n  mapper: SearchIndexerSkillsetMapper\n};\n\nexport const skillsetName: OperationURLParameter = {\n  parameterPath: \"skillsetName\",\n  mapper: {\n    serializedName: \"skillsetName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const synonymMap: OperationParameter = {\n  parameterPath: \"synonymMap\",\n  mapper: SynonymMapMapper\n};\n\nexport const synonymMapName: OperationURLParameter = {\n  parameterPath: \"synonymMapName\",\n  mapper: {\n    serializedName: \"synonymMapName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const index: OperationParameter = {\n  parameterPath: \"index\",\n  mapper: SearchIndexMapper\n};\n\nexport const indexName: OperationURLParameter = {\n  parameterPath: \"indexName\",\n  mapper: {\n    serializedName: \"indexName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const allowIndexDowntime: OperationQueryParameter = {\n  parameterPath: [\"options\", \"allowIndexDowntime\"],\n  mapper: {\n    serializedName: \"allowIndexDowntime\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const request: OperationParameter = {\n  parameterPath: \"request\",\n  mapper: AnalyzeRequestMapper\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchServiceClient } from \"../searchServiceClient\";\nimport {\n  SearchIndexerDataSource,\n  DataSourcesCreateOrUpdateOptionalParams,\n  DataSourcesCreateOrUpdateResponse,\n  DataSourcesDeleteOptionalParams,\n  DataSourcesGetOptionalParams,\n  DataSourcesGetResponse,\n  DataSourcesListOptionalParams,\n  DataSourcesListResponse,\n  DataSourcesCreateOptionalParams,\n  DataSourcesCreateResponse\n} from \"../models\";\n\n/** Class representing a DataSources. */\nexport class DataSources {\n  private readonly client: SearchServiceClient;\n\n  /**\n   * Initialize a new instance of the class DataSources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SearchServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new datasource or updates a datasource if it already exists.\n   * @param dataSourceName The name of the datasource to create or update.\n   * @param dataSource The definition of the datasource to create or update.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    dataSourceName: string,\n    dataSource: SearchIndexerDataSource,\n    options?: DataSourcesCreateOrUpdateOptionalParams\n  ): Promise<DataSourcesCreateOrUpdateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      dataSourceName,\n      dataSource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOrUpdateOperationSpec\n    ) as Promise<DataSourcesCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Deletes a datasource.\n   * @param dataSourceName The name of the datasource to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    dataSourceName: string,\n    options?: DataSourcesDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      dataSourceName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Retrieves a datasource definition.\n   * @param dataSourceName The name of the datasource to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    dataSourceName: string,\n    options?: DataSourcesGetOptionalParams\n  ): Promise<DataSourcesGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      dataSourceName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getOperationSpec\n    ) as Promise<DataSourcesGetResponse>;\n  }\n\n  /**\n   * Lists all datasources available for a search service.\n   * @param options The options parameters.\n   */\n  list(\n    options?: DataSourcesListOptionalParams\n  ): Promise<DataSourcesListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listOperationSpec\n    ) as Promise<DataSourcesListResponse>;\n  }\n\n  /**\n   * Creates a new datasource.\n   * @param dataSource The definition of the datasource to create.\n   * @param options The options parameters.\n   */\n  create(\n    dataSource: SearchIndexerDataSource,\n    options?: DataSourcesCreateOptionalParams\n  ): Promise<DataSourcesCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      dataSource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<DataSourcesCreateResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOrUpdateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/datasources('{dataSourceName}')\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexerDataSource\n    },\n    201: {\n      bodyMapper: Mappers.SearchIndexerDataSource\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.dataSource,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.dataSourceName],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/datasources('{dataSourceName}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.dataSourceName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst getOperationSpec: coreHttp.OperationSpec = {\n  path: \"/datasources('{dataSourceName}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexerDataSource\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.dataSourceName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst listOperationSpec: coreHttp.OperationSpec = {\n  path: \"/datasources\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListDataSourcesResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.select],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/datasources\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SearchIndexerDataSource\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.dataSource,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId\n  ],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchServiceClient } from \"../searchServiceClient\";\nimport {\n  IndexersResetOptionalParams,\n  IndexersRunOptionalParams,\n  SearchIndexer,\n  IndexersCreateOrUpdateOptionalParams,\n  IndexersCreateOrUpdateResponse,\n  IndexersDeleteOptionalParams,\n  IndexersGetOptionalParams,\n  IndexersGetResponse,\n  IndexersListOptionalParams,\n  IndexersListResponse,\n  IndexersCreateOptionalParams,\n  IndexersCreateResponse,\n  IndexersGetStatusOptionalParams,\n  IndexersGetStatusResponse\n} from \"../models\";\n\n/** Class representing a Indexers. */\nexport class Indexers {\n  private readonly client: SearchServiceClient;\n\n  /**\n   * Initialize a new instance of the class Indexers class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SearchServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Resets the change tracking state associated with an indexer.\n   * @param indexerName The name of the indexer to reset.\n   * @param options The options parameters.\n   */\n  reset(\n    indexerName: string,\n    options?: IndexersResetOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexerName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      resetOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Runs an indexer on-demand.\n   * @param indexerName The name of the indexer to run.\n   * @param options The options parameters.\n   */\n  run(\n    indexerName: string,\n    options?: IndexersRunOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexerName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      runOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Creates a new indexer or updates an indexer if it already exists.\n   * @param indexerName The name of the indexer to create or update.\n   * @param indexer The definition of the indexer to create or update.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    indexerName: string,\n    indexer: SearchIndexer,\n    options?: IndexersCreateOrUpdateOptionalParams\n  ): Promise<IndexersCreateOrUpdateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexerName,\n      indexer,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOrUpdateOperationSpec\n    ) as Promise<IndexersCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Deletes an indexer.\n   * @param indexerName The name of the indexer to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    indexerName: string,\n    options?: IndexersDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexerName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Retrieves an indexer definition.\n   * @param indexerName The name of the indexer to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    indexerName: string,\n    options?: IndexersGetOptionalParams\n  ): Promise<IndexersGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexerName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getOperationSpec\n    ) as Promise<IndexersGetResponse>;\n  }\n\n  /**\n   * Lists all indexers available for a search service.\n   * @param options The options parameters.\n   */\n  list(options?: IndexersListOptionalParams): Promise<IndexersListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listOperationSpec\n    ) as Promise<IndexersListResponse>;\n  }\n\n  /**\n   * Creates a new indexer.\n   * @param indexer The definition of the indexer to create.\n   * @param options The options parameters.\n   */\n  create(\n    indexer: SearchIndexer,\n    options?: IndexersCreateOptionalParams\n  ): Promise<IndexersCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexer,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<IndexersCreateResponse>;\n  }\n\n  /**\n   * Returns the current status and execution history of an indexer.\n   * @param indexerName The name of the indexer for which to retrieve status.\n   * @param options The options parameters.\n   */\n  getStatus(\n    indexerName: string,\n    options?: IndexersGetStatusOptionalParams\n  ): Promise<IndexersGetStatusResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexerName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getStatusOperationSpec\n    ) as Promise<IndexersGetStatusResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst resetOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexers('{indexerName}')/search.reset\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst runOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexers('{indexerName}')/search.run\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexers('{indexerName}')\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexer\n    },\n    201: {\n      bodyMapper: Mappers.SearchIndexer\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.indexer,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexers('{indexerName}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst getOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexers('{indexerName}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexer\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst listOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListIndexersResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.select],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexers\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SearchIndexer\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.indexer,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst getStatusOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexers('{indexerName}')/search.status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexerStatus\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchServiceClient } from \"../searchServiceClient\";\nimport {\n  SearchIndexerSkillset,\n  SkillsetsCreateOrUpdateOptionalParams,\n  SkillsetsCreateOrUpdateResponse,\n  SkillsetsDeleteOptionalParams,\n  SkillsetsGetOptionalParams,\n  SkillsetsGetResponse,\n  SkillsetsListOptionalParams,\n  SkillsetsListResponse,\n  SkillsetsCreateOptionalParams,\n  SkillsetsCreateResponse\n} from \"../models\";\n\n/** Class representing a Skillsets. */\nexport class Skillsets {\n  private readonly client: SearchServiceClient;\n\n  /**\n   * Initialize a new instance of the class Skillsets class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SearchServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new skillset in a search service or updates the skillset if it already exists.\n   * @param skillsetName The name of the skillset to create or update.\n   * @param skillset The skillset containing one or more skills to create or update in a search service.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    skillsetName: string,\n    skillset: SearchIndexerSkillset,\n    options?: SkillsetsCreateOrUpdateOptionalParams\n  ): Promise<SkillsetsCreateOrUpdateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      skillsetName,\n      skillset,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOrUpdateOperationSpec\n    ) as Promise<SkillsetsCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Deletes a skillset in a search service.\n   * @param skillsetName The name of the skillset to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    skillsetName: string,\n    options?: SkillsetsDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      skillsetName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Retrieves a skillset in a search service.\n   * @param skillsetName The name of the skillset to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    skillsetName: string,\n    options?: SkillsetsGetOptionalParams\n  ): Promise<SkillsetsGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      skillsetName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getOperationSpec\n    ) as Promise<SkillsetsGetResponse>;\n  }\n\n  /**\n   * List all skillsets in a search service.\n   * @param options The options parameters.\n   */\n  list(options?: SkillsetsListOptionalParams): Promise<SkillsetsListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listOperationSpec\n    ) as Promise<SkillsetsListResponse>;\n  }\n\n  /**\n   * Creates a new skillset in a search service.\n   * @param skillset The skillset containing one or more skills to create in a search service.\n   * @param options The options parameters.\n   */\n  create(\n    skillset: SearchIndexerSkillset,\n    options?: SkillsetsCreateOptionalParams\n  ): Promise<SkillsetsCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      skillset,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<SkillsetsCreateResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOrUpdateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/skillsets('{skillsetName}')\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexerSkillset\n    },\n    201: {\n      bodyMapper: Mappers.SearchIndexerSkillset\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.skillset,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.skillsetName],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/skillsets('{skillsetName}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.skillsetName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst getOperationSpec: coreHttp.OperationSpec = {\n  path: \"/skillsets('{skillsetName}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexerSkillset\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.skillsetName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst listOperationSpec: coreHttp.OperationSpec = {\n  path: \"/skillsets\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListSkillsetsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.select],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/skillsets\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SearchIndexerSkillset\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.skillset,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId\n  ],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchServiceClient } from \"../searchServiceClient\";\nimport {\n  SynonymMap,\n  SynonymMapsCreateOrUpdateOptionalParams,\n  SynonymMapsCreateOrUpdateResponse,\n  SynonymMapsDeleteOptionalParams,\n  SynonymMapsGetOptionalParams,\n  SynonymMapsGetResponse,\n  SynonymMapsListOptionalParams,\n  SynonymMapsListResponse,\n  SynonymMapsCreateOptionalParams,\n  SynonymMapsCreateResponse\n} from \"../models\";\n\n/** Class representing a SynonymMaps. */\nexport class SynonymMaps {\n  private readonly client: SearchServiceClient;\n\n  /**\n   * Initialize a new instance of the class SynonymMaps class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SearchServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new synonym map or updates a synonym map if it already exists.\n   * @param synonymMapName The name of the synonym map to create or update.\n   * @param synonymMap The definition of the synonym map to create or update.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    synonymMapName: string,\n    synonymMap: SynonymMap,\n    options?: SynonymMapsCreateOrUpdateOptionalParams\n  ): Promise<SynonymMapsCreateOrUpdateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      synonymMapName,\n      synonymMap,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOrUpdateOperationSpec\n    ) as Promise<SynonymMapsCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Deletes a synonym map.\n   * @param synonymMapName The name of the synonym map to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    synonymMapName: string,\n    options?: SynonymMapsDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      synonymMapName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Retrieves a synonym map definition.\n   * @param synonymMapName The name of the synonym map to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    synonymMapName: string,\n    options?: SynonymMapsGetOptionalParams\n  ): Promise<SynonymMapsGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      synonymMapName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getOperationSpec\n    ) as Promise<SynonymMapsGetResponse>;\n  }\n\n  /**\n   * Lists all synonym maps available for a search service.\n   * @param options The options parameters.\n   */\n  list(\n    options?: SynonymMapsListOptionalParams\n  ): Promise<SynonymMapsListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listOperationSpec\n    ) as Promise<SynonymMapsListResponse>;\n  }\n\n  /**\n   * Creates a new synonym map.\n   * @param synonymMap The definition of the synonym map to create.\n   * @param options The options parameters.\n   */\n  create(\n    synonymMap: SynonymMap,\n    options?: SynonymMapsCreateOptionalParams\n  ): Promise<SynonymMapsCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      synonymMap,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<SynonymMapsCreateResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOrUpdateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/synonymmaps('{synonymMapName}')\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    201: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.synonymMap,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.synonymMapName],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/synonymmaps('{synonymMapName}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.synonymMapName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst getOperationSpec: coreHttp.OperationSpec = {\n  path: \"/synonymmaps('{synonymMapName}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.synonymMapName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst listOperationSpec: coreHttp.OperationSpec = {\n  path: \"/synonymmaps\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListSynonymMapsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.select],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/synonymmaps\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.synonymMap,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId\n  ],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchServiceClient } from \"../searchServiceClient\";\nimport {\n  SearchIndex,\n  IndexesCreateOptionalParams,\n  IndexesCreateResponse,\n  IndexesListOptionalParams,\n  IndexesListResponse,\n  IndexesCreateOrUpdateOptionalParams,\n  IndexesCreateOrUpdateResponse,\n  IndexesDeleteOptionalParams,\n  IndexesGetOptionalParams,\n  IndexesGetResponse,\n  IndexesGetStatisticsOptionalParams,\n  IndexesGetStatisticsResponse,\n  AnalyzeRequest,\n  IndexesAnalyzeOptionalParams,\n  IndexesAnalyzeResponse\n} from \"../models\";\n\n/** Class representing a Indexes. */\nexport class Indexes {\n  private readonly client: SearchServiceClient;\n\n  /**\n   * Initialize a new instance of the class Indexes class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SearchServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new search index.\n   * @param index The definition of the index to create.\n   * @param options The options parameters.\n   */\n  create(\n    index: SearchIndex,\n    options?: IndexesCreateOptionalParams\n  ): Promise<IndexesCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      index,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<IndexesCreateResponse>;\n  }\n\n  /**\n   * Lists all indexes available for a search service.\n   * @param options The options parameters.\n   */\n  list(options?: IndexesListOptionalParams): Promise<IndexesListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listOperationSpec\n    ) as Promise<IndexesListResponse>;\n  }\n\n  /**\n   * Creates a new search index or updates an index if it already exists.\n   * @param indexName The definition of the index to create or update.\n   * @param index The definition of the index to create or update.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    indexName: string,\n    index: SearchIndex,\n    options?: IndexesCreateOrUpdateOptionalParams\n  ): Promise<IndexesCreateOrUpdateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexName,\n      index,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOrUpdateOperationSpec\n    ) as Promise<IndexesCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Deletes a search index and all the documents it contains. This operation is permanent, with no\n   * recovery option. Make sure you have a master copy of your index definition, data ingestion code, and\n   * a backup of the primary data source in case you need to re-build the index.\n   * @param indexName The name of the index to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    indexName: string,\n    options?: IndexesDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Retrieves an index definition.\n   * @param indexName The name of the index to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    indexName: string,\n    options?: IndexesGetOptionalParams\n  ): Promise<IndexesGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getOperationSpec\n    ) as Promise<IndexesGetResponse>;\n  }\n\n  /**\n   * Returns statistics for the given index, including a document count and storage usage.\n   * @param indexName The name of the index for which to retrieve statistics.\n   * @param options The options parameters.\n   */\n  getStatistics(\n    indexName: string,\n    options?: IndexesGetStatisticsOptionalParams\n  ): Promise<IndexesGetStatisticsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getStatisticsOperationSpec\n    ) as Promise<IndexesGetStatisticsResponse>;\n  }\n\n  /**\n   * Shows how an analyzer breaks text into tokens.\n   * @param indexName The name of the index for which to test an analyzer.\n   * @param request The text and analyzer or analysis components to test.\n   * @param options The options parameters.\n   */\n  analyze(\n    indexName: string,\n    request: AnalyzeRequest,\n    options?: IndexesAnalyzeOptionalParams\n  ): Promise<IndexesAnalyzeResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      indexName,\n      request,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      analyzeOperationSpec\n    ) as Promise<IndexesAnalyzeResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexes\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SearchIndex\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.index,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst listOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexes\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListIndexesResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.select],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexes('{indexName}')\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndex\n    },\n    201: {\n      bodyMapper: Mappers.SearchIndex\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.index,\n  queryParameters: [Parameters.apiVersion, Parameters.allowIndexDowntime],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexes('{indexName}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst getOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexes('{indexName}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndex\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst getStatisticsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexes('{indexName}')/search.stats\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetIndexStatisticsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst analyzeOperationSpec: coreHttp.OperationSpec = {\n  path: \"/indexes('{indexName}')/search.analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.request,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.xMsClientRequestId\n  ],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport {\n  ApiVersion20200630,\n  SearchServiceClientOptionalParams\n} from \"./models\";\n\nconst packageName = \"@azure/search-documents\";\nconst packageVersion = \"11.3.1\";\n\n/** @internal */\nexport class SearchServiceClientContext extends coreHttp.ServiceClient {\n  endpoint: string;\n  apiVersion: ApiVersion20200630;\n\n  /**\n   * Initializes a new instance of the SearchServiceClientContext class.\n   * @param endpoint The endpoint URL of the search service.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    endpoint: string,\n    apiVersion: ApiVersion20200630,\n    options?: SearchServiceClientOptionalParams\n  ) {\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n    if (apiVersion === undefined) {\n      throw new Error(\"'apiVersion' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri = options.endpoint || \"{endpoint}\";\n\n    // Parameter assignments\n    this.endpoint = endpoint;\n    this.apiVersion = apiVersion;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport {\n  DataSources,\n  Indexers,\n  Skillsets,\n  SynonymMaps,\n  Indexes\n} from \"./operations\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport { SearchServiceClientContext } from \"./searchServiceClientContext\";\nimport {\n  SearchServiceClientOptionalParams,\n  ApiVersion20200630,\n  SearchServiceClientGetServiceStatisticsOptionalParams,\n  SearchServiceClientGetServiceStatisticsResponse\n} from \"./models\";\n\n/** @internal */\nexport class SearchServiceClient extends SearchServiceClientContext {\n  /**\n   * Initializes a new instance of the SearchServiceClient class.\n   * @param endpoint The endpoint URL of the search service.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    endpoint: string,\n    apiVersion: ApiVersion20200630,\n    options?: SearchServiceClientOptionalParams\n  ) {\n    super(endpoint, apiVersion, options);\n    this.dataSources = new DataSources(this);\n    this.indexers = new Indexers(this);\n    this.skillsets = new Skillsets(this);\n    this.synonymMaps = new SynonymMaps(this);\n    this.indexes = new Indexes(this);\n  }\n\n  /**\n   * Gets service level statistics for a search service.\n   * @param options The options parameters.\n   */\n  getServiceStatistics(\n    options?: SearchServiceClientGetServiceStatisticsOptionalParams\n  ): Promise<SearchServiceClientGetServiceStatisticsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getServiceStatisticsOperationSpec\n    ) as Promise<SearchServiceClientGetServiceStatisticsResponse>;\n  }\n\n  dataSources: DataSources;\n  indexers: Indexers;\n  skillsets: Skillsets;\n  synonymMaps: SynonymMaps;\n  indexes: Indexes;\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst getServiceStatisticsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/servicestats\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ServiceStatistics\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  createPipelineFromOptions,\n  InternalPipelineOptions,\n  operationOptionsToRequestOptionsBase,\n  PipelineOptions,\n  RequestPolicyFactory,\n  bearerTokenAuthenticationPolicy\n} from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"./constants\";\nimport { AnalyzeResult } from \"./generated/service/models\";\nimport { SearchServiceClient as GeneratedClient } from \"./generated/service/searchServiceClient\";\nimport { logger } from \"./logger\";\nimport { createSearchApiKeyCredentialPolicy } from \"./searchApiKeyCredentialPolicy\";\nimport {\n  AnalyzeTextOptions,\n  CreateIndexOptions,\n  CreateOrUpdateIndexOptions,\n  CreateOrUpdateSynonymMapOptions,\n  CreateSynonymMapOptions,\n  DeleteIndexOptions,\n  DeleteSynonymMapOptions,\n  GetIndexOptions,\n  GetIndexStatisticsOptions,\n  GetSynonymMapsOptions,\n  SearchIndex,\n  ListIndexesOptions,\n  ListSynonymMapsOptions,\n  SynonymMap,\n  GetServiceStatisticsOptions,\n  IndexIterator,\n  IndexNameIterator,\n  SearchIndexStatistics,\n  SearchServiceStatistics\n} from \"./serviceModels\";\nimport * as utils from \"./serviceUtils\";\nimport { createSpan } from \"./tracing\";\nimport { odataMetadataPolicy } from \"./odataMetadataPolicy\";\nimport { SearchClient, SearchClientOptions as GetSearchClientOptions } from \"./searchClient\";\nimport { KnownSearchAudience } from \"./searchAudience\";\n\n/**\n * Client options used to configure Cognitive Search API requests.\n */\nexport interface SearchIndexClientOptions extends PipelineOptions {\n  /**\n   * The API version to use when communicating with the service.\n   */\n  apiVersion?: string;\n\n  /**\n   * The Audience to use for authentication with Azure Active Directory (AAD). The\n   * audience is not considered when using a shared key.\n   * {@link KnownSearchAudience} can be used interchangeably with audience\n   */\n  audience?: string;\n}\n\n/**\n * Class to perform operations to manage\n * (create, update, list/delete)\n * indexes, & synonymmaps.\n */\nexport class SearchIndexClient {\n  /**\n   * The API version to use when communicating with the service.\n   */\n  public readonly apiVersion: string = \"2020-06-30\";\n\n  /**\n   * The endpoint of the search service\n   */\n  public readonly endpoint: string;\n\n  /**\n   * @internal\n   * @hidden\n   * A reference to the auto-generated SearchServiceClient\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Used to authenticate requests to the service.\n   */\n  private readonly credential: KeyCredential | TokenCredential;\n\n  /**\n   * Used to configure the Search Index client.\n   */\n  private readonly options: SearchIndexClientOptions;\n\n  /**\n   * Creates an instance of SearchIndexClient.\n   *\n   * Example usage:\n   * ```ts\n   * const { SearchIndexClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n   *\n   * const client = new SearchIndexClient(\n   *   \"<endpoint>\",\n   *   new AzureKeyCredential(\"<Admin Key>\");\n   * );\n   * ```\n   * @param endpoint - The endpoint of the search service\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the Search Index client.\n   */\n  constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options: SearchIndexClientOptions = {}\n  ) {\n    this.endpoint = endpoint;\n    this.credential = credential;\n    this.options = options;\n\n    const libInfo = `azsdk-js-search-documents/${SDK_VERSION}`;\n    if (!options.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n    if (options.userAgentOptions.userAgentPrefix) {\n      options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      options.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\n            \"elapsed-time\",\n            \"Location\",\n            \"OData-MaxVersion\",\n            \"OData-Version\",\n            \"Prefer\",\n            \"throttle-reason\"\n          ]\n        }\n      }\n    };\n\n    const scope: string = options.audience\n      ? `${options.audience}/.default`\n      : `${KnownSearchAudience.AzurePublicCloud}/.default`;\n\n    const requestPolicyFactory: RequestPolicyFactory = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, scope)\n      : createSearchApiKeyCredentialPolicy(credential);\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, requestPolicyFactory);\n\n    if (Array.isArray(pipeline.requestPolicyFactories)) {\n      pipeline.requestPolicyFactories.unshift(odataMetadataPolicy(\"minimal\"));\n    }\n\n    let apiVersion = this.apiVersion;\n\n    if (options.apiVersion) {\n      if (![\"2020-06-30-Preview\", \"2020-06-30\"].includes(options.apiVersion)) {\n        throw new Error(`Invalid Api Version: ${options.apiVersion}`);\n      }\n      apiVersion = options.apiVersion;\n    }\n\n    this.client = new GeneratedClient(this.endpoint, apiVersion, pipeline);\n  }\n\n  private async *listIndexesPage(\n    options: ListIndexesOptions = {}\n  ): AsyncIterableIterator<SearchIndex[]> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-listIndexesPage\", options);\n    try {\n      const result = await this.client.indexes.list(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      const mapped = result.indexes.map(utils.generatedIndexToPublicIndex);\n      yield mapped;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listIndexesAll(\n    options: ListIndexesOptions = {}\n  ): AsyncIterableIterator<SearchIndex> {\n    for await (const page of this.listIndexesPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves a list of existing indexes in the service.\n   * @param options - Options to the list index operation.\n   */\n  public listIndexes(options: ListIndexesOptions = {}): IndexIterator {\n    const iter = this.listIndexesAll(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listIndexesPage(options);\n      }\n    };\n  }\n\n  private async *listIndexesNamesPage(\n    options: ListIndexesOptions = {}\n  ): AsyncIterableIterator<string[]> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-listIndexesNamesPage\", options);\n    try {\n      const result = await this.client.indexes.list({\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        select: \"name\"\n      });\n      const mapped = result.indexes.map((idx) => idx.name);\n      yield mapped;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listIndexesNamesAll(\n    options: ListIndexesOptions = {}\n  ): AsyncIterableIterator<string> {\n    for await (const page of this.listIndexesNamesPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing indexes in the service.\n   * @param options - Options to the list index operation.\n   */\n  public listIndexesNames(options: ListIndexesOptions = {}): IndexNameIterator {\n    const iter = this.listIndexesNamesAll(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listIndexesNamesPage(options);\n      }\n    };\n  }\n\n  /**\n   * Retrieves a list of existing SynonymMaps in the service.\n   * @param options - Options to the list SynonymMaps operation.\n   */\n  public async listSynonymMaps(options: ListSynonymMapsOptions = {}): Promise<Array<SynonymMap>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-listSynonymMaps\", options);\n    try {\n      const result = await this.client.synonymMaps.list(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result.synonymMaps.map(utils.generatedSynonymMapToPublicSynonymMap);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing SynonymMaps in the service.\n   * @param options - Options to the list SynonymMaps operation.\n   */\n  public async listSynonymMapsNames(options: ListSynonymMapsOptions = {}): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-listSynonymMapsNames\", options);\n    try {\n      const result = await this.client.synonymMaps.list({\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        select: \"name\"\n      });\n      return result.synonymMaps.map((sm) => sm.name);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about an index.\n   * @param indexName - The name of the index.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndex(indexName: string, options: GetIndexOptions = {}): Promise<SearchIndex> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-getIndex\", options);\n    try {\n      const result = await this.client.indexes.get(\n        indexName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedIndexToPublicIndex(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about a SynonymMap.\n   * @param synonymMapName - The name of the SynonymMap.\n   * @param options - Additional optional arguments.\n   */\n  public async getSynonymMap(\n    synonymMapName: string,\n    options: GetSynonymMapsOptions = {}\n  ): Promise<SynonymMap> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-getSynonymMaps\", options);\n    try {\n      const result = await this.client.synonymMaps.get(\n        synonymMapName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSynonymMapToPublicSynonymMap(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new index.\n   * @param index - The information describing the index to be created.\n   * @param options - Additional optional arguments.\n   */\n  public async createIndex(\n    index: SearchIndex,\n    options: CreateIndexOptions = {}\n  ): Promise<SearchIndex> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-createIndex\", options);\n    try {\n      const result = await this.client.indexes.create(\n        utils.publicIndexToGeneratedIndex(index),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedIndexToPublicIndex(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new SynonymMap in a search service.\n   * @param synonymMap - The synonymMap definition to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createSynonymMap(\n    synonymMap: SynonymMap,\n    options: CreateSynonymMapOptions = {}\n  ): Promise<SynonymMap> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-createSynonymMaps\", options);\n    try {\n      const result = await this.client.synonymMaps.create(\n        utils.publicSynonymMapToGeneratedSynonymMap(synonymMap),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSynonymMapToPublicSynonymMap(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new index or modifies an existing one.\n   * @param index - The information describing the index to be created.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateIndex(\n    index: SearchIndex,\n    options: CreateOrUpdateIndexOptions = {}\n  ): Promise<SearchIndex> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-createOrUpdateIndex\", options);\n    try {\n      const etag = options.onlyIfUnchanged ? index.etag : undefined;\n\n      const result = await this.client.indexes.createOrUpdate(\n        index.name,\n        utils.publicIndexToGeneratedIndex(index),\n        {\n          ...operationOptionsToRequestOptionsBase(updatedOptions),\n          ifMatch: etag\n        }\n      );\n      return utils.generatedIndexToPublicIndex(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new SynonymMap or modifies an existing one.\n   * @param synonymMap - The information describing the SynonymMap to be created.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateSynonymMap(\n    synonymMap: SynonymMap,\n    options: CreateOrUpdateSynonymMapOptions = {}\n  ): Promise<SynonymMap> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexClient-createOrUpdateSynonymMap\",\n      options\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? synonymMap.etag : undefined;\n\n      const result = await this.client.synonymMaps.createOrUpdate(\n        synonymMap.name,\n        utils.publicSynonymMapToGeneratedSynonymMap(synonymMap),\n        {\n          ...operationOptionsToRequestOptionsBase(updatedOptions),\n          ifMatch: etag\n        }\n      );\n      return utils.generatedSynonymMapToPublicSynonymMap(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing index.\n   * @param indexName - Index/Name of the index to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteIndex(\n    index: string | SearchIndex,\n    options: DeleteIndexOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-deleteIndex\", options);\n    try {\n      const indexName: string = typeof index === \"string\" ? index : index.name;\n      const etag =\n        typeof index === \"string\" ? undefined : options.onlyIfUnchanged ? index.etag : undefined;\n\n      await this.client.indexes.delete(indexName, {\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        ifMatch: etag\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing SynonymMap.\n   * @param synonymMapName - SynonymMap/Name of the synonymMap to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteSynonymMap(\n    synonymMap: string | SynonymMap,\n    options: DeleteSynonymMapOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-deleteSynonymMap\", options);\n    try {\n      const synonymMapName: string = typeof synonymMap === \"string\" ? synonymMap : synonymMap.name;\n      const etag =\n        typeof synonymMap === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n          ? synonymMap.etag\n          : undefined;\n\n      await this.client.synonymMaps.delete(synonymMapName, {\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        ifMatch: etag\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics about an index, such as the count of documents and the size\n   * of index storage.\n   * @param indexName - The name of the index.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndexStatistics(\n    indexName: string,\n    options: GetIndexStatisticsOptions = {}\n  ): Promise<SearchIndexStatistics> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-getIndexStatistics\", options);\n    try {\n      const result = await this.client.indexes.getStatistics(\n        indexName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Calls an analyzer or tokenizer manually on provided text.\n   * @param indexName - The name of the index that contains the field to analyze\n   * @param text - The text to break into tokens.\n   * @param options - Additional arguments\n   */\n  public async analyzeText(indexName: string, options: AnalyzeTextOptions): Promise<AnalyzeResult> {\n    const { operationOptions, restOptions } = utils.extractOperationOptions(options);\n\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-analyzeText\", operationOptions);\n    try {\n      const result = await this.client.indexes.analyze(\n        indexName,\n        {\n          ...restOptions,\n          analyzer: restOptions.analyzerName,\n          tokenizer: restOptions.tokenizerName\n        },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics about the service, such as the count of documents, index, etc.\n   * @param options - Additional optional arguments.\n   */\n  public async getServiceStatistics(\n    options: GetServiceStatisticsOptions = {}\n  ): Promise<SearchServiceStatistics> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-getServiceStatistics\", options);\n    try {\n      const result = await this.client.getServiceStatistics(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves the SearchClient corresponding to this SearchIndexClient\n   * @param indexName - Name of the index\n   * @param options - SearchClient Options\n   */\n  public getSearchClient<T>(indexName: string, options?: GetSearchClientOptions): SearchClient<T> {\n    return new SearchClient<T>(this.endpoint, indexName, this.credential, options || this.options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  createPipelineFromOptions,\n  InternalPipelineOptions,\n  operationOptionsToRequestOptionsBase,\n  PipelineOptions,\n  RequestPolicyFactory,\n  bearerTokenAuthenticationPolicy\n} from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"./constants\";\nimport { SearchIndexerStatus } from \"./generated/service/models\";\nimport { SearchServiceClient as GeneratedClient } from \"./generated/service/searchServiceClient\";\nimport { logger } from \"./logger\";\nimport { createSearchApiKeyCredentialPolicy } from \"./searchApiKeyCredentialPolicy\";\nimport {\n  CreateOrUpdateSkillsetOptions,\n  CreateSkillsetOptions,\n  DeleteSkillsetOptions,\n  GetSkillSetOptions,\n  ListSkillsetsOptions,\n  SearchIndexerSkillset,\n  ListIndexersOptions,\n  CreateIndexerOptions,\n  GetIndexerOptions,\n  CreateorUpdateIndexerOptions,\n  DeleteIndexerOptions,\n  GetIndexerStatusOptions,\n  ResetIndexerOptions,\n  RunIndexerOptions,\n  ListDataSourceConnectionsOptions,\n  SearchIndexer,\n  SearchIndexerDataSourceConnection,\n  CreateDataSourceConnectionOptions,\n  DeleteDataSourceConnectionOptions,\n  GetDataSourceConnectionOptions,\n  CreateorUpdateDataSourceConnectionOptions\n} from \"./serviceModels\";\nimport * as utils from \"./serviceUtils\";\nimport { createSpan } from \"./tracing\";\nimport { odataMetadataPolicy } from \"./odataMetadataPolicy\";\nimport { KnownSearchAudience } from \"./searchAudience\";\n\n/**\n * Client options used to configure Cognitive Search API requests.\n */\nexport interface SearchIndexerClientOptions extends PipelineOptions {\n  /**\n   * The API version to use when communicating with the service.\n   */\n  apiVersion?: string;\n\n  /**\n   * The Audience to use for authentication with Azure Active Directory (AAD). The\n   * audience is not considered when using a shared key.\n   * {@link KnownSearchAudience} can be used interchangeably with audience\n   */\n  audience?: string;\n}\n\n/**\n * Class to perform operations to manage\n * (create, update, list/delete)\n * indexers, datasources & skillsets.\n */\nexport class SearchIndexerClient {\n  /**\n   * The API version to use when communicating with the service.\n   */\n  public readonly apiVersion: string = \"2020-06-30\";\n\n  /**\n   * The endpoint of the search service\n   */\n  public readonly endpoint: string;\n\n  /**\n   * @internal\n   * @hidden\n   * A reference to the auto-generated SearchServiceClient\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of SearchIndexerClient.\n   *\n   * Example usage:\n   * ```ts\n   * const { SearchIndexerClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n   *\n   * const client = new SearchIndexerClient(\n   *   \"<endpoint>\",\n   *   new AzureKeyCredential(\"<Admin Key>\");\n   * );\n   * ```\n   * @param endpoint - The endpoint of the search service\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the Search client.\n   */\n  constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options: SearchIndexerClientOptions = {}\n  ) {\n    this.endpoint = endpoint;\n\n    const libInfo = `azsdk-js-search-documents/${SDK_VERSION}`;\n    if (!options.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n    if (options.userAgentOptions.userAgentPrefix) {\n      options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      options.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\n            \"elapsed-time\",\n            \"Location\",\n            \"OData-MaxVersion\",\n            \"OData-Version\",\n            \"Prefer\",\n            \"throttle-reason\"\n          ]\n        }\n      }\n    };\n\n    const scope: string = options.audience\n      ? `${options.audience}/.default`\n      : `${KnownSearchAudience.AzurePublicCloud}/.default`;\n\n    const requestPolicyFactory: RequestPolicyFactory = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, scope)\n      : createSearchApiKeyCredentialPolicy(credential);\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, requestPolicyFactory);\n\n    if (Array.isArray(pipeline.requestPolicyFactories)) {\n      pipeline.requestPolicyFactories.unshift(odataMetadataPolicy(\"minimal\"));\n    }\n\n    let apiVersion = this.apiVersion;\n\n    if (options.apiVersion) {\n      if (![\"2020-06-30-Preview\", \"2020-06-30\"].includes(options.apiVersion)) {\n        throw new Error(`Invalid Api Version: ${options.apiVersion}`);\n      }\n      apiVersion = options.apiVersion;\n    }\n\n    this.client = new GeneratedClient(this.endpoint, apiVersion, pipeline);\n  }\n\n  /**\n   * Retrieves a list of existing indexers in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listIndexers(options: ListIndexersOptions = {}): Promise<Array<SearchIndexer>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listIndexers\", options);\n    try {\n      const result = await this.client.indexers.list(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result.indexers.map(utils.generatedSearchIndexerToPublicSearchIndexer);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing indexers in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listIndexersNames(options: ListIndexersOptions = {}): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listIndexersNames\", options);\n    try {\n      const result = await this.client.indexers.list({\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        select: \"name\"\n      });\n      return result.indexers.map((idx) => idx.name);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of existing data sources in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listDataSourceConnections(\n    options: ListDataSourceConnectionsOptions = {}\n  ): Promise<Array<SearchIndexerDataSourceConnection>> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-listDataSourceConnections\",\n      options\n    );\n    try {\n      const result = await this.client.dataSources.list(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result.dataSources.map(utils.generatedDataSourceToPublicDataSource);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing data sources in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listDataSourceConnectionsNames(\n    options: ListDataSourceConnectionsOptions = {}\n  ): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-listDataSourceConnectionsNames\",\n      options\n    );\n    try {\n      const result = await this.client.dataSources.list({\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        select: \"name\"\n      });\n      return result.dataSources.map((ds) => ds.name);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of existing Skillsets in the service.\n   * @param options - Options to the list Skillsets operation.\n   */\n  public async listSkillsets(\n    options: ListSkillsetsOptions = {}\n  ): Promise<Array<SearchIndexerSkillset>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listSkillsets\", options);\n    try {\n      const result = await this.client.skillsets.list(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result.skillsets.map(utils.generatedSkillsetToPublicSkillset);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing Skillsets in the service.\n   * @param options - Options to the list Skillsets operation.\n   */\n  public async listSkillsetsNames(options: ListSkillsetsOptions = {}): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listSkillsetsNames\", options);\n    try {\n      const result = await this.client.skillsets.list({\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        select: \"name\"\n      });\n      return result.skillsets.map((sks) => sks.name);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about an Indexer.\n   * @param indexerName - The name of the Indexer.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndexer(\n    indexerName: string,\n    options: GetIndexerOptions = {}\n  ): Promise<SearchIndexer> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-getIndexer\", options);\n    try {\n      const result = await this.client.indexers.get(\n        indexerName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSearchIndexerToPublicSearchIndexer(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about a DataSource\n   * @param dataSourceName - The name of the DataSource\n   * @param options - Additional optional arguments\n   */\n  public async getDataSourceConnection(\n    dataSourceConnectionName: string,\n    options: GetDataSourceConnectionOptions = {}\n  ): Promise<SearchIndexerDataSourceConnection> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-getDataSourceConnection\",\n      options\n    );\n    try {\n      const result = await this.client.dataSources.get(\n        dataSourceConnectionName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedDataSourceToPublicDataSource(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about an Skillset.\n   * @param indexName - The name of the Skillset.\n   * @param options - Additional optional arguments.\n   */\n  public async getSkillset(\n    skillsetName: string,\n    options: GetSkillSetOptions = {}\n  ): Promise<SearchIndexerSkillset> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-getSkillset\", options);\n    try {\n      const result = await this.client.skillsets.get(\n        skillsetName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSkillsetToPublicSkillset(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new indexer in a search service.\n   * @param indexer - The indexer definition to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createIndexer(\n    indexer: SearchIndexer,\n    options: CreateIndexerOptions = {}\n  ): Promise<SearchIndexer> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-createIndexer\", options);\n    try {\n      const result = await this.client.indexers.create(\n        utils.publicSearchIndexerToGeneratedSearchIndexer(indexer),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSearchIndexerToPublicSearchIndexer(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new dataSource in a search service.\n   * @param dataSourceConnection - The dataSource definition to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createDataSourceConnection(\n    dataSourceConnection: SearchIndexerDataSourceConnection,\n    options: CreateDataSourceConnectionOptions = {}\n  ): Promise<SearchIndexerDataSourceConnection> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createDataSourceConnection\",\n      options\n    );\n    try {\n      const result = await this.client.dataSources.create(\n        utils.publicDataSourceToGeneratedDataSource(dataSourceConnection),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedDataSourceToPublicDataSource(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new skillset in a search service.\n   * @param skillset - The skillset containing one or more skills to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createSkillset(\n    skillset: SearchIndexerSkillset,\n    options: CreateSkillsetOptions = {}\n  ): Promise<SearchIndexerSkillset> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-createSkillset\", options);\n    try {\n      const result = await this.client.skillsets.create(\n        utils.publicSkillsetToGeneratedSkillset(skillset),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSkillsetToPublicSkillset(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new indexer or modifies an existing one.\n   * @param indexer - The information describing the indexer to be created/updated.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateIndexer(\n    indexer: SearchIndexer,\n    options: CreateorUpdateIndexerOptions = {}\n  ): Promise<SearchIndexer> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createOrUpdateIndexer\",\n      options\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? indexer.etag : undefined;\n\n      const result = await this.client.indexers.createOrUpdate(\n        indexer.name,\n        utils.publicSearchIndexerToGeneratedSearchIndexer(indexer),\n        {\n          ...operationOptionsToRequestOptionsBase(updatedOptions),\n          ifMatch: etag\n        }\n      );\n      return utils.generatedSearchIndexerToPublicSearchIndexer(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new datasource or modifies an existing one.\n   * @param dataSourceConnection - The information describing the datasource to be created/updated.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateDataSourceConnection(\n    dataSourceConnection: SearchIndexerDataSourceConnection,\n    options: CreateorUpdateDataSourceConnectionOptions = {}\n  ): Promise<SearchIndexerDataSourceConnection> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createOrUpdateDataSourceConnection\",\n      options\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? dataSourceConnection.etag : undefined;\n\n      const result = await this.client.dataSources.createOrUpdate(\n        dataSourceConnection.name,\n        utils.publicDataSourceToGeneratedDataSource(dataSourceConnection),\n        {\n          ...operationOptionsToRequestOptionsBase(updatedOptions),\n          ifMatch: etag\n        }\n      );\n      return utils.generatedDataSourceToPublicDataSource(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new Skillset or modifies an existing one.\n   * @param skillset - The information describing the index to be created.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateSkillset(\n    skillset: SearchIndexerSkillset,\n    options: CreateOrUpdateSkillsetOptions = {}\n  ): Promise<SearchIndexerSkillset> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createOrUpdateSkillset\",\n      options\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? skillset.etag : undefined;\n\n      const result = await this.client.skillsets.createOrUpdate(\n        skillset.name,\n        utils.publicSkillsetToGeneratedSkillset(skillset),\n        {\n          ...operationOptionsToRequestOptionsBase(updatedOptions),\n          ifMatch: etag\n        }\n      );\n\n      return utils.generatedSkillsetToPublicSkillset(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing indexer.\n   * @param indexer - Indexer/Name of the indexer to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteIndexer(\n    indexer: string | SearchIndexer,\n    options: DeleteIndexerOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-deleteIndexer\", options);\n    try {\n      const indexerName: string = typeof indexer === \"string\" ? indexer : indexer.name;\n      const etag =\n        typeof indexer === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n          ? indexer.etag\n          : undefined;\n\n      await this.client.indexers.delete(indexerName, {\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        ifMatch: etag\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing datasource.\n   * @param dataSource - Datasource/Name of the datasource to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteDataSourceConnection(\n    dataSourceConnection: string | SearchIndexerDataSourceConnection,\n    options: DeleteDataSourceConnectionOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-deleteDataSourceConnection\",\n      options\n    );\n    try {\n      const dataSourceConnectionName: string =\n        typeof dataSourceConnection === \"string\" ? dataSourceConnection : dataSourceConnection.name;\n      const etag =\n        typeof dataSourceConnection === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n          ? dataSourceConnection.etag\n          : undefined;\n\n      await this.client.dataSources.delete(dataSourceConnectionName, {\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        ifMatch: etag\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing Skillset.\n   * @param skillset - Skillset/Name of the Skillset to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteSkillset(\n    skillset: string | SearchIndexerSkillset,\n    options: DeleteSkillsetOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-deleteSkillset\", options);\n    try {\n      const skillsetName: string = typeof skillset === \"string\" ? skillset : skillset.name;\n      const etag =\n        typeof skillset === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n          ? skillset.etag\n          : undefined;\n\n      await this.client.skillsets.delete(skillsetName, {\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        ifMatch: etag\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the current status and execution history of an indexer.\n   * @param indexerName - The name of the indexer.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndexerStatus(\n    indexerName: string,\n    options: GetIndexerStatusOptions = {}\n  ): Promise<SearchIndexerStatus> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-getIndexerStatus\", options);\n    try {\n      const result = await this.client.indexers.getStatus(\n        indexerName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Resets the change tracking state associated with an indexer.\n   * @param indexerName - The name of the indexer to reset.\n   * @param options - Additional optional arguments.\n   */\n  public async resetIndexer(indexerName: string, options: ResetIndexerOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-resetIndexer\", options);\n    try {\n      await this.client.indexers.reset(\n        indexerName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs an indexer on-demand.\n   * @param indexerName - The name of the indexer to run.\n   * @param options - Additional optional arguments.\n   */\n  public async runIndexer(indexerName: string, options: RunIndexerOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-runIndexer\", options);\n    try {\n      await this.client.indexers.run(\n        indexerName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nfunction formatNullAndUndefined(input: unknown): string | unknown {\n  if (input === null || input === undefined) {\n    return \"null\";\n  }\n\n  return input;\n}\n\nfunction escapeQuotesIfString(input: unknown, previous: string): string | unknown {\n  let result = input;\n\n  if (typeof input === \"string\") {\n    result = input.replace(/'/g, \"''\");\n    // check if we need to escape this literal\n    if (!previous.trim().endsWith(\"'\")) {\n      result = `'${result}'`;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Escapes an odata filter expression to avoid errors with quoting string literals.\n * Example usage:\n * ```ts\n * const baseRateMax = 200;\n * const ratingMin = 4;\n * const filter = odata`Rooms/any(room: room/BaseRate lt ${baseRateMax}) and Rating ge ${ratingMin}`;\n * ```\n * For more information on supported syntax see: https://docs.microsoft.com/en-us/azure/search/search-query-odata-filter\n * @param strings - Array of strings for the expression\n * @param values - Array of values for the expression\n */\nexport function odata(strings: TemplateStringsArray, ...values: unknown[]): string {\n  const results = [];\n  for (let i = 0; i < strings.length; i++) {\n    results.push(strings[i]);\n    if (i < values.length) {\n      if (values[i] === null || values[i] === undefined) {\n        results.push(formatNullAndUndefined(values[i]));\n      } else {\n        results.push(escapeQuotesIfString(values[i], strings[i]));\n      }\n    }\n  }\n  return results.join(\"\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SynonymMap } from \"./serviceModels\";\nimport { promisify } from \"util\";\nimport * as fs from \"fs\";\nconst readFileAsync = promisify(fs.readFile);\n\n/**\n * Helper method to create a SynonymMap object. This is a NodeJS only method.\n *\n * @param name - Name of the SynonymMap.\n * @param filePath - Path of the file that contains the Synonyms (seperated by new lines)\n * @returns SynonymMap object\n */\nexport async function createSynonymMapFromFile(\n  name: string,\n  filePath: string\n): Promise<SynonymMap> {\n  const synonyms: string[] = (await readFileAsync(filePath, \"utf-8\")).trim().split(/\\s*\\r?\\n\\s*/);\n\n  return {\n    name,\n    synonyms\n  };\n}\n"],"names":["QueryCollectionFormat","SearchRequestMapper","SuggestRequestMapper","IndexBatchMapper","AutocompleteRequestMapper","coreHttp.operationOptionsToRequestOptionsBase","coreHttp.Serializer","Mappers.SearchError","Parameters.apiVersion","Parameters.endpoint","Parameters.indexName","Parameters.accept","Parameters.xMsClientRequestId","Mappers.SearchDocumentsResult","Parameters.searchText","Parameters.includeTotalResultCount","Parameters.facets","Parameters.filter","Parameters.highlightFields","Parameters.highlightPostTag","Parameters.highlightPreTag","Parameters.minimumCoverage","Parameters.orderBy","Parameters.queryType","Parameters.scoringParameters","Parameters.scoringProfile","Parameters.searchFields","Parameters.searchMode","Parameters.scoringStatistics","Parameters.sessionId","Parameters.select","Parameters.skip","Parameters.top","Parameters.searchRequest","Parameters.contentType","Parameters.selectedFields","Parameters.key","Mappers.SuggestDocumentsResult","Parameters.searchText1","Parameters.suggesterName","Parameters.filter1","Parameters.useFuzzyMatching","Parameters.highlightPostTag1","Parameters.highlightPreTag1","Parameters.minimumCoverage1","Parameters.orderBy1","Parameters.searchFields1","Parameters.select1","Parameters.top1","Parameters.suggestRequest","Mappers.IndexDocumentsResult","Parameters.batch","Mappers.AutocompleteResult","Parameters.autocompleteMode","Parameters.filter2","Parameters.useFuzzyMatching1","Parameters.highlightPostTag2","Parameters.highlightPreTag2","Parameters.minimumCoverage2","Parameters.searchFields2","Parameters.top2","Parameters.autocompleteRequest","coreHttp.ServiceClient","coreHttp.getDefaultUserAgentValue","BaseRequestPolicy","createClientLogger","createSpanFunction","WorldGeodeticSystem1984","KnownTokenizerNames","KnownTokenFilterNames","KnownCharFilterNames","KnownAnalyzerNames","KnownSearchAudience","SearchClient","isTokenCredential","bearerTokenAuthenticationPolicy","createPipelineFromOptions","GeneratedClient","operationOptionsToRequestOptionsBase","SpanStatusCode","utils.generatedSearchResultToPublicSearchResult","__asyncDelegator","__asyncValues","utils.generatedSuggestDocumentsResultToPublicSuggestDocumentsResult","delay","SearchError","contentType","SearchIndexerDataSourceMapper","accept","endpoint","xMsClientRequestId","apiVersion","select","SearchIndexerMapper","SearchIndexerSkillsetMapper","SynonymMapMapper","SearchIndexMapper","indexName","AnalyzeRequestMapper","getOperationSpec","serializer","Mappers","Mappers.SearchIndexerDataSource","Parameters.dataSource","Parameters.dataSourceName","Parameters.ifMatch","Parameters.ifNoneMatch","Parameters.prefer","Mappers.ListDataSourcesResult","createOrUpdateOperationSpec","deleteOperationSpec","listOperationSpec","createOperationSpec","Parameters.indexerName","Mappers.SearchIndexer","Parameters.indexer","Mappers.ListIndexersResult","Mappers.SearchIndexerStatus","Mappers.SearchIndexerSkillset","Parameters.skillset","Parameters.skillsetName","Mappers.ListSkillsetsResult","Mappers.SynonymMap","Parameters.synonymMap","Parameters.synonymMapName","Mappers.ListSynonymMapsResult","Mappers.SearchIndex","Parameters.index","Mappers.ListIndexesResult","Parameters.allowIndexDowntime","Mappers.GetIndexStatisticsResult","Mappers.AnalyzeResult","Parameters.request","packageName","packageVersion","Mappers.ServiceStatistics","utils.generatedIndexToPublicIndex","utils.generatedSynonymMapToPublicSynonymMap","utils.publicIndexToGeneratedIndex","utils.publicSynonymMapToGeneratedSynonymMap","utils.extractOperationOptions","utils.generatedSearchIndexerToPublicSearchIndexer","utils.generatedDataSourceToPublicDataSource","utils.generatedSkillsetToPublicSkillset","utils.publicSearchIndexerToGeneratedSearchIndexer","utils.publicDataSourceToGeneratedDataSource","utils.publicSkillsetToGeneratedSkillset","promisify","fs.readFile"],"mappings":"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"}