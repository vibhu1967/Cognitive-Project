{"version":3,"file":"indexModels.js","sourceRoot":"","sources":["../../src/indexModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAgmBlC,6CAA6C","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-http\";\nimport {\n  QueryType,\n  SearchMode,\n  FacetResult,\n  AutocompleteMode,\n  IndexActionType,\n  ScoringStatistics\n} from \"./generated/data/models\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\n/**\n * Options for performing the count operation on the index.\n */\nexport type CountDocumentsOptions = OperationOptions;\n/**\n * Options for retrieving completion text for a partial searchText.\n */\nexport type AutocompleteOptions<Fields> = OperationOptions & AutocompleteRequest<Fields>;\n/**\n * Options for committing a full search request.\n */\nexport type SearchOptions<Fields> = OperationOptions & SearchRequestOptions<Fields>;\n/**\n * Options for retrieving suggestions based on the searchText.\n */\nexport type SuggestOptions<Fields> = OperationOptions & SuggestRequest<Fields>;\n\n/**\n * Options for SearchIndexingBufferedSender.\n */\nexport interface SearchIndexingBufferedSenderOptions {\n  /**\n   * Indicates if autoFlush is enabled.\n   */\n  autoFlush?: boolean;\n  /**\n   * Initial Batch Action Count.\n   *\n   * A batch request will be sent once the documents\n   * reach the initialBatchActionCount.\n   */\n  initialBatchActionCount?: number;\n  /**\n   * Flush Window.\n   *\n   * A batch request will be sent after flushWindowInMs is\n   * reached.\n   */\n  flushWindowInMs?: number;\n  /**\n   * Maximum number of Retries\n   */\n  maxRetriesPerAction?: number;\n  /**\n   * Delay between retries\n   */\n  throttlingDelayInMs?: number;\n  /**\n   * Max Delay between retries\n   */\n  maxThrottlingDelayInMs?: number;\n}\n\n/**\n * Options for SearchIndexingBufferedSenderUploadDocuments.\n */\nexport type SearchIndexingBufferedSenderUploadDocumentsOptions = OperationOptions;\n/**\n * Options for SearchIndexingBufferedSenderMergeDocuments.\n */\nexport type SearchIndexingBufferedSenderMergeDocumentsOptions = OperationOptions;\n/**\n * Options for SearchIndexingBufferedSenderMergeOrUploadDocuments.\n */\nexport type SearchIndexingBufferedSenderMergeOrUploadDocumentsOptions = OperationOptions;\n/**\n * Options for SearchIndexingBufferedSenderDeleteDocuments.\n */\nexport type SearchIndexingBufferedSenderDeleteDocumentsOptions = OperationOptions;\n/**\n * Options for SearchIndexingBufferedSenderFlushDocuments.\n */\nexport type SearchIndexingBufferedSenderFlushDocumentsOptions = OperationOptions;\n\n/**\n * Options for retrieving a single document.\n */\nexport interface GetDocumentOptions<Fields> extends OperationOptions {\n  /**\n   * List of field names to retrieve for the document; Any field not retrieved will be missing from\n   * the returned document.\n   */\n  selectedFields?: Fields[];\n}\n\n/**\n * Options for the modify index batch operation.\n */\nexport interface IndexDocumentsOptions extends OperationOptions {\n  /**\n   * If true, will cause this operation to throw if any document operation\n   * in the batch did not succeed.\n   */\n  throwOnAnyFailure?: boolean;\n}\n\n/**\n * Options for the upload documents operation.\n */\nexport type UploadDocumentsOptions = IndexDocumentsOptions;\n\n/**\n * Options for the merge documents operation.\n */\nexport type MergeDocumentsOptions = IndexDocumentsOptions;\n\n/**\n * Options for the merge or upload documents operation.\n */\nexport type MergeOrUploadDocumentsOptions = IndexDocumentsOptions;\n\n/**\n * Options for the delete documents operation.\n */\nexport type DeleteDocumentsOptions = IndexDocumentsOptions;\n\n/**\n * Arguments for retrieving the next page of search results.\n */\nexport interface ListSearchResultsPageSettings {\n  /**\n   * A token used for retrieving the next page of results when the server\n   * enforces pagination.\n   */\n  continuationToken?: string;\n}\n\n/**\n * An iterator for search results of a paticular query. Will make requests\n * as needed during iteration. Use .byPage() to make one request to the server\n * per iteration.\n */\nexport type SearchIterator<Fields> = PagedAsyncIterableIterator<\n  SearchResult<Fields>,\n  SearchDocumentsPageResult<Fields>,\n  ListSearchResultsPageSettings\n>;\n\n// BEGIN manually modified generated interfaces\n//\n// This section is for places where we have to manually fix issues\n// with interfaces from the generated code.\n// Mostly this is to allow modeling additionalProperties:true as generics.\n\n/**\n * Parameters for filtering, sorting, faceting, paging, and other search query behaviors.\n */\nexport interface SearchRequest {\n  /**\n   * A value that specifies whether to fetch the total count of results. Default is false. Setting\n   * this value to true may have a performance impact. Note that the count returned is an\n   * approximation.\n   */\n  includeTotalCount?: boolean;\n  /**\n   * The list of facet expressions to apply to the search query. Each facet expression contains a\n   * field name, optionally followed by a comma-separated list of name:value pairs.\n   */\n  facets?: string[];\n  /**\n   * The OData $filter expression to apply to the search query.\n   */\n  filter?: string;\n  /**\n   * The comma-separated list of field names to use for hit highlights. Only searchable fields can\n   * be used for hit highlighting.\n   */\n  highlightFields?: string;\n  /**\n   * A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is\n   * &lt;/em&gt;.\n   */\n  highlightPostTag?: string;\n  /**\n   * A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default\n   * is &lt;em&gt;.\n   */\n  highlightPreTag?: string;\n  /**\n   * A number between 0 and 100 indicating the percentage of the index that must be covered by a\n   * search query in order for the query to be reported as a success. This parameter can be useful\n   * for ensuring search availability even for services with only one replica. The default is 100.\n   */\n  minimumCoverage?: number;\n  /**\n   * The comma-separated list of OData $orderby expressions by which to sort the results. Each\n   * expression can be either a field name or a call to either the geo.distance() or the\n   * search.score() functions. Each expression can be followed by asc to indicate ascending, or\n   * desc to indicate descending. The default is ascending order. Ties will be broken by the match\n   * scores of documents. If no $orderby is specified, the default sort order is descending by\n   * document match score. There can be at most 32 $orderby clauses.\n   */\n  orderBy?: string;\n  /**\n   * A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if\n   * your query uses the Lucene query syntax. Possible values include: 'Simple', 'Full'\n   */\n  queryType?: QueryType;\n  /**\n   * A value that specifies whether we want to calculate scoring statistics (such as document\n   * frequency) globally for more consistent scoring, or locally, for lower latency. The default is\n   * 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global\n   * scoring statistics can increase latency of search queries. Possible values include: 'Local',\n   * 'Global'\n   */\n  scoringStatistics?: ScoringStatistics;\n  /**\n   * A value to be used to create a sticky session, which can help getting more consistent results.\n   * As long as the same sessionId is used, a best-effort attempt will be made to target the same\n   * replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the\n   * load balancing of the requests across replicas and adversely affect the performance of the\n   * search service. The value used as sessionId cannot start with a '_' character.\n   */\n  sessionId?: string;\n  /**\n   * The list of parameter values to be used in scoring functions (for example,\n   * referencePointParameter) using the format name-values. For example, if the scoring profile\n   * defines a function with a parameter called 'mylocation' the parameter string would be\n   * \"mylocation--122.2,44.8\" (without the quotes).\n   */\n  scoringParameters?: string[];\n  /**\n   * The name of a scoring profile to evaluate match scores for matching documents in order to sort\n   * the results.\n   */\n  scoringProfile?: string;\n  /**\n   * A full-text search query expression; Use \"*\" or omit this parameter to match all documents.\n   */\n  searchText?: string;\n  /**\n   * The comma-separated list of field names to which to scope the full-text search. When using\n   * fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each\n   * fielded search expression take precedence over any field names listed in this parameter.\n   */\n  searchFields?: string;\n  /**\n   * A value that specifies whether any or all of the search terms must be matched in order to\n   * count the document as a match. Possible values include: 'Any', 'All'\n   */\n  searchMode?: SearchMode;\n  /**\n   * The comma-separated list of fields to retrieve. If unspecified, all fields marked as\n   * retrievable in the schema are included.\n   */\n  select?: string;\n  /**\n   * The number of search results to skip. This value cannot be greater than 100,000. If you need\n   * to scan documents in sequence, but cannot use skip due to this limitation, consider using\n   * orderby on a totally-ordered key and filter with a range query instead.\n   */\n  skip?: number;\n  /**\n   * The number of search results to retrieve. This can be used in conjunction with $skip to\n   * implement client-side paging of search results. If results are truncated due to server-side\n   * paging, the response will include a continuation token that can be used to issue another\n   * Search request for the next page of results.\n   */\n  top?: number;\n}\n\n/**\n * Parameters for filtering, sorting, faceting, paging, and other search query behaviors.\n */\nexport interface SearchRequestOptions<Fields> {\n  /**\n   * A value that specifies whether to fetch the total count of results. Default is false. Setting\n   * this value to true may have a performance impact. Note that the count returned is an\n   * approximation.\n   */\n  includeTotalCount?: boolean;\n  /**\n   * The list of facet expressions to apply to the search query. Each facet expression contains a\n   * field name, optionally followed by a comma-separated list of name:value pairs.\n   */\n  facets?: string[];\n  /**\n   * The OData $filter expression to apply to the search query.\n   */\n  filter?: string;\n  /**\n   * The comma-separated list of field names to use for hit highlights. Only searchable fields can\n   * be used for hit highlighting.\n   */\n  highlightFields?: string;\n  /**\n   * A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is\n   * &lt;/em&gt;.\n   */\n  highlightPostTag?: string;\n  /**\n   * A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default\n   * is &lt;em&gt;.\n   */\n  highlightPreTag?: string;\n  /**\n   * A number between 0 and 100 indicating the percentage of the index that must be covered by a\n   * search query in order for the query to be reported as a success. This parameter can be useful\n   * for ensuring search availability even for services with only one replica. The default is 100.\n   */\n  minimumCoverage?: number;\n  /**\n   * The list of OData $orderby expressions by which to sort the results. Each\n   * expression can be either a field name or a call to either the geo.distance() or the\n   * search.score() functions. Each expression can be followed by asc to indicate ascending, or\n   * desc to indicate descending. The default is ascending order. Ties will be broken by the match\n   * scores of documents. If no $orderby is specified, the default sort order is descending by\n   * document match score. There can be at most 32 $orderby clauses.\n   */\n  orderBy?: string[];\n  /**\n   * A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if\n   * your query uses the Lucene query syntax. Possible values include: 'simple', 'full'\n   */\n  queryType?: QueryType;\n  /**\n   * The list of parameter values to be used in scoring functions (for example,\n   * referencePointParameter) using the format name-values. For example, if the scoring profile\n   * defines a function with a parameter called 'mylocation' the parameter string would be\n   * \"mylocation--122.2,44.8\" (without the quotes).\n   */\n  scoringParameters?: string[];\n  /**\n   * The name of a scoring profile to evaluate match scores for matching documents in order to sort\n   * the results.\n   */\n  scoringProfile?: string;\n  /**\n   * The comma-separated list of field names to which to scope the full-text search. When using\n   * fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each\n   * fielded search expression take precedence over any field names listed in this parameter.\n   */\n  searchFields?: Fields[];\n  /**\n   * A value that specifies whether any or all of the search terms must be matched in order to\n   * count the document as a match. Possible values include: 'any', 'all'\n   */\n  searchMode?: SearchMode;\n  /**\n   * A value that specifies whether we want to calculate scoring statistics (such as document\n   * frequency) globally for more consistent scoring, or locally, for lower latency. Possible\n   * values include: 'Local', 'Global'\n   */\n  scoringStatistics?: ScoringStatistics;\n  /**\n   * A value to be used to create a sticky session, which can help to get more consistent results.\n   * As long as the same sessionId is used, a best-effort attempt will be made to target the same\n   * replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the\n   * load balancing of the requests across replicas and adversely affect the performance of the\n   * search service. The value used as sessionId cannot start with a '_' character.\n   */\n  sessionId?: string;\n  /**\n   * The list of fields to retrieve. If unspecified, all fields marked as\n   * retrievable in the schema are included.\n   */\n  select?: Fields[];\n  /**\n   * The number of search results to skip. This value cannot be greater than 100,000. If you need\n   * to scan documents in sequence, but cannot use skip due to this limitation, consider using\n   * orderby on a totally-ordered key and filter with a range query instead.\n   */\n  skip?: number;\n  /**\n   * The number of search results to retrieve. This can be used in conjunction with $skip to\n   * implement client-side paging of search results. If results are truncated due to server-side\n   * paging, the response will include a continuation token that can be used to issue another\n   * Search request for the next page of results.\n   */\n  top?: number;\n}\n\n/**\n * Contains a document found by a search query, plus associated metadata.\n */\nexport type SearchResult<T> = {\n  /**\n   * The relevance score of the document compared to other documents returned by the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly score: number;\n  /**\n   * Text fragments from the document that indicate the matching search terms, organized by each\n   * applicable field; null if hit highlighting was not enabled for the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly highlights?: { [k in keyof T]?: string[] };\n\n  document: T;\n};\n\n/**\n * Response containing search results from an index.\n */\nexport interface SearchDocumentsResultBase {\n  /**\n   * The total count of results found by the search operation, or null if the count was not\n   * requested. If present, the count may be greater than the number of results in this response.\n   * This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can't\n   * return all the requested documents in a single Search response.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly count?: number;\n  /**\n   * A value indicating the percentage of the index that was included in the query, or null if\n   * minimumCoverage was not specified in the request.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly coverage?: number;\n  /**\n   * The facet query results for the search operation, organized as a collection of buckets for\n   * each faceted field; null if the query did not include any facet expressions.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly facets?: { [propertyName: string]: FacetResult[] };\n}\n\n/**\n * Response containing search results from an index.\n */\nexport interface SearchDocumentsResult<T> extends SearchDocumentsResultBase {\n  /**\n   * The sequence of results returned by the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly results: SearchIterator<T>;\n}\n\n/**\n * Response containing search page results from an index.\n */\nexport interface SearchDocumentsPageResult<T> extends SearchDocumentsResultBase {\n  /**\n   * The sequence of results returned by the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly results: SearchResult<T>[];\n  /**\n   * A token used for retrieving the next page of results when the server\n   * enforces pagination.\n   */\n  continuationToken?: string;\n}\n\n/**\n * Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.\n */\nexport interface SuggestRequest<Fields> {\n  /**\n   * An OData expression that filters the documents considered for suggestions.\n   */\n  filter?: string;\n  /**\n   * A value indicating whether to use fuzzy matching for the suggestion query. Default is false.\n   * When set to true, the query will find suggestions even if there's a substituted or missing\n   * character in the search text. While this provides a better experience in some scenarios, it\n   * comes at a performance cost as fuzzy suggestion searches are slower and consume more\n   * resources.\n   */\n  useFuzzyMatching?: boolean;\n  /**\n   * A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted,\n   * hit highlighting of suggestions is disabled.\n   */\n  highlightPostTag?: string;\n  /**\n   * A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If\n   * omitted, hit highlighting of suggestions is disabled.\n   */\n  highlightPreTag?: string;\n  /**\n   * A number between 0 and 100 indicating the percentage of the index that must be covered by a\n   * suggestion query in order for the query to be reported as a success. This parameter can be\n   * useful for ensuring search availability even for services with only one replica. The default\n   * is 80.\n   */\n  minimumCoverage?: number;\n  /**\n   * The list of OData $orderby expressions by which to sort the results. Each\n   * expression can be either a field name or a call to either the geo.distance() or the\n   * search.score() functions. Each expression can be followed by asc to indicate ascending, or\n   * desc to indicate descending. The default is ascending order. Ties will be broken by the match\n   * scores of documents. If no $orderby is specified, the default sort order is descending by\n   * document match score. There can be at most 32 $orderby clauses.\n   */\n  orderBy?: string[];\n  /**\n   * The comma-separated list of field names to search for the specified search text. Target fields\n   * must be included in the specified suggester.\n   */\n  searchFields?: Fields[];\n  /**\n   * The list of fields to retrieve. If unspecified, only the key field will be\n   * included in the results.\n   */\n  select?: Fields[];\n  /**\n   * The number of suggestions to retrieve. This must be a value between 1 and 100. The default is\n   * 5.\n   */\n  top?: number;\n}\n\n/**\n * A result containing a document found by a suggestion query, plus associated metadata.\n */\nexport type SuggestResult<T> = {\n  /**\n   * The text of the suggestion result.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly text: string;\n  document: T;\n};\n\n/**\n * Response containing suggestion query results from an index.\n */\nexport interface SuggestDocumentsResult<T> {\n  /**\n   * The sequence of results returned by the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly results: SuggestResult<T>[];\n  /**\n   * A value indicating the percentage of the index that was included in the query, or null if\n   * minimumCoverage was not set in the request.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly coverage?: number;\n}\n\n/**\n * Parameters for fuzzy matching, and other autocomplete query behaviors.\n */\nexport interface AutocompleteRequest<Fields> {\n  /**\n   * Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles\n   * and 'oneTermWithContext' to use the current context while producing auto-completed terms.\n   * Possible values include: 'oneTerm', 'twoTerms', 'oneTermWithContext'\n   */\n  autocompleteMode?: AutocompleteMode;\n  /**\n   * An OData expression that filters the documents used to produce completed terms for the\n   * Autocomplete result.\n   */\n  filter?: string;\n  /**\n   * A value indicating whether to use fuzzy matching for the autocomplete query. Default is false.\n   * When set to true, the query will autocomplete terms even if there's a substituted or missing\n   * character in the search text. While this provides a better experience in some scenarios, it\n   * comes at a performance cost as fuzzy autocomplete queries are slower and consume more\n   * resources.\n   */\n  useFuzzyMatching?: boolean;\n  /**\n   * A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted,\n   * hit highlighting is disabled.\n   */\n  highlightPostTag?: string;\n  /**\n   * A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If\n   * omitted, hit highlighting is disabled.\n   */\n  highlightPreTag?: string;\n  /**\n   * A number between 0 and 100 indicating the percentage of the index that must be covered by an\n   * autocomplete query in order for the query to be reported as a success. This parameter can be\n   * useful for ensuring search availability even for services with only one replica. The default\n   * is 80.\n   */\n  minimumCoverage?: number;\n  /**\n   * The comma-separated list of field names to consider when querying for auto-completed terms.\n   * Target fields must be included in the specified suggester.\n   */\n  searchFields?: Fields[];\n  /**\n   * The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The\n   * default is 5.\n   */\n  top?: number;\n}\n\n/**\n * Represents an index action that operates on a document.\n */\nexport type IndexDocumentsAction<T> = {\n  /**\n   * The operation to perform on a document in an indexing batch. Possible values include:\n   * 'upload', 'merge', 'mergeOrUpload', 'delete'\n   */\n  __actionType: IndexActionType;\n} & Partial<T>;\n\n// END manually modified generated interfaces\n"]}