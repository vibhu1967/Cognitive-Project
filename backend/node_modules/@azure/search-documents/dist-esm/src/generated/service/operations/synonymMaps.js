/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class representing a SynonymMaps. */
export class SynonymMaps {
    /**
     * Initialize a new instance of the class SynonymMaps class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a new synonym map or updates a synonym map if it already exists.
     * @param synonymMapName The name of the synonym map to create or update.
     * @param synonymMap The definition of the synonym map to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(synonymMapName, synonymMap, options) {
        const operationArguments = {
            synonymMapName,
            synonymMap,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.client.sendOperationRequest(operationArguments, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a synonym map.
     * @param synonymMapName The name of the synonym map to delete.
     * @param options The options parameters.
     */
    delete(synonymMapName, options) {
        const operationArguments = {
            synonymMapName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);
    }
    /**
     * Retrieves a synonym map definition.
     * @param synonymMapName The name of the synonym map to retrieve.
     * @param options The options parameters.
     */
    get(synonymMapName, options) {
        const operationArguments = {
            synonymMapName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.client.sendOperationRequest(operationArguments, getOperationSpec);
    }
    /**
     * Lists all synonym maps available for a search service.
     * @param options The options parameters.
     */
    list(options) {
        const operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.client.sendOperationRequest(operationArguments, listOperationSpec);
    }
    /**
     * Creates a new synonym map.
     * @param synonymMap The definition of the synonym map to create.
     * @param options The options parameters.
     */
    create(synonymMap, options) {
        const operationArguments = {
            synonymMap,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.client.sendOperationRequest(operationArguments, createOperationSpec);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/synonymmaps('{synonymMapName}')",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SynonymMap
        },
        201: {
            bodyMapper: Mappers.SynonymMap
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    requestBody: Parameters.synonymMap,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.synonymMapName],
    headerParameters: [
        Parameters.contentType,
        Parameters.accept,
        Parameters.xMsClientRequestId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.prefer
    ],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/synonymmaps('{synonymMapName}')",
    httpMethod: "DELETE",
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.synonymMapName],
    headerParameters: [
        Parameters.accept,
        Parameters.xMsClientRequestId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const getOperationSpec = {
    path: "/synonymmaps('{synonymMapName}')",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SynonymMap
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.synonymMapName],
    headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
    serializer
};
const listOperationSpec = {
    path: "/synonymmaps",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListSynonymMapsResult
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.select],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
    serializer
};
const createOperationSpec = {
    path: "/synonymmaps",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.SynonymMap
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    requestBody: Parameters.synonymMap,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.contentType,
        Parameters.accept,
        Parameters.xMsClientRequestId
    ],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=synonymMaps.js.map