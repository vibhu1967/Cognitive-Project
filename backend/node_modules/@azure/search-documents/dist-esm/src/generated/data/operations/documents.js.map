{"version":3,"file":"documents.js","sourceRoot":"","sources":["../../../../../src/generated/data/operations/documents.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchClient } from \"../searchClient\";\nimport {\n  DocumentsCountOptionalParams,\n  DocumentsCountResponse,\n  DocumentsSearchGetOptionalParams,\n  DocumentsSearchGetResponse,\n  SearchRequest,\n  DocumentsSearchPostOptionalParams,\n  DocumentsSearchPostResponse,\n  DocumentsGetOptionalParams,\n  DocumentsGetResponse,\n  DocumentsSuggestGetOptionalParams,\n  DocumentsSuggestGetResponse,\n  SuggestRequest,\n  DocumentsSuggestPostOptionalParams,\n  DocumentsSuggestPostResponse,\n  IndexBatch,\n  DocumentsIndexOptionalParams,\n  DocumentsIndexResponse,\n  DocumentsAutocompleteGetOptionalParams,\n  DocumentsAutocompleteGetResponse,\n  AutocompleteRequest,\n  DocumentsAutocompletePostOptionalParams,\n  DocumentsAutocompletePostResponse\n} from \"../models\";\n\n/** Class representing a Documents. */\nexport class Documents {\n  private readonly client: SearchClient;\n\n  /**\n   * Initialize a new instance of the class Documents class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SearchClient) {\n    this.client = client;\n  }\n\n  /**\n   * Queries the number of documents in the index.\n   * @param options The options parameters.\n   */\n  count(\n    options?: DocumentsCountOptionalParams\n  ): Promise<DocumentsCountResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      countOperationSpec\n    ) as Promise<DocumentsCountResponse>;\n  }\n\n  /**\n   * Searches for documents in the index.\n   * @param options The options parameters.\n   */\n  searchGet(\n    options?: DocumentsSearchGetOptionalParams\n  ): Promise<DocumentsSearchGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      searchGetOperationSpec\n    ) as Promise<DocumentsSearchGetResponse>;\n  }\n\n  /**\n   * Searches for documents in the index.\n   * @param searchRequest The definition of the Search request.\n   * @param options The options parameters.\n   */\n  searchPost(\n    searchRequest: SearchRequest,\n    options?: DocumentsSearchPostOptionalParams\n  ): Promise<DocumentsSearchPostResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      searchRequest,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      searchPostOperationSpec\n    ) as Promise<DocumentsSearchPostResponse>;\n  }\n\n  /**\n   * Retrieves a document from the index.\n   * @param key The key of the document to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    key: string,\n    options?: DocumentsGetOptionalParams\n  ): Promise<DocumentsGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      key,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getOperationSpec\n    ) as Promise<DocumentsGetResponse>;\n  }\n\n  /**\n   * Suggests documents in the index that match the given partial query text.\n   * @param searchText The search text to use to suggest documents. Must be at least 1 character, and no\n   *                   more than 100 characters.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's part\n   *                      of the index definition.\n   * @param options The options parameters.\n   */\n  suggestGet(\n    searchText: string,\n    suggesterName: string,\n    options?: DocumentsSuggestGetOptionalParams\n  ): Promise<DocumentsSuggestGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      searchText,\n      suggesterName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      suggestGetOperationSpec\n    ) as Promise<DocumentsSuggestGetResponse>;\n  }\n\n  /**\n   * Suggests documents in the index that match the given partial query text.\n   * @param suggestRequest The Suggest request.\n   * @param options The options parameters.\n   */\n  suggestPost(\n    suggestRequest: SuggestRequest,\n    options?: DocumentsSuggestPostOptionalParams\n  ): Promise<DocumentsSuggestPostResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      suggestRequest,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      suggestPostOperationSpec\n    ) as Promise<DocumentsSuggestPostResponse>;\n  }\n\n  /**\n   * Sends a batch of document write actions to the index.\n   * @param batch The batch of index actions.\n   * @param options The options parameters.\n   */\n  index(\n    batch: IndexBatch,\n    options?: DocumentsIndexOptionalParams\n  ): Promise<DocumentsIndexResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      batch,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      indexOperationSpec\n    ) as Promise<DocumentsIndexResponse>;\n  }\n\n  /**\n   * Autocompletes incomplete query terms based on input text and matching terms in the index.\n   * @param searchText The incomplete term which should be auto-completed.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's part\n   *                      of the index definition.\n   * @param options The options parameters.\n   */\n  autocompleteGet(\n    searchText: string,\n    suggesterName: string,\n    options?: DocumentsAutocompleteGetOptionalParams\n  ): Promise<DocumentsAutocompleteGetResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      searchText,\n      suggesterName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      autocompleteGetOperationSpec\n    ) as Promise<DocumentsAutocompleteGetResponse>;\n  }\n\n  /**\n   * Autocompletes incomplete query terms based on input text and matching terms in the index.\n   * @param autocompleteRequest The definition of the Autocomplete request.\n   * @param options The options parameters.\n   */\n  autocompletePost(\n    autocompleteRequest: AutocompleteRequest,\n    options?: DocumentsAutocompletePostOptionalParams\n  ): Promise<DocumentsAutocompletePostResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      autocompleteRequest,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      autocompletePostOperationSpec\n    ) as Promise<DocumentsAutocompletePostResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst countOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/$count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"Number\" } }\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst searchGetOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.searchText,\n    Parameters.includeTotalResultCount,\n    Parameters.facets,\n    Parameters.filter,\n    Parameters.highlightFields,\n    Parameters.highlightPostTag,\n    Parameters.highlightPreTag,\n    Parameters.minimumCoverage,\n    Parameters.orderBy,\n    Parameters.queryType,\n    Parameters.scoringParameters,\n    Parameters.scoringProfile,\n    Parameters.searchFields,\n    Parameters.searchMode,\n    Parameters.scoringStatistics,\n    Parameters.sessionId,\n    Parameters.select,\n    Parameters.skip,\n    Parameters.top\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst searchPostOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.post.search\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.searchRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.contentType\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst getOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs('{key}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } }\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.selectedFields],\n  urlParameters: [Parameters.endpoint, Parameters.indexName, Parameters.key],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst suggestGetOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.suggest\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SuggestDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.searchText1,\n    Parameters.suggesterName,\n    Parameters.filter1,\n    Parameters.useFuzzyMatching,\n    Parameters.highlightPostTag1,\n    Parameters.highlightPreTag1,\n    Parameters.minimumCoverage1,\n    Parameters.orderBy1,\n    Parameters.searchFields1,\n    Parameters.select1,\n    Parameters.top1\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst suggestPostOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.post.suggest\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SuggestDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.suggestRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.contentType\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst indexOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.index\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IndexDocumentsResult\n    },\n    207: {\n      bodyMapper: Mappers.IndexDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.batch,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.contentType\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst autocompleteGetOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.autocomplete\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AutocompleteResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.searchText1,\n    Parameters.suggesterName,\n    Parameters.autocompleteMode,\n    Parameters.filter2,\n    Parameters.useFuzzyMatching1,\n    Parameters.highlightPostTag2,\n    Parameters.highlightPreTag2,\n    Parameters.minimumCoverage2,\n    Parameters.searchFields2,\n    Parameters.top2\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer\n};\nconst autocompletePostOperationSpec: coreHttp.OperationSpec = {\n  path: \"/docs/search.post.autocomplete\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AutocompleteResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.autocompleteRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.xMsClientRequestId,\n    Parameters.contentType\n  ],\n  mediaType: \"json\",\n  serializer\n};\n"]}