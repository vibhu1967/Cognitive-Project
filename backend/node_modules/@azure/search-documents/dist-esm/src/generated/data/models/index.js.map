{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/data/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\n/** Describes an error condition for the Azure Cognitive Search API. */\nexport interface SearchError {\n  /**\n   * One of a server-defined set of error codes.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly code?: string;\n  /**\n   * A human-readable representation of the error.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly message: string;\n  /**\n   * An array of details about specific errors that led to this reported error.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly details?: SearchError[];\n}\n\n/** Response containing search results from an index. */\nexport interface SearchDocumentsResult {\n  /**\n   * The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can't return all the requested documents in a single Search response.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly count?: number;\n  /**\n   * A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly coverage?: number;\n  /**\n   * The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly facets?: { [propertyName: string]: FacetResult[] };\n  /**\n   * Continuation JSON payload returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly nextPageParameters?: SearchRequest;\n  /**\n   * The sequence of results returned by the query.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly results: SearchResult[];\n  /**\n   * Continuation URL returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly nextLink?: string;\n}\n\n/** A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval. */\nexport interface FacetResult {\n  /** Describes unknown properties. The value of an unknown property can be of \"any\" type. */\n  [property: string]: any;\n  /**\n   * The approximate count of documents falling within the bucket described by this facet.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly count?: number;\n}\n\n/** Parameters for filtering, sorting, faceting, paging, and other search query behaviors. */\nexport interface SearchRequest {\n  /** A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation. */\n  includeTotalResultCount?: boolean;\n  /** The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs. */\n  facets?: string[];\n  /** The OData $filter expression to apply to the search query. */\n  filter?: string;\n  /** The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting. */\n  highlightFields?: string;\n  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;. */\n  highlightPostTag?: string;\n  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;. */\n  highlightPreTag?: string;\n  /** A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100. */\n  minimumCoverage?: number;\n  /** The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. */\n  orderBy?: string;\n  /** A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax. */\n  queryType?: QueryType;\n  /** A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries. */\n  scoringStatistics?: ScoringStatistics;\n  /** A value to be used to create a sticky session, which can help getting more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character. */\n  sessionId?: string;\n  /** The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation--122.2,44.8\" (without the quotes). */\n  scoringParameters?: string[];\n  /** The name of a scoring profile to evaluate match scores for matching documents in order to sort the results. */\n  scoringProfile?: string;\n  /** A full-text search query expression; Use \"*\" or omit this parameter to match all documents. */\n  searchText?: string;\n  /** The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter. */\n  searchFields?: string;\n  /** A value that specifies whether any or all of the search terms must be matched in order to count the document as a match. */\n  searchMode?: SearchMode;\n  /** The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included. */\n  select?: string;\n  /** The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead. */\n  skip?: number;\n  /** The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results. */\n  top?: number;\n}\n\n/** Contains a document found by a search query, plus associated metadata. */\nexport interface SearchResult {\n  /** Describes unknown properties. The value of an unknown property can be of \"any\" type. */\n  [property: string]: any;\n  /**\n   * The relevance score of the document compared to other documents returned by the query.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly _score: number;\n  /**\n   * Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly _highlights?: { [propertyName: string]: string[] };\n}\n\n/** Response containing suggestion query results from an index. */\nexport interface SuggestDocumentsResult {\n  /**\n   * The sequence of results returned by the query.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly results: SuggestResult[];\n  /**\n   * A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly coverage?: number;\n}\n\n/** A result containing a document found by a suggestion query, plus associated metadata. */\nexport interface SuggestResult {\n  /** Describes unknown properties. The value of an unknown property can be of \"any\" type. */\n  [property: string]: any;\n  /**\n   * The text of the suggestion result.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly _text: string;\n}\n\n/** Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors. */\nexport interface SuggestRequest {\n  /** An OData expression that filters the documents considered for suggestions. */\n  filter?: string;\n  /** A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources. */\n  useFuzzyMatching?: boolean;\n  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled. */\n  highlightPostTag?: string;\n  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled. */\n  highlightPreTag?: string;\n  /** A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80. */\n  minimumCoverage?: number;\n  /** The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. */\n  orderBy?: string;\n  /** The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters. */\n  searchText: string;\n  /** The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester. */\n  searchFields?: string;\n  /** The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results. */\n  select?: string;\n  /** The name of the suggester as specified in the suggesters collection that's part of the index definition. */\n  suggesterName: string;\n  /** The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5. */\n  top?: number;\n}\n\n/** Contains a batch of document write actions to send to the index. */\nexport interface IndexBatch {\n  /** The actions in the batch. */\n  actions: IndexAction[];\n}\n\n/** Represents an index action that operates on a document. */\nexport interface IndexAction {\n  /** Describes unknown properties. The value of an unknown property can be of \"any\" type. */\n  [property: string]: any;\n  /** The operation to perform on a document in an indexing batch. */\n  __actionType: IndexActionType;\n}\n\n/** Response containing the status of operations for all documents in the indexing request. */\nexport interface IndexDocumentsResult {\n  /**\n   * The list of status information for each document in the indexing request.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly results: IndexingResult[];\n}\n\n/** Status of an indexing operation for a single document. */\nexport interface IndexingResult {\n  /**\n   * The key of a document that was in the indexing request.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly key: string;\n  /**\n   * The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly errorMessage?: string;\n  /**\n   * A value indicating whether the indexing operation succeeded for the document identified by the key.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly succeeded: boolean;\n  /**\n   * The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly statusCode: number;\n}\n\n/** The result of Autocomplete query. */\nexport interface AutocompleteResult {\n  /**\n   * A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage was not specified in the request.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly coverage?: number;\n  /**\n   * The list of returned Autocompleted items.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly results: AutocompleteItem[];\n}\n\n/** The result of Autocomplete requests. */\nexport interface AutocompleteItem {\n  /**\n   * The completed term.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly text: string;\n  /**\n   * The query along with the completed term.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly queryPlusText: string;\n}\n\n/** Parameters for fuzzy matching, and other autocomplete query behaviors. */\nexport interface AutocompleteRequest {\n  /** The search text on which to base autocomplete results. */\n  searchText: string;\n  /** Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms. */\n  autocompleteMode?: AutocompleteMode;\n  /** An OData expression that filters the documents used to produce completed terms for the Autocomplete result. */\n  filter?: string;\n  /** A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources. */\n  useFuzzyMatching?: boolean;\n  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled. */\n  highlightPostTag?: string;\n  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled. */\n  highlightPreTag?: string;\n  /** A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80. */\n  minimumCoverage?: number;\n  /** The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester. */\n  searchFields?: string;\n  /** The name of the suggester as specified in the suggesters collection that's part of the index definition. */\n  suggesterName: string;\n  /** The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5. */\n  top?: number;\n}\n\n/** Parameter group */\nexport interface RequestOptions {\n  /** The tracking ID sent with the request to help with debugging. */\n  xMsClientRequestId?: string;\n}\n\n/** Parameter group */\nexport interface SearchOptions {\n  /** A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation. */\n  includeTotalResultCount?: boolean;\n  /** The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs. */\n  facets?: string[];\n  /** The OData $filter expression to apply to the search query. */\n  filter?: string;\n  /** The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting. */\n  highlightFields?: string[];\n  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;. */\n  highlightPostTag?: string;\n  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;. */\n  highlightPreTag?: string;\n  /** A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100. */\n  minimumCoverage?: number;\n  /** The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. */\n  orderBy?: string[];\n  /** A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax. */\n  queryType?: QueryType;\n  /** The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation--122.2,44.8\" (without the quotes). */\n  scoringParameters?: string[];\n  /** The name of a scoring profile to evaluate match scores for matching documents in order to sort the results. */\n  scoringProfile?: string;\n  /** The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter. */\n  searchFields?: string[];\n  /** A value that specifies whether any or all of the search terms must be matched in order to count the document as a match. */\n  searchMode?: SearchMode;\n  /** A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. */\n  scoringStatistics?: ScoringStatistics;\n  /** A value to be used to create a sticky session, which can help to get more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character. */\n  sessionId?: string;\n  /** The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included. */\n  select?: string[];\n  /** The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and $filter with a range query instead. */\n  skip?: number;\n  /** The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results. */\n  top?: number;\n}\n\n/** Parameter group */\nexport interface SuggestOptions {\n  /** An OData expression that filters the documents considered for suggestions. */\n  filter?: string;\n  /** A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources. */\n  useFuzzyMatching?: boolean;\n  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled. */\n  highlightPostTag?: string;\n  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled. */\n  highlightPreTag?: string;\n  /** A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80. */\n  minimumCoverage?: number;\n  /** The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. */\n  orderBy?: string[];\n  /** The list of field names to search for the specified search text. Target fields must be included in the specified suggester. */\n  searchFields?: string[];\n  /** The list of fields to retrieve. If unspecified, only the key field will be included in the results. */\n  select?: string[];\n  /** The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5. */\n  top?: number;\n}\n\n/** Parameter group */\nexport interface AutocompleteOptions {\n  /** Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms. */\n  autocompleteMode?: AutocompleteMode;\n  /** An OData expression that filters the documents used to produce completed terms for the Autocomplete result. */\n  filter?: string;\n  /** A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources. */\n  useFuzzyMatching?: boolean;\n  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled. */\n  highlightPostTag?: string;\n  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled. */\n  highlightPreTag?: string;\n  /** A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80. */\n  minimumCoverage?: number;\n  /** The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester. */\n  searchFields?: string[];\n  /** The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5. */\n  top?: number;\n}\n\n/** Known values of {@link ApiVersion20200630} that the service accepts. */\nexport const enum KnownApiVersion20200630 {\n  /** Api Version '2020-06-30' */\n  TwoThousandTwenty0630 = \"2020-06-30\"\n}\n\n/**\n * Defines values for ApiVersion20200630. \\\n * {@link KnownApiVersion20200630} can be used interchangeably with ApiVersion20200630,\n *  this enum contains the known values that the service supports.\n * ### Know values supported by the service\n * **2020-06-30**: Api Version '2020-06-30'\n */\nexport type ApiVersion20200630 = string;\n/** Defines values for QueryType. */\nexport type QueryType = \"simple\" | \"full\";\n/** Defines values for SearchMode. */\nexport type SearchMode = \"any\" | \"all\";\n/** Defines values for ScoringStatistics. */\nexport type ScoringStatistics = \"local\" | \"global\";\n/** Defines values for IndexActionType. */\nexport type IndexActionType = \"upload\" | \"merge\" | \"mergeOrUpload\" | \"delete\";\n/** Defines values for AutocompleteMode. */\nexport type AutocompleteMode = \"oneTerm\" | \"twoTerms\" | \"oneTermWithContext\";\n\n/** Optional parameters. */\nexport interface DocumentsCountOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  requestOptionsParam?: RequestOptions;\n}\n\n/** Contains response data for the count operation. */\nexport type DocumentsCountResponse = {\n  /** The parsed response body. */\n  body: number;\n\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: number;\n  };\n};\n\n/** Optional parameters. */\nexport interface DocumentsSearchGetOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  requestOptionsParam?: RequestOptions;\n  /** Parameter group */\n  searchOptions?: SearchOptions;\n  /** A full-text search query expression; Use \"*\" or omit this parameter to match all documents. */\n  searchText?: string;\n}\n\n/** Contains response data for the searchGet operation. */\nexport type DocumentsSearchGetResponse = SearchDocumentsResult & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: SearchDocumentsResult;\n  };\n};\n\n/** Optional parameters. */\nexport interface DocumentsSearchPostOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  requestOptionsParam?: RequestOptions;\n}\n\n/** Contains response data for the searchPost operation. */\nexport type DocumentsSearchPostResponse = SearchDocumentsResult & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: SearchDocumentsResult;\n  };\n};\n\n/** Optional parameters. */\nexport interface DocumentsGetOptionalParams extends coreHttp.OperationOptions {\n  /** Parameter group */\n  requestOptionsParam?: RequestOptions;\n  /** List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document. */\n  selectedFields?: string[];\n}\n\n/** Contains response data for the get operation. */\nexport type DocumentsGetResponse = {\n  /** The parsed response body. */\n  body: any;\n\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: any;\n  };\n};\n\n/** Optional parameters. */\nexport interface DocumentsSuggestGetOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  requestOptionsParam?: RequestOptions;\n  /** Parameter group */\n  suggestOptions?: SuggestOptions;\n}\n\n/** Contains response data for the suggestGet operation. */\nexport type DocumentsSuggestGetResponse = SuggestDocumentsResult & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: SuggestDocumentsResult;\n  };\n};\n\n/** Optional parameters. */\nexport interface DocumentsSuggestPostOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  requestOptionsParam?: RequestOptions;\n}\n\n/** Contains response data for the suggestPost operation. */\nexport type DocumentsSuggestPostResponse = SuggestDocumentsResult & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: SuggestDocumentsResult;\n  };\n};\n\n/** Optional parameters. */\nexport interface DocumentsIndexOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  requestOptionsParam?: RequestOptions;\n}\n\n/** Contains response data for the index operation. */\nexport type DocumentsIndexResponse = IndexDocumentsResult & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: IndexDocumentsResult;\n  };\n};\n\n/** Optional parameters. */\nexport interface DocumentsAutocompleteGetOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  requestOptionsParam?: RequestOptions;\n  /** Parameter group */\n  autocompleteOptions?: AutocompleteOptions;\n}\n\n/** Contains response data for the autocompleteGet operation. */\nexport type DocumentsAutocompleteGetResponse = AutocompleteResult & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: AutocompleteResult;\n  };\n};\n\n/** Optional parameters. */\nexport interface DocumentsAutocompletePostOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  requestOptionsParam?: RequestOptions;\n}\n\n/** Contains response data for the autocompletePost operation. */\nexport type DocumentsAutocompletePostResponse = AutocompleteResult & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: AutocompleteResult;\n  };\n};\n\n/** Optional parameters. */\nexport interface SearchClientOptionalParams\n  extends coreHttp.ServiceClientOptions {\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}