{"version":3,"file":"searchIndexerClient.js","sourceRoot":"","sources":["../../src/searchIndexerClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  createPipelineFromOptions,\n  InternalPipelineOptions,\n  operationOptionsToRequestOptionsBase,\n  PipelineOptions,\n  RequestPolicyFactory,\n  bearerTokenAuthenticationPolicy\n} from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"./constants\";\nimport { SearchIndexerStatus } from \"./generated/service/models\";\nimport { SearchServiceClient as GeneratedClient } from \"./generated/service/searchServiceClient\";\nimport { logger } from \"./logger\";\nimport { createSearchApiKeyCredentialPolicy } from \"./searchApiKeyCredentialPolicy\";\nimport {\n  CreateOrUpdateSkillsetOptions,\n  CreateSkillsetOptions,\n  DeleteSkillsetOptions,\n  GetSkillSetOptions,\n  ListSkillsetsOptions,\n  SearchIndexerSkillset,\n  ListIndexersOptions,\n  CreateIndexerOptions,\n  GetIndexerOptions,\n  CreateorUpdateIndexerOptions,\n  DeleteIndexerOptions,\n  GetIndexerStatusOptions,\n  ResetIndexerOptions,\n  RunIndexerOptions,\n  ListDataSourceConnectionsOptions,\n  SearchIndexer,\n  SearchIndexerDataSourceConnection,\n  CreateDataSourceConnectionOptions,\n  DeleteDataSourceConnectionOptions,\n  GetDataSourceConnectionOptions,\n  CreateorUpdateDataSourceConnectionOptions\n} from \"./serviceModels\";\nimport * as utils from \"./serviceUtils\";\nimport { createSpan } from \"./tracing\";\nimport { odataMetadataPolicy } from \"./odataMetadataPolicy\";\nimport { KnownSearchAudience } from \"./searchAudience\";\n\n/**\n * Client options used to configure Cognitive Search API requests.\n */\nexport interface SearchIndexerClientOptions extends PipelineOptions {\n  /**\n   * The API version to use when communicating with the service.\n   */\n  apiVersion?: string;\n\n  /**\n   * The Audience to use for authentication with Azure Active Directory (AAD). The\n   * audience is not considered when using a shared key.\n   * {@link KnownSearchAudience} can be used interchangeably with audience\n   */\n  audience?: string;\n}\n\n/**\n * Class to perform operations to manage\n * (create, update, list/delete)\n * indexers, datasources & skillsets.\n */\nexport class SearchIndexerClient {\n  /**\n   * The API version to use when communicating with the service.\n   */\n  public readonly apiVersion: string = \"2020-06-30\";\n\n  /**\n   * The endpoint of the search service\n   */\n  public readonly endpoint: string;\n\n  /**\n   * @internal\n   * @hidden\n   * A reference to the auto-generated SearchServiceClient\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of SearchIndexerClient.\n   *\n   * Example usage:\n   * ```ts\n   * const { SearchIndexerClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n   *\n   * const client = new SearchIndexerClient(\n   *   \"<endpoint>\",\n   *   new AzureKeyCredential(\"<Admin Key>\");\n   * );\n   * ```\n   * @param endpoint - The endpoint of the search service\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the Search client.\n   */\n  constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options: SearchIndexerClientOptions = {}\n  ) {\n    this.endpoint = endpoint;\n\n    const libInfo = `azsdk-js-search-documents/${SDK_VERSION}`;\n    if (!options.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n    if (options.userAgentOptions.userAgentPrefix) {\n      options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      options.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\n            \"elapsed-time\",\n            \"Location\",\n            \"OData-MaxVersion\",\n            \"OData-Version\",\n            \"Prefer\",\n            \"throttle-reason\"\n          ]\n        }\n      }\n    };\n\n    const scope: string = options.audience\n      ? `${options.audience}/.default`\n      : `${KnownSearchAudience.AzurePublicCloud}/.default`;\n\n    const requestPolicyFactory: RequestPolicyFactory = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, scope)\n      : createSearchApiKeyCredentialPolicy(credential);\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, requestPolicyFactory);\n\n    if (Array.isArray(pipeline.requestPolicyFactories)) {\n      pipeline.requestPolicyFactories.unshift(odataMetadataPolicy(\"minimal\"));\n    }\n\n    let apiVersion = this.apiVersion;\n\n    if (options.apiVersion) {\n      if (![\"2020-06-30-Preview\", \"2020-06-30\"].includes(options.apiVersion)) {\n        throw new Error(`Invalid Api Version: ${options.apiVersion}`);\n      }\n      apiVersion = options.apiVersion;\n    }\n\n    this.client = new GeneratedClient(this.endpoint, apiVersion, pipeline);\n  }\n\n  /**\n   * Retrieves a list of existing indexers in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listIndexers(options: ListIndexersOptions = {}): Promise<Array<SearchIndexer>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listIndexers\", options);\n    try {\n      const result = await this.client.indexers.list(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result.indexers.map(utils.generatedSearchIndexerToPublicSearchIndexer);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing indexers in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listIndexersNames(options: ListIndexersOptions = {}): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listIndexersNames\", options);\n    try {\n      const result = await this.client.indexers.list({\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        select: \"name\"\n      });\n      return result.indexers.map((idx) => idx.name);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of existing data sources in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listDataSourceConnections(\n    options: ListDataSourceConnectionsOptions = {}\n  ): Promise<Array<SearchIndexerDataSourceConnection>> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-listDataSourceConnections\",\n      options\n    );\n    try {\n      const result = await this.client.dataSources.list(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result.dataSources.map(utils.generatedDataSourceToPublicDataSource);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing data sources in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listDataSourceConnectionsNames(\n    options: ListDataSourceConnectionsOptions = {}\n  ): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-listDataSourceConnectionsNames\",\n      options\n    );\n    try {\n      const result = await this.client.dataSources.list({\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        select: \"name\"\n      });\n      return result.dataSources.map((ds) => ds.name);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of existing Skillsets in the service.\n   * @param options - Options to the list Skillsets operation.\n   */\n  public async listSkillsets(\n    options: ListSkillsetsOptions = {}\n  ): Promise<Array<SearchIndexerSkillset>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listSkillsets\", options);\n    try {\n      const result = await this.client.skillsets.list(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result.skillsets.map(utils.generatedSkillsetToPublicSkillset);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing Skillsets in the service.\n   * @param options - Options to the list Skillsets operation.\n   */\n  public async listSkillsetsNames(options: ListSkillsetsOptions = {}): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listSkillsetsNames\", options);\n    try {\n      const result = await this.client.skillsets.list({\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        select: \"name\"\n      });\n      return result.skillsets.map((sks) => sks.name);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about an Indexer.\n   * @param indexerName - The name of the Indexer.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndexer(\n    indexerName: string,\n    options: GetIndexerOptions = {}\n  ): Promise<SearchIndexer> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-getIndexer\", options);\n    try {\n      const result = await this.client.indexers.get(\n        indexerName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSearchIndexerToPublicSearchIndexer(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about a DataSource\n   * @param dataSourceName - The name of the DataSource\n   * @param options - Additional optional arguments\n   */\n  public async getDataSourceConnection(\n    dataSourceConnectionName: string,\n    options: GetDataSourceConnectionOptions = {}\n  ): Promise<SearchIndexerDataSourceConnection> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-getDataSourceConnection\",\n      options\n    );\n    try {\n      const result = await this.client.dataSources.get(\n        dataSourceConnectionName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedDataSourceToPublicDataSource(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about an Skillset.\n   * @param indexName - The name of the Skillset.\n   * @param options - Additional optional arguments.\n   */\n  public async getSkillset(\n    skillsetName: string,\n    options: GetSkillSetOptions = {}\n  ): Promise<SearchIndexerSkillset> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-getSkillset\", options);\n    try {\n      const result = await this.client.skillsets.get(\n        skillsetName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSkillsetToPublicSkillset(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new indexer in a search service.\n   * @param indexer - The indexer definition to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createIndexer(\n    indexer: SearchIndexer,\n    options: CreateIndexerOptions = {}\n  ): Promise<SearchIndexer> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-createIndexer\", options);\n    try {\n      const result = await this.client.indexers.create(\n        utils.publicSearchIndexerToGeneratedSearchIndexer(indexer),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSearchIndexerToPublicSearchIndexer(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new dataSource in a search service.\n   * @param dataSourceConnection - The dataSource definition to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createDataSourceConnection(\n    dataSourceConnection: SearchIndexerDataSourceConnection,\n    options: CreateDataSourceConnectionOptions = {}\n  ): Promise<SearchIndexerDataSourceConnection> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createDataSourceConnection\",\n      options\n    );\n    try {\n      const result = await this.client.dataSources.create(\n        utils.publicDataSourceToGeneratedDataSource(dataSourceConnection),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedDataSourceToPublicDataSource(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new skillset in a search service.\n   * @param skillset - The skillset containing one or more skills to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createSkillset(\n    skillset: SearchIndexerSkillset,\n    options: CreateSkillsetOptions = {}\n  ): Promise<SearchIndexerSkillset> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-createSkillset\", options);\n    try {\n      const result = await this.client.skillsets.create(\n        utils.publicSkillsetToGeneratedSkillset(skillset),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return utils.generatedSkillsetToPublicSkillset(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new indexer or modifies an existing one.\n   * @param indexer - The information describing the indexer to be created/updated.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateIndexer(\n    indexer: SearchIndexer,\n    options: CreateorUpdateIndexerOptions = {}\n  ): Promise<SearchIndexer> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createOrUpdateIndexer\",\n      options\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? indexer.etag : undefined;\n\n      const result = await this.client.indexers.createOrUpdate(\n        indexer.name,\n        utils.publicSearchIndexerToGeneratedSearchIndexer(indexer),\n        {\n          ...operationOptionsToRequestOptionsBase(updatedOptions),\n          ifMatch: etag\n        }\n      );\n      return utils.generatedSearchIndexerToPublicSearchIndexer(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new datasource or modifies an existing one.\n   * @param dataSourceConnection - The information describing the datasource to be created/updated.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateDataSourceConnection(\n    dataSourceConnection: SearchIndexerDataSourceConnection,\n    options: CreateorUpdateDataSourceConnectionOptions = {}\n  ): Promise<SearchIndexerDataSourceConnection> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createOrUpdateDataSourceConnection\",\n      options\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? dataSourceConnection.etag : undefined;\n\n      const result = await this.client.dataSources.createOrUpdate(\n        dataSourceConnection.name,\n        utils.publicDataSourceToGeneratedDataSource(dataSourceConnection),\n        {\n          ...operationOptionsToRequestOptionsBase(updatedOptions),\n          ifMatch: etag\n        }\n      );\n      return utils.generatedDataSourceToPublicDataSource(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new Skillset or modifies an existing one.\n   * @param skillset - The information describing the index to be created.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateSkillset(\n    skillset: SearchIndexerSkillset,\n    options: CreateOrUpdateSkillsetOptions = {}\n  ): Promise<SearchIndexerSkillset> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createOrUpdateSkillset\",\n      options\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? skillset.etag : undefined;\n\n      const result = await this.client.skillsets.createOrUpdate(\n        skillset.name,\n        utils.publicSkillsetToGeneratedSkillset(skillset),\n        {\n          ...operationOptionsToRequestOptionsBase(updatedOptions),\n          ifMatch: etag\n        }\n      );\n\n      return utils.generatedSkillsetToPublicSkillset(result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing indexer.\n   * @param indexer - Indexer/Name of the indexer to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteIndexer(\n    indexer: string | SearchIndexer,\n    options: DeleteIndexerOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-deleteIndexer\", options);\n    try {\n      const indexerName: string = typeof indexer === \"string\" ? indexer : indexer.name;\n      const etag =\n        typeof indexer === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n          ? indexer.etag\n          : undefined;\n\n      await this.client.indexers.delete(indexerName, {\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        ifMatch: etag\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing datasource.\n   * @param dataSource - Datasource/Name of the datasource to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteDataSourceConnection(\n    dataSourceConnection: string | SearchIndexerDataSourceConnection,\n    options: DeleteDataSourceConnectionOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-deleteDataSourceConnection\",\n      options\n    );\n    try {\n      const dataSourceConnectionName: string =\n        typeof dataSourceConnection === \"string\" ? dataSourceConnection : dataSourceConnection.name;\n      const etag =\n        typeof dataSourceConnection === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n          ? dataSourceConnection.etag\n          : undefined;\n\n      await this.client.dataSources.delete(dataSourceConnectionName, {\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        ifMatch: etag\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing Skillset.\n   * @param skillset - Skillset/Name of the Skillset to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteSkillset(\n    skillset: string | SearchIndexerSkillset,\n    options: DeleteSkillsetOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-deleteSkillset\", options);\n    try {\n      const skillsetName: string = typeof skillset === \"string\" ? skillset : skillset.name;\n      const etag =\n        typeof skillset === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n          ? skillset.etag\n          : undefined;\n\n      await this.client.skillsets.delete(skillsetName, {\n        ...operationOptionsToRequestOptionsBase(updatedOptions),\n        ifMatch: etag\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the current status and execution history of an indexer.\n   * @param indexerName - The name of the indexer.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndexerStatus(\n    indexerName: string,\n    options: GetIndexerStatusOptions = {}\n  ): Promise<SearchIndexerStatus> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-getIndexerStatus\", options);\n    try {\n      const result = await this.client.indexers.getStatus(\n        indexerName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Resets the change tracking state associated with an indexer.\n   * @param indexerName - The name of the indexer to reset.\n   * @param options - Additional optional arguments.\n   */\n  public async resetIndexer(indexerName: string, options: ResetIndexerOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-resetIndexer\", options);\n    try {\n      await this.client.indexers.reset(\n        indexerName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs an indexer on-demand.\n   * @param indexerName - The name of the indexer to run.\n   * @param options - Additional optional arguments.\n   */\n  public async runIndexer(indexerName: string, options: RunIndexerOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-runIndexer\", options);\n    try {\n      await this.client.indexers.run(\n        indexerName,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}