{"version":3,"file":"serviceUtils.js","sourceRoot":"","sources":["../../src/serviceUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-http\";\nimport {\n  LexicalAnalyzerUnion,\n  CognitiveServicesAccountKey,\n  CognitiveServicesAccountUnion,\n  DefaultCognitiveServicesAccount,\n  SearchField as GeneratedSearchField,\n  SearchIndex as GeneratedSearchIndex,\n  RegexFlags,\n  SearchIndexer as GeneratedSearchIndexer,\n  SearchIndexerSkillset as GeneratedSearchIndexerSkillset,\n  SearchIndexerSkillUnion,\n  LexicalTokenizerUnion,\n  SynonymMap as GeneratedSynonymMap,\n  SearchIndexerDataSource as GeneratedSearchIndexerDataSourceConnection,\n  DataChangeDetectionPolicyUnion,\n  HighWaterMarkChangeDetectionPolicy,\n  SqlIntegratedChangeTrackingPolicy,\n  DataDeletionDetectionPolicyUnion,\n  SoftDeleteColumnDeletionDetectionPolicy,\n  LexicalAnalyzerName,\n  SimilarityUnion,\n  BM25Similarity,\n  ClassicSimilarity,\n  TokenFilterUnion,\n  SearchResourceEncryptionKey as GeneratedSearchResourceEncryptionKey,\n  ConditionalSkill,\n  KeyPhraseExtractionSkill,\n  OcrSkill,\n  ImageAnalysisSkill,\n  LanguageDetectionSkill,\n  ShaperSkill,\n  MergeSkill,\n  EntityRecognitionSkill,\n  SentimentSkill,\n  DocumentExtractionSkill,\n  CustomEntityLookupSkill,\n  SplitSkill,\n  TextTranslationSkill,\n  WebApiSkill,\n  LuceneStandardAnalyzer,\n  StopAnalyzer,\n  PatternAnalyzer as GeneratedPatternAnalyzer,\n  CustomAnalyzer,\n  PatternTokenizer\n} from \"./generated/service/models\";\nimport {\n  LexicalAnalyzer,\n  CharFilter,\n  CognitiveServicesAccount,\n  SearchField,\n  SearchIndex,\n  isComplexField,\n  ScoringProfile,\n  SimpleField,\n  SearchIndexerSkill,\n  SearchIndexerSkillset,\n  TokenFilter,\n  LexicalTokenizer,\n  SynonymMap,\n  SearchIndexer,\n  SearchIndexerDataSourceConnection,\n  DataChangeDetectionPolicy,\n  DataDeletionDetectionPolicy,\n  SimilarityAlgorithm,\n  SearchResourceEncryptionKey,\n  PatternAnalyzer\n} from \"./serviceModels\";\nimport { SuggestDocumentsResult, SuggestResult, SearchResult } from \"./indexModels\";\nimport {\n  SuggestDocumentsResult as GeneratedSuggestDocumentsResult,\n  SearchResult as GeneratedSearchResult\n} from \"./generated/data/models\";\n\nexport function convertSkillsToPublic(skills: SearchIndexerSkillUnion[]): SearchIndexerSkill[] {\n  if (!skills) {\n    return skills;\n  }\n\n  const result: SearchIndexerSkill[] = [];\n  for (const skill of skills) {\n    switch (skill.odatatype) {\n      case \"#Microsoft.Skills.Util.ConditionalSkill\":\n        result.push(skill as ConditionalSkill);\n        break;\n      case \"#Microsoft.Skills.Text.KeyPhraseExtractionSkill\":\n        result.push(skill as KeyPhraseExtractionSkill);\n        break;\n      case \"#Microsoft.Skills.Vision.OcrSkill\":\n        result.push(skill as OcrSkill);\n        break;\n      case \"#Microsoft.Skills.Vision.ImageAnalysisSkill\":\n        result.push(skill as ImageAnalysisSkill);\n        break;\n      case \"#Microsoft.Skills.Text.LanguageDetectionSkill\":\n        result.push(skill as LanguageDetectionSkill);\n        break;\n      case \"#Microsoft.Skills.Util.ShaperSkill\":\n        result.push(skill as ShaperSkill);\n        break;\n      case \"#Microsoft.Skills.Text.MergeSkill\":\n        result.push(skill as MergeSkill);\n        break;\n      case \"#Microsoft.Skills.Text.EntityRecognitionSkill\":\n        result.push(skill as EntityRecognitionSkill);\n        break;\n      case \"#Microsoft.Skills.Text.SentimentSkill\":\n        result.push(skill as SentimentSkill);\n        break;\n      case \"#Microsoft.Skills.Text.SplitSkill\":\n        result.push(skill as SplitSkill);\n        break;\n      case \"#Microsoft.Skills.Text.TranslationSkill\":\n        result.push(skill as TextTranslationSkill);\n        break;\n      case \"#Microsoft.Skills.Custom.WebApiSkill\":\n        result.push(skill as WebApiSkill);\n        break;\n      case \"#Microsoft.Skills.Text.CustomEntityLookupSkill\":\n        result.push(skill as CustomEntityLookupSkill);\n        break;\n      case \"#Microsoft.Skills.Util.DocumentExtractionSkill\":\n        result.push(skill as DocumentExtractionSkill);\n        break;\n    }\n  }\n  return result;\n}\n\nexport function convertCognitiveServicesAccountToGenerated(\n  cognitiveServicesAccount?: CognitiveServicesAccount\n): CognitiveServicesAccountUnion | undefined {\n  if (!cognitiveServicesAccount) {\n    return cognitiveServicesAccount;\n  }\n\n  return cognitiveServicesAccount as CognitiveServicesAccountUnion;\n}\n\nexport function convertCognitiveServicesAccountToPublic(\n  cognitiveServicesAccount?: CognitiveServicesAccountUnion\n): CognitiveServicesAccount | undefined {\n  if (!cognitiveServicesAccount) {\n    return cognitiveServicesAccount;\n  }\n\n  if (cognitiveServicesAccount.odatatype === \"#Microsoft.Azure.Search.DefaultCognitiveServices\") {\n    return cognitiveServicesAccount as DefaultCognitiveServicesAccount;\n  } else {\n    return cognitiveServicesAccount as CognitiveServicesAccountKey;\n  }\n}\n\nexport function convertTokenFiltersToGenerated(\n  tokenFilters?: TokenFilter[]\n): TokenFilterUnion[] | undefined {\n  if (!tokenFilters) {\n    return tokenFilters;\n  }\n\n  const result: TokenFilterUnion[] = [];\n  for (const filter of tokenFilters) {\n    result.push(filter);\n  }\n\n  return result;\n}\n\nexport function convertAnalyzersToGenerated(\n  analyzers?: LexicalAnalyzer[]\n): LexicalAnalyzerUnion[] | undefined {\n  if (!analyzers) {\n    return analyzers;\n  }\n\n  const result: LexicalAnalyzerUnion[] = [];\n  for (const analyzer of analyzers) {\n    switch (analyzer.odatatype) {\n      case \"#Microsoft.Azure.Search.StandardAnalyzer\":\n      case \"#Microsoft.Azure.Search.StopAnalyzer\":\n        result.push(analyzer);\n        break;\n      case \"#Microsoft.Azure.Search.PatternAnalyzer\":\n        result.push({\n          ...analyzer,\n          flags: analyzer.flags ? analyzer.flags.join(\"|\") : undefined\n        });\n        break;\n      case \"#Microsoft.Azure.Search.CustomAnalyzer\":\n        result.push({\n          ...analyzer,\n          tokenizerName: analyzer.tokenizerName\n        });\n        break;\n    }\n  }\n  return result;\n}\n\nexport function convertAnalyzersToPublic(\n  analyzers?: LexicalAnalyzerUnion[]\n): LexicalAnalyzer[] | undefined {\n  if (!analyzers) {\n    return analyzers;\n  }\n\n  const result: LexicalAnalyzer[] = [];\n  for (const analyzer of analyzers) {\n    switch (analyzer.odatatype) {\n      case \"#Microsoft.Azure.Search.StandardAnalyzer\":\n        result.push(analyzer as LuceneStandardAnalyzer);\n        break;\n      case \"#Microsoft.Azure.Search.StopAnalyzer\":\n        result.push(analyzer as StopAnalyzer);\n        break;\n      case \"#Microsoft.Azure.Search.PatternAnalyzer\":\n        result.push({\n          ...analyzer,\n          flags: (analyzer as GeneratedPatternAnalyzer).flags\n            ? ((analyzer as GeneratedPatternAnalyzer).flags!.split(\"|\") as RegexFlags[])\n            : undefined\n        } as PatternAnalyzer);\n        break;\n      case \"#Microsoft.Azure.Search.CustomAnalyzer\":\n        result.push({\n          ...analyzer,\n          tokenizerName: (analyzer as CustomAnalyzer).tokenizerName\n        } as CustomAnalyzer);\n        break;\n    }\n  }\n  return result;\n}\n\nexport function convertFieldsToPublic(fields: GeneratedSearchField[]): SearchField[] {\n  if (!fields) {\n    return fields;\n  }\n\n  return fields.map<SearchField>((field) => {\n    let result: SearchField;\n    if (field.type === \"Collection(Edm.ComplexType)\" || field.type === \"Edm.ComplexType\") {\n      return {\n        name: field.name,\n        type: field.type,\n        fields: convertFieldsToPublic(field.fields!)\n      };\n    } else {\n      const analyzerName: LexicalAnalyzerName | undefined | null = field.analyzer;\n      const searchAnalyzerName: LexicalAnalyzerName | undefined | null = field.searchAnalyzer;\n      const indexAnalyzerName: LexicalAnalyzerName | undefined | null = field.indexAnalyzer;\n      const synonymMapNames: string[] | undefined = field.synonymMaps;\n\n      const { retrievable, ...restField } = field;\n      const hidden = typeof retrievable === \"boolean\" ? !retrievable : retrievable;\n\n      result = {\n        ...restField,\n        hidden,\n        analyzerName,\n        searchAnalyzerName,\n        indexAnalyzerName,\n        synonymMapNames\n      } as SimpleField;\n    }\n    return result;\n  });\n}\n\nexport function convertFieldsToGenerated(fields: SearchField[]): GeneratedSearchField[] {\n  return fields.map<GeneratedSearchField>((field) => {\n    if (isComplexField(field)) {\n      return {\n        name: field.name,\n        type: field.type,\n        fields: convertFieldsToGenerated(field.fields)\n      };\n    } else {\n      const { hidden, ...restField } = field;\n      const retrievable = typeof hidden === \"boolean\" ? !hidden : hidden;\n      return {\n        ...restField,\n        retrievable,\n        // modify API defaults to use less storage for simple types\n        searchable: field.searchable ?? false,\n        filterable: field.filterable ?? false,\n        facetable: field.facetable ?? false,\n        sortable: field.sortable ?? false,\n        analyzer: field.analyzerName,\n        searchAnalyzer: field.searchAnalyzerName,\n        indexAnalyzer: field.indexAnalyzerName,\n        synonymMaps: field.synonymMapNames\n      };\n    }\n  });\n}\n\nexport function convertTokenizersToGenerated(\n  tokenizers?: LexicalTokenizer[]\n): LexicalTokenizerUnion[] | undefined {\n  if (!tokenizers) {\n    return tokenizers;\n  }\n\n  const result: LexicalTokenizerUnion[] = [];\n  for (const tokenizer of tokenizers) {\n    if (tokenizer.odatatype === \"#Microsoft.Azure.Search.PatternTokenizer\") {\n      result.push({\n        ...tokenizer,\n        flags: tokenizer.flags ? tokenizer.flags.join(\"|\") : undefined\n      });\n    } else {\n      result.push(tokenizer);\n    }\n  }\n  return result;\n}\n\nexport function convertTokenizersToPublic(\n  tokenizers?: LexicalTokenizerUnion[]\n): LexicalTokenizer[] | undefined {\n  if (!tokenizers) {\n    return tokenizers;\n  }\n\n  const result: LexicalTokenizer[] = [];\n  for (const tokenizer of tokenizers) {\n    if (tokenizer.odatatype === \"#Microsoft.Azure.Search.PatternTokenizer\") {\n      result.push({\n        ...tokenizer,\n        flags: (tokenizer as PatternTokenizer).flags\n          ? ((tokenizer as PatternTokenizer).flags!.split(\"|\") as RegexFlags[])\n          : undefined\n      });\n    } else {\n      result.push(tokenizer);\n    }\n  }\n  return result;\n}\n\nexport function convertSimilarityToGenerated(\n  similarity?: SimilarityAlgorithm\n): SimilarityUnion | undefined {\n  if (!similarity) {\n    return similarity;\n  }\n\n  return similarity as SimilarityUnion;\n}\n\nexport function convertSimilarityToPublic(\n  similarity?: SimilarityUnion\n): SimilarityAlgorithm | undefined {\n  if (!similarity) {\n    return similarity;\n  }\n\n  if (similarity.odatatype === \"#Microsoft.Azure.Search.ClassicSimilarity\") {\n    return similarity as ClassicSimilarity;\n  } else {\n    return similarity as BM25Similarity;\n  }\n}\n\nexport function extractOperationOptions<T extends OperationOptions>(\n  obj: T\n): {\n  operationOptions: OperationOptions;\n  restOptions: Pick<T, Exclude<keyof T, keyof OperationOptions>>;\n} {\n  const { abortSignal, requestOptions, tracingOptions, ...restOptions } = obj;\n\n  return {\n    operationOptions: {\n      abortSignal,\n      requestOptions,\n      tracingOptions\n    },\n    restOptions\n  };\n}\n\nexport function convertEncryptionKeyToPublic(\n  encryptionKey?: GeneratedSearchResourceEncryptionKey | null\n): SearchResourceEncryptionKey | undefined | null {\n  if (!encryptionKey) {\n    return encryptionKey;\n  }\n\n  const result: SearchResourceEncryptionKey = {\n    keyName: encryptionKey.keyName,\n    keyVersion: encryptionKey.keyVersion,\n    vaultUrl: encryptionKey.vaultUri\n  };\n\n  if (encryptionKey.accessCredentials) {\n    result.applicationId = encryptionKey.accessCredentials.applicationId;\n    result.applicationSecret = encryptionKey.accessCredentials.applicationSecret;\n  }\n\n  return result;\n}\n\nexport function convertEncryptionKeyToGenerated(\n  encryptionKey?: SearchResourceEncryptionKey | null\n): GeneratedSearchResourceEncryptionKey | undefined | null {\n  if (!encryptionKey) {\n    return encryptionKey;\n  }\n\n  const result: GeneratedSearchResourceEncryptionKey = {\n    keyName: encryptionKey.keyName,\n    keyVersion: encryptionKey.keyVersion,\n    vaultUri: encryptionKey.vaultUrl\n  };\n\n  if (encryptionKey.applicationId) {\n    result.accessCredentials = {\n      applicationId: encryptionKey.applicationId,\n      applicationSecret: encryptionKey.applicationSecret\n    };\n  }\n\n  return result;\n}\n\nexport function generatedIndexToPublicIndex(generatedIndex: GeneratedSearchIndex): SearchIndex {\n  return {\n    name: generatedIndex.name,\n    defaultScoringProfile: generatedIndex.defaultScoringProfile,\n    corsOptions: generatedIndex.corsOptions,\n    suggesters: generatedIndex.suggesters,\n    encryptionKey: convertEncryptionKeyToPublic(generatedIndex.encryptionKey),\n    etag: generatedIndex.etag,\n    analyzers: convertAnalyzersToPublic(generatedIndex.analyzers),\n    tokenizers: convertTokenizersToPublic(generatedIndex.tokenizers),\n    tokenFilters: generatedIndex.tokenFilters as TokenFilter[],\n    charFilters: generatedIndex.charFilters as CharFilter[],\n    scoringProfiles: generatedIndex.scoringProfiles as ScoringProfile[],\n    fields: convertFieldsToPublic(generatedIndex.fields),\n    similarity: convertSimilarityToPublic(generatedIndex.similarity)\n  };\n}\n\nexport function generatedSearchResultToPublicSearchResult<T>(\n  results: GeneratedSearchResult[]\n): SearchResult<T>[] {\n  const returnValues: SearchResult<T>[] = results.map<SearchResult<T>>((result) => {\n    const { _score, _highlights, rerankerScore, captions, ...restProps } = result;\n    const doc: { [key: string]: any } = {\n      ...restProps\n    };\n    const obj = {\n      score: _score,\n      highlights: _highlights,\n      document: doc\n    };\n    return obj as SearchResult<T>;\n  });\n  return returnValues;\n}\n\nexport function generatedSuggestDocumentsResultToPublicSuggestDocumentsResult<T>(\n  searchDocumentsResult: GeneratedSuggestDocumentsResult\n): SuggestDocumentsResult<T> {\n  const results = searchDocumentsResult.results.map<SuggestResult<T>>((element) => {\n    const { _text, ...restProps } = element;\n\n    const doc: { [key: string]: any } = {\n      ...restProps\n    };\n\n    const obj = {\n      text: _text,\n      document: doc\n    };\n\n    return obj as SuggestResult<T>;\n  });\n\n  const result: SuggestDocumentsResult<T> = {\n    results: results,\n    coverage: searchDocumentsResult.coverage\n  };\n\n  return result;\n}\n\nexport function publicIndexToGeneratedIndex(index: SearchIndex): GeneratedSearchIndex {\n  return {\n    name: index.name,\n    defaultScoringProfile: index.defaultScoringProfile,\n    corsOptions: index.corsOptions,\n    suggesters: index.suggesters,\n    encryptionKey: convertEncryptionKeyToGenerated(index.encryptionKey),\n    etag: index.etag,\n    tokenFilters: convertTokenFiltersToGenerated(index.tokenFilters),\n    charFilters: index.charFilters,\n    scoringProfiles: index.scoringProfiles,\n    analyzers: convertAnalyzersToGenerated(index.analyzers),\n    tokenizers: convertTokenizersToGenerated(index.tokenizers),\n    fields: convertFieldsToGenerated(index.fields),\n    similarity: convertSimilarityToGenerated(index.similarity)\n  };\n}\n\nexport function generatedSkillsetToPublicSkillset(\n  generatedSkillset: GeneratedSearchIndexerSkillset\n): SearchIndexerSkillset {\n  return {\n    name: generatedSkillset.name,\n    description: generatedSkillset.description,\n    skills: convertSkillsToPublic(generatedSkillset.skills),\n    cognitiveServicesAccount: convertCognitiveServicesAccountToPublic(\n      generatedSkillset.cognitiveServicesAccount\n    ),\n    knowledgeStore: generatedSkillset.knowledgeStore,\n    etag: generatedSkillset.etag,\n    encryptionKey: convertEncryptionKeyToPublic(generatedSkillset.encryptionKey)\n  };\n}\n\nexport function publicSkillsetToGeneratedSkillset(\n  skillset: SearchIndexerSkillset\n): GeneratedSearchIndexerSkillset {\n  return {\n    name: skillset.name,\n    description: skillset.description,\n    etag: skillset.etag,\n    skills: skillset.skills,\n    cognitiveServicesAccount: convertCognitiveServicesAccountToGenerated(\n      skillset.cognitiveServicesAccount\n    ),\n    knowledgeStore: skillset.knowledgeStore,\n    encryptionKey: convertEncryptionKeyToGenerated(skillset.encryptionKey)\n  };\n}\n\nexport function generatedSynonymMapToPublicSynonymMap(synonymMap: GeneratedSynonymMap): SynonymMap {\n  const result: SynonymMap = {\n    name: synonymMap.name,\n    encryptionKey: convertEncryptionKeyToPublic(synonymMap.encryptionKey),\n    etag: synonymMap.etag,\n    synonyms: []\n  };\n\n  if (synonymMap.synonyms) {\n    result.synonyms = synonymMap.synonyms.split(\"\\n\");\n  }\n\n  return result;\n}\n\nexport function publicSynonymMapToGeneratedSynonymMap(synonymMap: SynonymMap): GeneratedSynonymMap {\n  const result: GeneratedSynonymMap = {\n    name: synonymMap.name,\n    format: \"solr\",\n    encryptionKey: convertEncryptionKeyToGenerated(synonymMap.encryptionKey),\n    etag: synonymMap.etag,\n    synonyms: synonymMap.synonyms.join(\"\\n\")\n  };\n\n  result.encryptionKey = convertEncryptionKeyToGenerated(synonymMap.encryptionKey);\n\n  return result;\n}\n\nexport function publicSearchIndexerToGeneratedSearchIndexer(\n  indexer: SearchIndexer\n): GeneratedSearchIndexer {\n  return {\n    ...indexer,\n    encryptionKey: convertEncryptionKeyToGenerated(indexer.encryptionKey)\n  };\n}\n\nexport function generatedSearchIndexerToPublicSearchIndexer(\n  indexer: GeneratedSearchIndexer\n): SearchIndexer {\n  return {\n    ...indexer,\n    encryptionKey: convertEncryptionKeyToPublic(indexer.encryptionKey)\n  };\n}\n\nexport function publicDataSourceToGeneratedDataSource(\n  dataSource: SearchIndexerDataSourceConnection\n): GeneratedSearchIndexerDataSourceConnection {\n  return {\n    name: dataSource.name,\n    description: dataSource.description,\n    type: dataSource.type,\n    credentials: {\n      connectionString: dataSource.connectionString\n    },\n    container: dataSource.container,\n    etag: dataSource.etag,\n    dataChangeDetectionPolicy: dataSource.dataChangeDetectionPolicy,\n    dataDeletionDetectionPolicy: dataSource.dataDeletionDetectionPolicy,\n    encryptionKey: convertEncryptionKeyToGenerated(dataSource.encryptionKey)\n  };\n}\n\nexport function generatedDataSourceToPublicDataSource(\n  dataSource: GeneratedSearchIndexerDataSourceConnection\n): SearchIndexerDataSourceConnection {\n  return {\n    name: dataSource.name,\n    description: dataSource.name,\n    type: dataSource.type,\n    connectionString: dataSource.credentials.connectionString,\n    container: dataSource.container,\n    etag: dataSource.etag,\n    dataChangeDetectionPolicy: convertDataChangeDetectionPolicyToPublic(\n      dataSource.dataChangeDetectionPolicy\n    ),\n    dataDeletionDetectionPolicy: convertDataDeletionDetectionPolicyToPublic(\n      dataSource.dataDeletionDetectionPolicy\n    ),\n    encryptionKey: convertEncryptionKeyToPublic(dataSource.encryptionKey)\n  };\n}\n\nexport function convertDataChangeDetectionPolicyToPublic(\n  dataChangeDetectionPolicy?: DataChangeDetectionPolicyUnion | null\n): DataChangeDetectionPolicy | undefined | null {\n  if (!dataChangeDetectionPolicy) {\n    return dataChangeDetectionPolicy;\n  }\n\n  if (\n    dataChangeDetectionPolicy.odatatype ===\n    \"#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy\"\n  ) {\n    return dataChangeDetectionPolicy as HighWaterMarkChangeDetectionPolicy;\n  } else {\n    return dataChangeDetectionPolicy as SqlIntegratedChangeTrackingPolicy;\n  }\n}\n\nexport function convertDataDeletionDetectionPolicyToPublic(\n  dataDeletionDetectionPolicy?: DataDeletionDetectionPolicyUnion | null\n): DataDeletionDetectionPolicy | undefined | null {\n  if (!dataDeletionDetectionPolicy) {\n    return dataDeletionDetectionPolicy;\n  }\n\n  return dataDeletionDetectionPolicy as SoftDeleteColumnDeletionDetectionPolicy;\n}\n\nexport function getRandomIntegerInclusive(min: number, max: number): number {\n  // Make sure inputs are integers.\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  // Pick a random offset from zero to the size of the range.\n  // Since Math.random() can never return 1, we have to make the range one larger\n  // in order to be inclusive of the maximum value after we take the floor.\n  const offset = Math.floor(Math.random() * (max - min + 1));\n  return offset + min;\n}\n"]}